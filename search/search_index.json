{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview The Evidence-Based Medicine electronic Decision Support (EBMEDS) system brings evidence into practice by means of context-sensitive guidance at the point of care. EBMEDS receives structured patient data from electronic health records (EHRs) and returns reminders, therapeutic suggestions and diagnosis-specific links to guidelines. It can also be used to automatically prefill forms and calculators with patient specific data. In addition to real-time use, the EBMEDS decision support rules (so-called scripts ) can also be run in patient populations (\"virtual health checks\"). EBMEDS is a platform-independent service, which can be integrated into any EHR containing structured patient data. Other customized integrations are also possible. In addition to local installations of EBMEDS, there is also a cloud version of the service called which will be brought into use incrementally during 2017-2018. EBMEDS is developed by Duodecim Medical Publications Ltd , a Finnish company owned by the Finnish Medical Society Duodecim. Both the association and the company have a long-standing collaborative relationship with the Cochrane Collaboration , the GRADE Working Group , the Guidelines International Network (G-I-N) and the publishing company Wiley-Blackwell . Getting started EBMEDS talks two different protocols, JSON-formatted FHIR STU3, and a native XML format: Get started with FHIR Get started with XML System requirements See the system requirements page for a detailed overview of software and hardware requirements. Other resources EBMEDS script descriptions Duodecim's FHIR resources","title":"Home"},{"location":"#overview","text":"The Evidence-Based Medicine electronic Decision Support (EBMEDS) system brings evidence into practice by means of context-sensitive guidance at the point of care. EBMEDS receives structured patient data from electronic health records (EHRs) and returns reminders, therapeutic suggestions and diagnosis-specific links to guidelines. It can also be used to automatically prefill forms and calculators with patient specific data. In addition to real-time use, the EBMEDS decision support rules (so-called scripts ) can also be run in patient populations (\"virtual health checks\"). EBMEDS is a platform-independent service, which can be integrated into any EHR containing structured patient data. Other customized integrations are also possible. In addition to local installations of EBMEDS, there is also a cloud version of the service called which will be brought into use incrementally during 2017-2018. EBMEDS is developed by Duodecim Medical Publications Ltd , a Finnish company owned by the Finnish Medical Society Duodecim. Both the association and the company have a long-standing collaborative relationship with the Cochrane Collaboration , the GRADE Working Group , the Guidelines International Network (G-I-N) and the publishing company Wiley-Blackwell .","title":"Overview"},{"location":"#getting-started","text":"EBMEDS talks two different protocols, JSON-formatted FHIR STU3, and a native XML format: Get started with FHIR Get started with XML","title":"Getting started"},{"location":"#system-requirements","text":"See the system requirements page for a detailed overview of software and hardware requirements.","title":"System requirements"},{"location":"#other-resources","text":"EBMEDS script descriptions Duodecim's FHIR resources","title":"Other resources"},{"location":"components/","text":"Components When fully deployed, the EBMEDS solution includes the components pictured above. Each component is a Docker container, inside a Docker Swarm. Any of these components can be replicated across several machines, as performance and availability needs dictate. Docker Swarm performs an automatic round-robin load balancing on every network request done to any container with multiple instances. api-gateway Github: The API gateway is the access point from the outside world. It mostly acts as a request broker, forwarding requests to the appropriate containers, usually the engine. At the moment, it also provides the translation services between FHIR and the EBMEDS native XML format. Another output option is a custom JSON format used by some EBMEDS-connected apps. Input: FHIR requests, EBMEDS XML requests. Output: FHIR, EBMEDS XML, custom JSON formats. engine The main service, performing most of the calculations when performing decision support. Takes patient XML data as an input, and outputs data to aid in clinical decision making. Most notably, text-based reminder messages. Also produces Input: EBMEDS XML Output: EBMEDS XML, custom JSON formats coaching An ODA-specific container, may or may not be present in the future. A simple REST interface providing access to coaching programs produced by Duodecim. These programs are given in FHIR STU3 form, and contain a number of messages that are to be sent to a patient at set times to aid in e.g. weight loss, cutting down on alcohol consumtion etc. Input: HTTP REST requests. Output: FHIR diagnosis-specific-view A UI providing a specialised view of the results obtained from the engine, for a specific patient. This container works like a kind of proxy to the engine: instead of sending the XML with patient data to the engine, it is sent to this container. The request is sent onward to the engine with some special flags, making the engine produce a specialised JSON format, that this container renders as HTML for the user. The JSON can also be sent directly to the user, should he want to build his own UI. Input: EBMEDS XML Output: HTML comprehensive-medication-review Similar to diagnosis-specific-view, this is another specialised UI view, focusing on medication. Input: EBMEDS XML Output: HTML elasticsearch A standard Elasticsearch container, i.e. a database. Used for logging by all other containers (via logstash). Also, the engine saves request/response pairs to a separate index for debugging and statistics. Indices logstash-* : app logs from all other containers engine-* : request/response messages logstash A standard Logstash container. Logs from all other containers are sent here, where they are queued and tagged with some extra metadata. kibana A standard Kibana container. Kibana works as a web UI for inspecting logs or any other elasticsearch data. At the moment Kibana in EBMEDS is only geared towards use by system administrators and developers, but there is some demand for users to be able to access their own logs. It should be noted that with standard settings, Elasticsearch and Kibana have no user or namespace support, everything is global. This can be changed by getting an X-Pack license, which is costly. Supporting tools There are a number of tools external to the EBMEDS deployment that is used primarily by Duodecim to produce content. These are hosted by Duodecim. Script editor URL: Web-based UI for editing engine scripts (i.e. rulesets). Individual scripts can be set to apply to e.g. certain organizations, certain countries/languages or certain events. The text reminders are also defined here, as well as their translations. This script editor will be replaced by a new version soon. Compilation The scripts and their accompanying data is compiled from the script editor into text files that can be read by the engine. This compilation process also includes \"numerical\" medical data, i.e. databases of drug interactions etc. Some of this data is bought from other companies, some of it is produced in-house.","title":"Components"},{"location":"components/#components","text":"When fully deployed, the EBMEDS solution includes the components pictured above. Each component is a Docker container, inside a Docker Swarm. Any of these components can be replicated across several machines, as performance and availability needs dictate. Docker Swarm performs an automatic round-robin load balancing on every network request done to any container with multiple instances.","title":"Components"},{"location":"components/#api-gateway","text":"Github: The API gateway is the access point from the outside world. It mostly acts as a request broker, forwarding requests to the appropriate containers, usually the engine. At the moment, it also provides the translation services between FHIR and the EBMEDS native XML format. Another output option is a custom JSON format used by some EBMEDS-connected apps. Input: FHIR requests, EBMEDS XML requests. Output: FHIR, EBMEDS XML, custom JSON formats.","title":"api-gateway"},{"location":"components/#engine","text":"The main service, performing most of the calculations when performing decision support. Takes patient XML data as an input, and outputs data to aid in clinical decision making. Most notably, text-based reminder messages. Also produces Input: EBMEDS XML Output: EBMEDS XML, custom JSON formats","title":"engine"},{"location":"components/#coaching","text":"An ODA-specific container, may or may not be present in the future. A simple REST interface providing access to coaching programs produced by Duodecim. These programs are given in FHIR STU3 form, and contain a number of messages that are to be sent to a patient at set times to aid in e.g. weight loss, cutting down on alcohol consumtion etc. Input: HTTP REST requests. Output: FHIR","title":"coaching"},{"location":"components/#diagnosis-specific-view","text":"A UI providing a specialised view of the results obtained from the engine, for a specific patient. This container works like a kind of proxy to the engine: instead of sending the XML with patient data to the engine, it is sent to this container. The request is sent onward to the engine with some special flags, making the engine produce a specialised JSON format, that this container renders as HTML for the user. The JSON can also be sent directly to the user, should he want to build his own UI. Input: EBMEDS XML Output: HTML","title":"diagnosis-specific-view"},{"location":"components/#comprehensive-medication-review","text":"Similar to diagnosis-specific-view, this is another specialised UI view, focusing on medication. Input: EBMEDS XML Output: HTML","title":"comprehensive-medication-review"},{"location":"components/#elasticsearch","text":"A standard Elasticsearch container, i.e. a database. Used for logging by all other containers (via logstash). Also, the engine saves request/response pairs to a separate index for debugging and statistics.","title":"elasticsearch"},{"location":"components/#indices","text":"logstash-* : app logs from all other containers engine-* : request/response messages","title":"Indices"},{"location":"components/#logstash","text":"A standard Logstash container. Logs from all other containers are sent here, where they are queued and tagged with some extra metadata.","title":"logstash"},{"location":"components/#kibana","text":"A standard Kibana container. Kibana works as a web UI for inspecting logs or any other elasticsearch data. At the moment Kibana in EBMEDS is only geared towards use by system administrators and developers, but there is some demand for users to be able to access their own logs. It should be noted that with standard settings, Elasticsearch and Kibana have no user or namespace support, everything is global. This can be changed by getting an X-Pack license, which is costly.","title":"kibana"},{"location":"components/#supporting-tools","text":"There are a number of tools external to the EBMEDS deployment that is used primarily by Duodecim to produce content. These are hosted by Duodecim.","title":"Supporting tools"},{"location":"components/#script-editor","text":"URL: Web-based UI for editing engine scripts (i.e. rulesets). Individual scripts can be set to apply to e.g. certain organizations, certain countries/languages or certain events. The text reminders are also defined here, as well as their translations. This script editor will be replaced by a new version soon.","title":"Script editor"},{"location":"components/#compilation","text":"The scripts and their accompanying data is compiled from the script editor into text files that can be read by the engine. This compilation process also includes \"numerical\" medical data, i.e. databases of drug interactions etc. Some of this data is bought from other companies, some of it is produced in-house.","title":"Compilation"},{"location":"installation/","text":"Installation The main steps to installing a minimal working deployment of EBMEDS are the following: Install prerequisites Get a Docker registry username from Duodecim Configure the service Start up the service These steps are given in more detail below. Install prerequisites EBMEDS only requires Docker to run. Docker runs on Linux, Windows and Mac, but Linux is recommended, since Docker runs Linux internally and thus running it on other platforms incurs a small performance hit. Note that Docker supports running Windows internally on newer versions of Windows Server, but this is not supported by EBMEDS. It is also recommended to have git available on the server, for downloading the deployment package and keeping track of your local changes. Install Docker The installation instructions for Docker itself can be found on e.g. Docker's site . We support version 1.13 or newer, and recommend the latest stable version. We warmly recommend to get well acquainted with Docker, many of the configuration steps below are more Docker specific than EBMEDS specific. Download ebmeds-docker repository Duodecim provides the ebmeds-docker package, which is freely available and contains a pre-configured setup for a minimal installation of EBMEDS. Minimal in this case means a single-server setup for basic usage. The setup includes Four running copies of the EBMEDS analytical engine The services Logstash and Elasticsearch for storing log messages and (optionally) entire request bodies The Kibana service for inspecting the above data Redis for storing user configuration and for caching optimizations The package is downloaded by running the command # Get a copy of the EBMEDS Docker configuration git clone https://github.com/ebmeds/ebmeds-docker.git # We will be working from this directory for the rest of this installation guide cd ebmeds-docker This repository does not contain the Docker images themselves, only startup scripts and configuration files. It also contains a sample docker-compose.yml file to get a Docker Swarm up and running with minimal effort. This file can be used as inspiration for more advanced setups. Configure the services EBMEDS consists of a number of services: api-gateway format-converter engine clinical-datastore elastichsearch (third-party software) kibana (third-party software) logstash (third-party software) redis (third-party software) These services are pre-configured to work together, however some settings need to be decided upon by the system administrator. The settings can be found in config.env : LOG_LEVEL may be handy to set to debug while setting up. Return it to info or warn for production ES_JAVA_OPTS are options for Elasticsearch, follow the instructions in the comments LS_JAVA_OPTS are options for Logstash, follow the instructions in the comments xpack.* advanced, paid for features of Elasticsearch that are not part of the standard package. Consult the Elastic Stack documentation to see if it is something you need. Get a Docker registry username from Duodecim If you don't already have it, you need a Duodecim-supplied username and password to be able to download the EBMEDS Docker images, which reside in a private repository at quay.io . The username is in the form duodecim+yourname . Start the service EBMEDS' Docker images are stored in a repository on quay.io. Vendor organizations are provided with a login username and password. The credentials are asked on each run of the start.sh command, which quickly gets cumbersome. Instead, the credentials can be passed as environment variables DOCKER_LOGIN and DOCKER_PASSWORD , like so: DOCKER_LOGIN=duodecim+example DOCKER_PASSWORD=example sudo -E sh start.sh Configure the service The main configuration files are config.env for system configuration, and users.json for configuring the actual features of EBMEDS. More in this on the configuration page . Stopping or updating the service Stopping is simply done by running the stop.sh script, potentially with super-user privileges. In other words, sudo sh stop.sh while updating the service (e.g. if you want to deploy a new version or change the configuration) is done by repeating the command given in Start the service . File system access Docker containers cannot per default persist data to disk, i.e. all changes to the container file system are lost when a container is shut down. Therefore, Docker must be explicitly told when it is allowed to read from or write to the filesystem on the server. Reading files from outside the container (in practice, we are talking about configuration files) are done by mounting the files into the container. Examples of this can be seen in docker-compose.yml under the volumes property of some of the services. Writing to the filesystem outside the container is done by mounting so-called volumes into the containers. Changes to the files inside the containers are then reflected on the filesystem of the server itself. The volumes are usually physically located in /var/lib/docker/volumes , but this varies from system to system. In any case, wherever these volumes are kept, sufficient disk space should be reserved. Also note that the Docker daemon itself will store pulled images internally. These images are not removed by default when new versions are pulled, to support roll-backs of updates that are not working etc. The system administrator should keep in mind that the images will, in time, take up a lot of disk space, and steps should be taken to remove unused Docker images. These are also kept in **/var/lib/docker** Advanced deployment There are many advanced features of Docker that can be used to make the service more failsafe. This includes backups, monitoring, automatic node failure recovery etc. These advanced features should be implemented by a competent DevOps professional and is not covered in this documentation. Verifying the installation To see that the installation is succesful, perform the checklist below. $HOST is the hostname of the server running the Swarm. It may also be localhost: Make a HTTP GET to $HOST:3001/status, you should receive the reply \"OK\". Make a HTTP POST to $HOST:3001/xml, with the payload of an EBMEDS XML request. You should receive an XML response. Open up Kibana at $HOST:5601 and add the index ebmeds-logs , if not already added. In the \"Discover\" tab, check the ebmeds-logs index to see that logging from the various containers is working. Use the command docker ps -a ( sudo may be required) to check that all the services stay up for more than a couple of minutes. If not, there may be a file permission problem or you are running out of memory. docker logs should give you more clues.","title":"Installation"},{"location":"installation/#installation","text":"The main steps to installing a minimal working deployment of EBMEDS are the following: Install prerequisites Get a Docker registry username from Duodecim Configure the service Start up the service These steps are given in more detail below.","title":"Installation"},{"location":"installation/#install-prerequisites","text":"EBMEDS only requires Docker to run. Docker runs on Linux, Windows and Mac, but Linux is recommended, since Docker runs Linux internally and thus running it on other platforms incurs a small performance hit. Note that Docker supports running Windows internally on newer versions of Windows Server, but this is not supported by EBMEDS. It is also recommended to have git available on the server, for downloading the deployment package and keeping track of your local changes.","title":"Install prerequisites"},{"location":"installation/#install-docker","text":"The installation instructions for Docker itself can be found on e.g. Docker's site . We support version 1.13 or newer, and recommend the latest stable version. We warmly recommend to get well acquainted with Docker, many of the configuration steps below are more Docker specific than EBMEDS specific.","title":"Install Docker"},{"location":"installation/#download-ebmeds-docker-repository","text":"Duodecim provides the ebmeds-docker package, which is freely available and contains a pre-configured setup for a minimal installation of EBMEDS. Minimal in this case means a single-server setup for basic usage. The setup includes Four running copies of the EBMEDS analytical engine The services Logstash and Elasticsearch for storing log messages and (optionally) entire request bodies The Kibana service for inspecting the above data Redis for storing user configuration and for caching optimizations The package is downloaded by running the command # Get a copy of the EBMEDS Docker configuration git clone https://github.com/ebmeds/ebmeds-docker.git # We will be working from this directory for the rest of this installation guide cd ebmeds-docker This repository does not contain the Docker images themselves, only startup scripts and configuration files. It also contains a sample docker-compose.yml file to get a Docker Swarm up and running with minimal effort. This file can be used as inspiration for more advanced setups.","title":"Download ebmeds-docker repository"},{"location":"installation/#configure-the-services","text":"EBMEDS consists of a number of services: api-gateway format-converter engine clinical-datastore elastichsearch (third-party software) kibana (third-party software) logstash (third-party software) redis (third-party software) These services are pre-configured to work together, however some settings need to be decided upon by the system administrator. The settings can be found in config.env : LOG_LEVEL may be handy to set to debug while setting up. Return it to info or warn for production ES_JAVA_OPTS are options for Elasticsearch, follow the instructions in the comments LS_JAVA_OPTS are options for Logstash, follow the instructions in the comments xpack.* advanced, paid for features of Elasticsearch that are not part of the standard package. Consult the Elastic Stack documentation to see if it is something you need.","title":"Configure the services"},{"location":"installation/#get-a-docker-registry-username-from-duodecim","text":"If you don't already have it, you need a Duodecim-supplied username and password to be able to download the EBMEDS Docker images, which reside in a private repository at quay.io . The username is in the form duodecim+yourname .","title":"Get a Docker registry username from Duodecim"},{"location":"installation/#start-the-service","text":"EBMEDS' Docker images are stored in a repository on quay.io. Vendor organizations are provided with a login username and password. The credentials are asked on each run of the start.sh command, which quickly gets cumbersome. Instead, the credentials can be passed as environment variables DOCKER_LOGIN and DOCKER_PASSWORD , like so: DOCKER_LOGIN=duodecim+example DOCKER_PASSWORD=example sudo -E sh start.sh","title":"Start the service"},{"location":"installation/#configure-the-service","text":"The main configuration files are config.env for system configuration, and users.json for configuring the actual features of EBMEDS. More in this on the configuration page .","title":"Configure the service"},{"location":"installation/#stopping-or-updating-the-service","text":"Stopping is simply done by running the stop.sh script, potentially with super-user privileges. In other words, sudo sh stop.sh while updating the service (e.g. if you want to deploy a new version or change the configuration) is done by repeating the command given in Start the service .","title":"Stopping or updating the service"},{"location":"installation/#file-system-access","text":"Docker containers cannot per default persist data to disk, i.e. all changes to the container file system are lost when a container is shut down. Therefore, Docker must be explicitly told when it is allowed to read from or write to the filesystem on the server. Reading files from outside the container (in practice, we are talking about configuration files) are done by mounting the files into the container. Examples of this can be seen in docker-compose.yml under the volumes property of some of the services. Writing to the filesystem outside the container is done by mounting so-called volumes into the containers. Changes to the files inside the containers are then reflected on the filesystem of the server itself. The volumes are usually physically located in /var/lib/docker/volumes , but this varies from system to system. In any case, wherever these volumes are kept, sufficient disk space should be reserved. Also note that the Docker daemon itself will store pulled images internally. These images are not removed by default when new versions are pulled, to support roll-backs of updates that are not working etc. The system administrator should keep in mind that the images will, in time, take up a lot of disk space, and steps should be taken to remove unused Docker images. These are also kept in **/var/lib/docker**","title":"File system access"},{"location":"installation/#advanced-deployment","text":"There are many advanced features of Docker that can be used to make the service more failsafe. This includes backups, monitoring, automatic node failure recovery etc. These advanced features should be implemented by a competent DevOps professional and is not covered in this documentation.","title":"Advanced deployment"},{"location":"installation/#verifying-the-installation","text":"To see that the installation is succesful, perform the checklist below. $HOST is the hostname of the server running the Swarm. It may also be localhost: Make a HTTP GET to $HOST:3001/status, you should receive the reply \"OK\". Make a HTTP POST to $HOST:3001/xml, with the payload of an EBMEDS XML request. You should receive an XML response. Open up Kibana at $HOST:5601 and add the index ebmeds-logs , if not already added. In the \"Discover\" tab, check the ebmeds-logs index to see that logging from the various containers is working. Use the command docker ps -a ( sudo may be required) to check that all the services stay up for more than a couple of minutes. If not, there may be a file permission problem or you are running out of memory. docker logs should give you more clues.","title":"Verifying the installation"},{"location":"security/","text":"Security Network security HTTP/HTTPS By default, EBMEDS 2.0 serves its API over HTTP, with no encryption. It is, however, strongly recommended to enable HTTPS or use a reverse proxy like nginx to provide SSL termination. There are two potentially public service that is good to protect: api-gateway and kibana . Enabling native HTTPS for api-gateway HTTPS is enabled by setting the environment variable HTTP_MODE to https when launching the api-gateway container. In addition to this, the system administrator must obtain/generate a .key and .crt file and bind mount them onto the container so they may be read by the api-gateway service. Inside the container, the path to the aforementioned key and certificate files are by default ssl/server.key and ssl/server.crt but may be configured with the environment variables HTTPS_KEY_PATH and HTTPS_CERT_PATH , respectively. The path can be absolute, or (like in the default case) relative to the execution directory. As an example, when starting the api-gateway service, it can be done like this: # bind mount the .key and .crt files to match the default container-internal ssl/server.* path docker run -d -it --name api-gateway -e HTTP_MODE=https -v path/to/generated.key:ssl/server.key:ro -v path/to/generated.crt:ssl/server.crt:ro api-gateway:latest Note that if api-gateway is clustered onto several nodes, the files must be present on each server, either copied or shared over a network file system. Enabling native HTTPS for kibana It is not recommended to open up the log viewing UI kibana for public use due to data sensitivity concerns. In any case, however Kibana is run, it is usually a good idea to encrypt the traffic. Kibana is an open source project with flexible configuration options, SSL being one of them. SSL configuration ( ) is done similarly to api-gateway , i.e. SSL is turned on and .key and .crt files are provided to the service. In this case, it is not done by environment variables but the Kibana configuration file. In the ebmeds-docker package, this is found in kibana/config/kibana.yml . Authentication (partially implemented) EBMEDS 2.0 handles authentication by a HTTP bearer token. This token must be included in the header of all requests to the service. EBMEDS can be configured to: Accept all traffic, without a token. Authenticate traffic using a single, global token. ( To be implemented ) Authenticate traffic using a multitenancy approach, where each user has his own token. This also enables per-user configuration of the response. Patient data security and liability EBMEDS operates with patient data, so data security and anonymity is paramount. EBMEDS has no need for any personally identifying data like names or social security numbers. The only biographical information used is age and gender, which is sent in addition to the clinical data (diagnoses, medication etc.) itself. However, it is up to the users of the EBMEDS service to ensure that no explicitly identifying information is sent to EBMEDS. Duodecim accepts no liability should e.g. social security numbers be present in the request data. The data security model is simple insofar as EBMEDS is completely stateless. In other words, there is no direct way of connecting the data in a request with any earlier requests. This also means that each request must contain all the data required for that particular CDS context. Cluster security EBMEDS is a microservice architecture, meaning that the EBMEDS service in general consists of smaller services that communicate internally with each other. EBMEDS can be run on a single machine or clustered over multiple servers. The underlying platform is Docker Swarm, which has the following network security model . In short, if EBMEDS is clustered onto multiple machines, intra-service communication may send patient data \"over the wire\". This traffic is unencrypted by default. It is up to the system administrator to ensure that communication between cluster nodes is secure, especially if the cluster is located in multiple data centers. Alternatively encryption of the entire Swarm overlay network can be enabled in Docker, although this is bad for performance. Logging The one place where patient data may be stored is the service's logs. EBMEDS internally runs the so-called \"ELK stack\" (Elasticsearch, Logstash, Kibana). In other words, all logs are stored in an Elasticsearch database. Logging is done in two ways: regular service event logs, and logging of request/response data, i.e. patient data. Again, once the data is logged, it is up to the system administrator to store it and its backups in a secure fashion. Request/response logging EBMEDS may be configured to log the request data, i.e. patient data, together with the resulting response data structure. This is done partially for debugging purposes, partially for liability purposes (if some user requires a certain period of traceability for all decision support requests). The request/response data is also useful for statistical reasons, and some services utilizing this log data has already cropped up. This type of logging can naturally be turned off completely. Service event logging Regular \"system logs\" from the internal microservices, interesting mainly for system administrators and developers. All services use the Bunyan logging library which in turn sends the logs to Logstash, and finally they end up in Elasticsearch. Bunyan, like so many other logging libraries, has the concept of log levels , i.e. the quantified importance of a particular log message. In normal operation, logging is only done on the info log level, meaning that the levels info , warn , error , fatal actually end up in the log database. NOTE : If the log level is set lower than info , i.e. if it is set to debug or trace , there may be some logging of patient data, in the form of internal data structures that are displayed in the logs. Do not use these log levels in production, at least not if you want to avoid storing patient data. Error handling EBMEDS 2.0 uses standard HTTP error codes in its API. In addition to this, a JSON body is returned with some additional information, if available. Example: { \"statusCode\": 400, \"message\": \"Validation error: QuestionnaireResponse did not validate against Questionnaire: [more info]\", \"code\": \"validation\" } statusCode : The same numerical HTTP error code as in the HTTP headers. message : A human-readable error message. code ( optional ): A short string describing special error types, for errors with a definite meaning to the caller. Is not necessarily present in all error messages. The available types are found below. Error types In addition to the HTTP status code, some errors may have a more specific type attached to it. The current list of types is: validation : The user sent a request that failed validation in some way. questionnaire-deprecated : The entire questionnaire has been removed from production and should not be used. questionnaire-version-deprecated : This specific version of the questionnaire has been removed from production, please use a newer version. Retrying requests As a general rule of thumb, 4xx errors require some action on the calling side, while 5xx errors are server-side. For 5xx errors, especially HTTP error 503 (service busy/unavailable), it is prudent to retry the request after a short wait, in case the error is transient in nature.","title":"Security & Error handling"},{"location":"security/#security","text":"","title":"Security"},{"location":"security/#network-security","text":"","title":"Network security"},{"location":"security/#httphttps","text":"By default, EBMEDS 2.0 serves its API over HTTP, with no encryption. It is, however, strongly recommended to enable HTTPS or use a reverse proxy like nginx to provide SSL termination. There are two potentially public service that is good to protect: api-gateway and kibana .","title":"HTTP/HTTPS"},{"location":"security/#enabling-native-https-for-api-gateway","text":"HTTPS is enabled by setting the environment variable HTTP_MODE to https when launching the api-gateway container. In addition to this, the system administrator must obtain/generate a .key and .crt file and bind mount them onto the container so they may be read by the api-gateway service. Inside the container, the path to the aforementioned key and certificate files are by default ssl/server.key and ssl/server.crt but may be configured with the environment variables HTTPS_KEY_PATH and HTTPS_CERT_PATH , respectively. The path can be absolute, or (like in the default case) relative to the execution directory. As an example, when starting the api-gateway service, it can be done like this: # bind mount the .key and .crt files to match the default container-internal ssl/server.* path docker run -d -it --name api-gateway -e HTTP_MODE=https -v path/to/generated.key:ssl/server.key:ro -v path/to/generated.crt:ssl/server.crt:ro api-gateway:latest Note that if api-gateway is clustered onto several nodes, the files must be present on each server, either copied or shared over a network file system.","title":"Enabling native HTTPS for api-gateway"},{"location":"security/#enabling-native-https-for-kibana","text":"It is not recommended to open up the log viewing UI kibana for public use due to data sensitivity concerns. In any case, however Kibana is run, it is usually a good idea to encrypt the traffic. Kibana is an open source project with flexible configuration options, SSL being one of them. SSL configuration ( ) is done similarly to api-gateway , i.e. SSL is turned on and .key and .crt files are provided to the service. In this case, it is not done by environment variables but the Kibana configuration file. In the ebmeds-docker package, this is found in kibana/config/kibana.yml .","title":"Enabling native HTTPS for kibana"},{"location":"security/#authentication-partially-implemented","text":"EBMEDS 2.0 handles authentication by a HTTP bearer token. This token must be included in the header of all requests to the service. EBMEDS can be configured to: Accept all traffic, without a token. Authenticate traffic using a single, global token. ( To be implemented ) Authenticate traffic using a multitenancy approach, where each user has his own token. This also enables per-user configuration of the response.","title":"Authentication (partially implemented)"},{"location":"security/#patient-data-security-and-liability","text":"EBMEDS operates with patient data, so data security and anonymity is paramount. EBMEDS has no need for any personally identifying data like names or social security numbers. The only biographical information used is age and gender, which is sent in addition to the clinical data (diagnoses, medication etc.) itself. However, it is up to the users of the EBMEDS service to ensure that no explicitly identifying information is sent to EBMEDS. Duodecim accepts no liability should e.g. social security numbers be present in the request data. The data security model is simple insofar as EBMEDS is completely stateless. In other words, there is no direct way of connecting the data in a request with any earlier requests. This also means that each request must contain all the data required for that particular CDS context.","title":"Patient data security and liability"},{"location":"security/#cluster-security","text":"EBMEDS is a microservice architecture, meaning that the EBMEDS service in general consists of smaller services that communicate internally with each other. EBMEDS can be run on a single machine or clustered over multiple servers. The underlying platform is Docker Swarm, which has the following network security model . In short, if EBMEDS is clustered onto multiple machines, intra-service communication may send patient data \"over the wire\". This traffic is unencrypted by default. It is up to the system administrator to ensure that communication between cluster nodes is secure, especially if the cluster is located in multiple data centers. Alternatively encryption of the entire Swarm overlay network can be enabled in Docker, although this is bad for performance.","title":"Cluster security"},{"location":"security/#logging","text":"The one place where patient data may be stored is the service's logs. EBMEDS internally runs the so-called \"ELK stack\" (Elasticsearch, Logstash, Kibana). In other words, all logs are stored in an Elasticsearch database. Logging is done in two ways: regular service event logs, and logging of request/response data, i.e. patient data. Again, once the data is logged, it is up to the system administrator to store it and its backups in a secure fashion.","title":"Logging"},{"location":"security/#requestresponse-logging","text":"EBMEDS may be configured to log the request data, i.e. patient data, together with the resulting response data structure. This is done partially for debugging purposes, partially for liability purposes (if some user requires a certain period of traceability for all decision support requests). The request/response data is also useful for statistical reasons, and some services utilizing this log data has already cropped up. This type of logging can naturally be turned off completely.","title":"Request/response logging"},{"location":"security/#service-event-logging","text":"Regular \"system logs\" from the internal microservices, interesting mainly for system administrators and developers. All services use the Bunyan logging library which in turn sends the logs to Logstash, and finally they end up in Elasticsearch. Bunyan, like so many other logging libraries, has the concept of log levels , i.e. the quantified importance of a particular log message. In normal operation, logging is only done on the info log level, meaning that the levels info , warn , error , fatal actually end up in the log database. NOTE : If the log level is set lower than info , i.e. if it is set to debug or trace , there may be some logging of patient data, in the form of internal data structures that are displayed in the logs. Do not use these log levels in production, at least not if you want to avoid storing patient data.","title":"Service event logging"},{"location":"security/#error-handling","text":"EBMEDS 2.0 uses standard HTTP error codes in its API. In addition to this, a JSON body is returned with some additional information, if available. Example: { \"statusCode\": 400, \"message\": \"Validation error: QuestionnaireResponse did not validate against Questionnaire: [more info]\", \"code\": \"validation\" } statusCode : The same numerical HTTP error code as in the HTTP headers. message : A human-readable error message. code ( optional ): A short string describing special error types, for errors with a definite meaning to the caller. Is not necessarily present in all error messages. The available types are found below.","title":"Error handling"},{"location":"security/#error-types","text":"In addition to the HTTP status code, some errors may have a more specific type attached to it. The current list of types is: validation : The user sent a request that failed validation in some way. questionnaire-deprecated : The entire questionnaire has been removed from production and should not be used. questionnaire-version-deprecated : This specific version of the questionnaire has been removed from production, please use a newer version.","title":"Error types"},{"location":"security/#retrying-requests","text":"As a general rule of thumb, 4xx errors require some action on the calling side, while 5xx errors are server-side. For 5xx errors, especially HTTP error 503 (service busy/unavailable), it is prudent to retry the request after a short wait, in case the error is transient in nature.","title":"Retrying requests"},{"location":"system-requirements/","text":"System requirements EBMEDS is a collection of services delivered as Docker containers. The system consists of the core EBMEDS services which are stateless, and auxiliary services such as databases for storing settings and logs. Docker was chosen to provide a standardized way of scaling up the solution. The solution is designed to be run in large, multi-node clusters but can be deployed on single servers as well. Reference deployment instructions Docker containers are highly portable and can be deployed in numerous ways. For inexperienced Docker system administrators, Duodecim provides instructions for a small reference installation with sensible defaults. These instructions are in the Github repository ebmeds-docker . Example single-node server If you are in a hurry and don't want to read the details below, here is a server configuration that should work for a small installation where no clustering is needed: CPU: 2 x Intel i5-7600 RAM: 8 GB Disk space: 256 GB OS: CentOS 7.4 (with latest patches) Docker: version 18.03.1-ce Software requirements Docker The minimum requirement is Docker 1.13, but we recommend always using the latest stable version, especially in multi-node clusters. Most Linux distributions have a mechanism for installing Docker straight from Docker Inc's own repositories, which is the recommended way. Docker comes in the free Community Edition (CE) and the paid-for Enterprise Edition (EE). EBMEDS runs on both, although inexperienced Docker admins may find the support channel for Enterprise Edition helpful. Operating system EBMEDS requires Linux. Any of the Linux distributions with the official Licensed Docker Infrastructure mark works well, meaning either CentOS, Fedora, Debian or Ubuntu. Please see the Docker documentation for more details about specific versions and caveats. Docker also runs natively on Windows, but note that so-called Windows containers are not supported. If you want to run EBMEDS on Windows, you must run Linux in a virtual machine. Elasticsearch The Elasticsearch database is an auxiliary service that is: An optional location to store application logs A mandatory location for storing EBMEDS Population data In the reference installation, Elasticsearch is also run as a Docker container inside Docker Swarm, alongside the EBMEDS core services. However, Elasticsearch can also be installed more \"traditionally\", either on the same server or on a separate one. This may be an attractive option if you have an existing Elasticsearch installation available. Clustering is also easier to handle outside the Docker Swarm for high availability setups. EBMEDS requires the 6.2.x version of Elasticsearch. See the Elasticsearch documentation for more details on operation and installation. As mentioned, Elasticsearch is optional for storing application logs. In the reference installation, logs are stored here. But all the application logs are routed through Logstash , which can be configured to store the data in a multitude of ways , including as plain files on disk. For population analysis, Elasticsearch (and Kibana) is still mandatory. Hardware requirements The hardware requirements of course rely on the scale of the installation. Below, we have listed recommendations for a single cluster node (or just a single server) when Elasticsearch is used, as per the reference installation. Should Elasticsearch be irrelevant for you, the changes in hardware requirements are noted separately below. CPU Any modern multicore x86_64 CPU is accepted. For performance, multiple cores are more important than higher clock rates. Minimum requirement: 8 cores, ~3 GHz . Example : 2 x Intel i5-7600 (2 x 4 cores) Recommended: 16 cores, ~3 GHz . Example : 2 x Intel i7-7820X (2 x 8 cores) RAM Minimum requirement: 8 GB (4 GB without Elasticsearch) Recommended: 16 GB (8 GB without Elasticsearch) Disk space: The main things that take up disk space are: Database contents, i.e. logs and population analysis data Docker images, old versions can be saved and rollbacks performed if wanted. If Elasticsearch is used, there should be a monitoring and archiving strategy for the data. Of course, this goes for any kind of logging solution. Minimum requirement: 256 GB (128 GB without Elasticsearch) Recommended: 512 GB (128 GB without Elasticsearch)","title":"System requirements"},{"location":"system-requirements/#system-requirements","text":"EBMEDS is a collection of services delivered as Docker containers. The system consists of the core EBMEDS services which are stateless, and auxiliary services such as databases for storing settings and logs. Docker was chosen to provide a standardized way of scaling up the solution. The solution is designed to be run in large, multi-node clusters but can be deployed on single servers as well.","title":"System requirements"},{"location":"system-requirements/#reference-deployment-instructions","text":"Docker containers are highly portable and can be deployed in numerous ways. For inexperienced Docker system administrators, Duodecim provides instructions for a small reference installation with sensible defaults. These instructions are in the Github repository ebmeds-docker .","title":"Reference deployment instructions"},{"location":"system-requirements/#example-single-node-server","text":"If you are in a hurry and don't want to read the details below, here is a server configuration that should work for a small installation where no clustering is needed: CPU: 2 x Intel i5-7600 RAM: 8 GB Disk space: 256 GB OS: CentOS 7.4 (with latest patches) Docker: version 18.03.1-ce","title":"Example single-node server"},{"location":"system-requirements/#software-requirements","text":"","title":"Software requirements"},{"location":"system-requirements/#docker","text":"The minimum requirement is Docker 1.13, but we recommend always using the latest stable version, especially in multi-node clusters. Most Linux distributions have a mechanism for installing Docker straight from Docker Inc's own repositories, which is the recommended way. Docker comes in the free Community Edition (CE) and the paid-for Enterprise Edition (EE). EBMEDS runs on both, although inexperienced Docker admins may find the support channel for Enterprise Edition helpful.","title":"Docker"},{"location":"system-requirements/#operating-system","text":"EBMEDS requires Linux. Any of the Linux distributions with the official Licensed Docker Infrastructure mark works well, meaning either CentOS, Fedora, Debian or Ubuntu. Please see the Docker documentation for more details about specific versions and caveats. Docker also runs natively on Windows, but note that so-called Windows containers are not supported. If you want to run EBMEDS on Windows, you must run Linux in a virtual machine.","title":"Operating system"},{"location":"system-requirements/#elasticsearch","text":"The Elasticsearch database is an auxiliary service that is: An optional location to store application logs A mandatory location for storing EBMEDS Population data In the reference installation, Elasticsearch is also run as a Docker container inside Docker Swarm, alongside the EBMEDS core services. However, Elasticsearch can also be installed more \"traditionally\", either on the same server or on a separate one. This may be an attractive option if you have an existing Elasticsearch installation available. Clustering is also easier to handle outside the Docker Swarm for high availability setups. EBMEDS requires the 6.2.x version of Elasticsearch. See the Elasticsearch documentation for more details on operation and installation. As mentioned, Elasticsearch is optional for storing application logs. In the reference installation, logs are stored here. But all the application logs are routed through Logstash , which can be configured to store the data in a multitude of ways , including as plain files on disk. For population analysis, Elasticsearch (and Kibana) is still mandatory.","title":"Elasticsearch"},{"location":"system-requirements/#hardware-requirements","text":"The hardware requirements of course rely on the scale of the installation. Below, we have listed recommendations for a single cluster node (or just a single server) when Elasticsearch is used, as per the reference installation. Should Elasticsearch be irrelevant for you, the changes in hardware requirements are noted separately below.","title":"Hardware requirements"},{"location":"system-requirements/#cpu","text":"Any modern multicore x86_64 CPU is accepted. For performance, multiple cores are more important than higher clock rates. Minimum requirement: 8 cores, ~3 GHz . Example : 2 x Intel i5-7600 (2 x 4 cores) Recommended: 16 cores, ~3 GHz . Example : 2 x Intel i7-7820X (2 x 8 cores)","title":"CPU"},{"location":"system-requirements/#ram","text":"Minimum requirement: 8 GB (4 GB without Elasticsearch) Recommended: 16 GB (8 GB without Elasticsearch)","title":"RAM"},{"location":"system-requirements/#disk-space","text":"The main things that take up disk space are: Database contents, i.e. logs and population analysis data Docker images, old versions can be saved and rollbacks performed if wanted. If Elasticsearch is used, there should be a monitoring and archiving strategy for the data. Of course, this goes for any kind of logging solution. Minimum requirement: 256 GB (128 GB without Elasticsearch) Recommended: 512 GB (128 GB without Elasticsearch)","title":"Disk space:"},{"location":"api/cda/","text":"CDA to BPA API The EBMEDS CDA API expects CDA XML requests and responds with a Best Practice Advisory XML message. URL: [base-url]/cda CDA Request The request needs to be a well formed CDA release 2 XML message. All relevant information must be included in the structured parts of the message, the textual parts are not used. The CDA standard allows for different representations of related concepts. A couple of examples: The overall message structure may contain nested sections The entryRelationship elements can be used to represent almost all kinds of information Many of these relationships and representations are supported, but changes in the message structure and new ways of representing information can cause problems. All the codes must use the supported code systems . Check the example request for more information. BPA Response The response format is a BPA / CDS Advisory XML as specified by Epic. In a production environment the response contains only those reminders that were specifically agreed on. In other environments additional script reminders may be included in the response message depending on the configuration. In addition to the structured Order elements, the response also contains textual information about the reminders, often including additional information links.","title":"CDA to BPA API"},{"location":"api/cda/#cda-to-bpa-api","text":"The EBMEDS CDA API expects CDA XML requests and responds with a Best Practice Advisory XML message. URL: [base-url]/cda","title":"CDA to BPA API"},{"location":"api/cda/#cda-request","text":"The request needs to be a well formed CDA release 2 XML message. All relevant information must be included in the structured parts of the message, the textual parts are not used. The CDA standard allows for different representations of related concepts. A couple of examples: The overall message structure may contain nested sections The entryRelationship elements can be used to represent almost all kinds of information Many of these relationships and representations are supported, but changes in the message structure and new ways of representing information can cause problems. All the codes must use the supported code systems . Check the example request for more information.","title":"CDA Request"},{"location":"api/cda/#bpa-response","text":"The response format is a BPA / CDS Advisory XML as specified by Epic. In a production environment the response contains only those reminders that were specifically agreed on. In other environments additional script reminders may be included in the response message depending on the configuration. In addition to the structured Order elements, the response also contains textual information about the reminders, often including additional information links.","title":"BPA Response"},{"location":"api/fhir/cds-hooks/","text":"CDS Hooks EBMEDS uses a slightly customized version of the CDS Hooks standard. This standard is still in flux and will soon reach its 1.0 version, at which point these customizations will be re-evaluated. The overall point of CDS hooks is that the calling party calls EBMEDS using three pieces of information: The REST endpoint name (the \"hook ID\"), giving the high-level context, e.g. selfcare-questionnaire-filled . The hook name, providing the action/event that triggered this particular call, e.g. questionnaire-completed . The clinical data specified in the EBMEDS hook catalog . This enables EBMEDS to tailor its output depending on the usage context, and also to provide a machine-readable format for what data is required. The context itself is not machine-readable, i.e. it is described by natural language, but some standardized hooks exist . Differences between the EBMEDS implementation and the current CDS hooks documentation : The prefetch field is used widely in EBMEDS at the moment. However, this field is intended to be used as an optional performance enhancement, i.e. the assumed data model in CDS hooks is that the CDS system has access to the calling party's FHIR server, from which it can read the clinical data by itself, if the data is not provided in prefetch . However, in EBMEDS, the prefetch field is mandatory at this moment. The context field will be used exclusively in the future. The response format in CDS hooks is in the form of cards . The card is a simple container for a message string (and some metadata) and is therefore usually not flexible enough to contain things like specifying the recipient of the message. Therefore, the meat of the response is located in the suggestions field, which contains an array of FHIR resources, not the structure with different action types ( create , update , delete ) that is described in the standard. All FHIR resources in the suggestions array are implicitly of the create type at this moment. When calling a hook, the context field is currently specified as an array of objects in the standard. This is going to change in version 1.0 of the standard into a simple object. EBMEDS already uses this. The context field will work like a \"mandatory prefetch \" in CDS hooks 1.0, and will be described in the same way in the hook catalog, i.e. using FHIR search strings. EBMEDS also uses context for setting some options, i.e. dataVersion , which specifies which version of the internal clinical datasets EBMEDS should use. This is in no way describable by a FHIR search string. In prefetch (or context ), most of the FHIR search strings return a Bundle, not an individual resource (like QuestionnaireResponse). However, EBMEDS supports returning an individual resource instead of a Bundle of length one. Bundles will be required in the future. CDS hooks REST API The REST API for CDS hooks is very simple. One can GET the list of available hooks (the \"hook catalog\") from [base-url]/cds-services , and one calls a hook by POST ing to [base-url]/cds-services/[hook-name] . The base URL depends on where and how EBMEDS is installed: one example is https://ebmedscloud.org/api/fhir/v1 . Hook description format We will continue with the questionnaire-completed example mentioned briefly above. The EBMEDS hook catalog specifies this kind of hook: { \"id\": \"selfcare-filled-questionnaire\", \"hook\": \"questionnaire-completed\", \"name\": \"Self-care questionnaire analysis service\", \"description\": \"A hook for when a FHIR QuestionnaireResponse filled out by a patient/citizen is available for EBMEDS to process. The response may include directions both for the patient himself, and a medical professional.\", \"prefetch\": { \"questionnaireResponse\": \"/QuestionnaireResponse?patient={{Patient.id}}\" } } So what does this mean? Let's go through the hook description field by field: id : Again, the main identifier for the hook in question. This field determines the URL used when calling the hook, e.g. https://ebmedscloud.org/api/fhir/v1/cds-services/selfcare-filled-questionnaire . At the same time, the id provides the most high level context for this hook. The value is unique. hook : The action or event that triggers this hook. The hook value is not unique, there may be many different CDS hooks (at different REST endpoints i.e. with a different id ) that all have the same hook value. The idea is to develop a standardized set of hooks that behave the same in any CDS system. In this case, questionnaire-completed is a non-standard hook, specific to EBMEDS. name : A short description of the hook. description : A longer description of the hook. prefetch : This field is an object, each property within that object acts as a label for a set of FHIR resources, obtained by performing the FHIR search provided in the property value. It is not mandatory to use the search string (e.g. if you do not have a FHIR server), but it does specify the format of the data to be put in the request. NOTE : as mentioned, the prefetch fields are mandatory in EBMEDS, but not in the CDS hooks standard. prefetch.questionnaireResponse : In this example, there is only one piece of data needed for the CDS hook call. This data is the FHIR resource called QuestionnaireResponse that has presumably just been filled out by the patient in question (identified by {{Patient.id}} ). The property name questionnaireResponse is the label given this piece of data. This label will also be used when calling the CDS hook (see below). Calling a hook So, given the hook description above, we can call the hook. The format is, quite simply: { \"hook\": \"questionnaire-completed\", \"prefetch\": { \"questionnaireResponse\": { \"resource\": { QuestionnaireResponse... } } }, \"context\": { \"dataVersion\": \"latest\" } } hook : The same value as in the hook description. prefetch : Contains the same properties as in the hook description. In this case, the wanted QuestionnaireResponse resource is in prefetch.questionnaireResponse.resource . QuestionnaireResponse... : Omitted for brevity, this is where the actual FHIR resource is. In this case it is a QuestionnaireResponse, so it starts with { \"resourceType\": \"QuestionnaireResponse\" ... etc. See the FHIR resource page for a closer description of the resource, among many others. context : Depending on the hook, this may contain other properties, but one (optional) property is context.dataVersion . dataVersion is a string containing the wanted version of the clinical data that EBMEDS uses for processing. If the value is latest or the field is missing, EBMEDS uses the latest version. The usage of older versions is not recommended, except for very specific use cases. Hook response EBMEDS uses two patterns for CDS hook responses. The first pattern is a traditional approach, well suited for the CDS hooks standard. The second pattern is customized for the selfcare context. The example above, as you may remember, is in the selfcare context, so the call above will return the second pattern. More details below. Traditional response (to be implemented) Traditional CDS is focused on providing one or more text-based messages to a clinical professional, sometimes accompanied by some suggested actions, identified by a code. Each message, or reminder , is independent of the others, i.e. the same actions may be suggested in multiple reminders. It is up to the calling party to handle a user-friendly display of the information, potentially removing duplicate suggested actions, rendering different kinds of messages in different ways etc. An example, showing two reminders, is the following: { \"cards\": [ { \"summary\": \"Decreased renal function, switch tiatside to furosemide?\", \"detail\": \"Renal function is decreased (eGFR 21 ml/min 16.10.2017). Tiatsides lose their effect when GFR < 30 ml/min. Consider switching to furosemide.\", \"indicator\": \"info\", \"source\": { \"name\": \"EBMEDS v2.0.6\", \"url\": \"https://ebmeds.org/version/v2.0.6/data-version/v0.9.2\" }, \"suggestions\": [ { ActivityDefinition... }, { ActivityDefinition... }, ... ] }, { \"summary\": \"High ferritinine (355 ug/l 15.10.2017) - hemocromatosis?\", \"detail\": \"High ferritinine concentration (355 ug/l 15.10.2017): Consider the possibility of hemocromatosis. Ferritinine concentration may also be elevated due to infection or liver disease.\", \"indicator\": \"info\", \"source\": { \"name\": \"EBMEDS v2.0.6\", \"url\": \"https://ebmeds.org/version/v2.0.6/data-version/v0.9.2\" }, \"suggestions\": [ { ActivityDefinition... }, { ActivityDefinition... }, ... ] } ] } Again, ActivityDefinition... signifies a FHIR resource that is omitted for brevity. cards : Array of one or more card structures, containing a message, importance level, source data and suggested actions. summary : The short version of the reminder. Good to display in lists etc. detail : The complete message. Usually only a simple text string, but Github-flavored Markdown is supported. indicator : One of info , warning , hard-stop . Instructs the calling party how important the reminder is. source : Contains properties name and url , giving info about the EBMEDS version as well as the clinical data version used for generating the reminders. suggestions : An array (non-standard CDS hooks) containing zero or more FHIR resources. These resources are to be considered as create -type resources, refer to the CDS hooks documentation for more information. These suggestions are not duplicates within one cards, but several cards may contain the same suggestion. These cards are to be displayed by the calling party in a manner they see fit. Refer to the documentation of individual hooks regarding the formats and codings for suggested actions. Custom self-care card format The self-care context poses some unique challenges. Originally created for a national project in Finland, these CDS cards are required to leave nothing to chance, since most parts of the self-care project in question are automated, without human intervention. In other words, the card format is too vague to offer much help, and all human-readable data is stripped out of it. Instead, the data is all in coded form inside suggestions , more specifically in the form of ActivityDefinition resources. Please refer to the selfcare-* hooks in the hook catalog. { \"cards\": [ { \"source\": { \"name\": \"EBMEDS v0.9.6\", \"url\": \"https://ebmeds.org/version/v0.9.6/data-version/v0.9.2\" }, \"suggestions\": [ { ActivityDefinition... }, { ActivityDefinition... }, ... ] } ] }","title":"CDS hooks"},{"location":"api/fhir/cds-hooks/#cds-hooks","text":"EBMEDS uses a slightly customized version of the CDS Hooks standard. This standard is still in flux and will soon reach its 1.0 version, at which point these customizations will be re-evaluated. The overall point of CDS hooks is that the calling party calls EBMEDS using three pieces of information: The REST endpoint name (the \"hook ID\"), giving the high-level context, e.g. selfcare-questionnaire-filled . The hook name, providing the action/event that triggered this particular call, e.g. questionnaire-completed . The clinical data specified in the EBMEDS hook catalog . This enables EBMEDS to tailor its output depending on the usage context, and also to provide a machine-readable format for what data is required. The context itself is not machine-readable, i.e. it is described by natural language, but some standardized hooks exist . Differences between the EBMEDS implementation and the current CDS hooks documentation : The prefetch field is used widely in EBMEDS at the moment. However, this field is intended to be used as an optional performance enhancement, i.e. the assumed data model in CDS hooks is that the CDS system has access to the calling party's FHIR server, from which it can read the clinical data by itself, if the data is not provided in prefetch . However, in EBMEDS, the prefetch field is mandatory at this moment. The context field will be used exclusively in the future. The response format in CDS hooks is in the form of cards . The card is a simple container for a message string (and some metadata) and is therefore usually not flexible enough to contain things like specifying the recipient of the message. Therefore, the meat of the response is located in the suggestions field, which contains an array of FHIR resources, not the structure with different action types ( create , update , delete ) that is described in the standard. All FHIR resources in the suggestions array are implicitly of the create type at this moment. When calling a hook, the context field is currently specified as an array of objects in the standard. This is going to change in version 1.0 of the standard into a simple object. EBMEDS already uses this. The context field will work like a \"mandatory prefetch \" in CDS hooks 1.0, and will be described in the same way in the hook catalog, i.e. using FHIR search strings. EBMEDS also uses context for setting some options, i.e. dataVersion , which specifies which version of the internal clinical datasets EBMEDS should use. This is in no way describable by a FHIR search string. In prefetch (or context ), most of the FHIR search strings return a Bundle, not an individual resource (like QuestionnaireResponse). However, EBMEDS supports returning an individual resource instead of a Bundle of length one. Bundles will be required in the future.","title":"CDS Hooks"},{"location":"api/fhir/cds-hooks/#cds-hooks-rest-api","text":"The REST API for CDS hooks is very simple. One can GET the list of available hooks (the \"hook catalog\") from [base-url]/cds-services , and one calls a hook by POST ing to [base-url]/cds-services/[hook-name] . The base URL depends on where and how EBMEDS is installed: one example is https://ebmedscloud.org/api/fhir/v1 .","title":"CDS hooks REST API"},{"location":"api/fhir/cds-hooks/#hook-description-format","text":"We will continue with the questionnaire-completed example mentioned briefly above. The EBMEDS hook catalog specifies this kind of hook: { \"id\": \"selfcare-filled-questionnaire\", \"hook\": \"questionnaire-completed\", \"name\": \"Self-care questionnaire analysis service\", \"description\": \"A hook for when a FHIR QuestionnaireResponse filled out by a patient/citizen is available for EBMEDS to process. The response may include directions both for the patient himself, and a medical professional.\", \"prefetch\": { \"questionnaireResponse\": \"/QuestionnaireResponse?patient={{Patient.id}}\" } } So what does this mean? Let's go through the hook description field by field: id : Again, the main identifier for the hook in question. This field determines the URL used when calling the hook, e.g. https://ebmedscloud.org/api/fhir/v1/cds-services/selfcare-filled-questionnaire . At the same time, the id provides the most high level context for this hook. The value is unique. hook : The action or event that triggers this hook. The hook value is not unique, there may be many different CDS hooks (at different REST endpoints i.e. with a different id ) that all have the same hook value. The idea is to develop a standardized set of hooks that behave the same in any CDS system. In this case, questionnaire-completed is a non-standard hook, specific to EBMEDS. name : A short description of the hook. description : A longer description of the hook. prefetch : This field is an object, each property within that object acts as a label for a set of FHIR resources, obtained by performing the FHIR search provided in the property value. It is not mandatory to use the search string (e.g. if you do not have a FHIR server), but it does specify the format of the data to be put in the request. NOTE : as mentioned, the prefetch fields are mandatory in EBMEDS, but not in the CDS hooks standard. prefetch.questionnaireResponse : In this example, there is only one piece of data needed for the CDS hook call. This data is the FHIR resource called QuestionnaireResponse that has presumably just been filled out by the patient in question (identified by {{Patient.id}} ). The property name questionnaireResponse is the label given this piece of data. This label will also be used when calling the CDS hook (see below).","title":"Hook description format"},{"location":"api/fhir/cds-hooks/#calling-a-hook","text":"So, given the hook description above, we can call the hook. The format is, quite simply: { \"hook\": \"questionnaire-completed\", \"prefetch\": { \"questionnaireResponse\": { \"resource\": { QuestionnaireResponse... } } }, \"context\": { \"dataVersion\": \"latest\" } } hook : The same value as in the hook description. prefetch : Contains the same properties as in the hook description. In this case, the wanted QuestionnaireResponse resource is in prefetch.questionnaireResponse.resource . QuestionnaireResponse... : Omitted for brevity, this is where the actual FHIR resource is. In this case it is a QuestionnaireResponse, so it starts with { \"resourceType\": \"QuestionnaireResponse\" ... etc. See the FHIR resource page for a closer description of the resource, among many others. context : Depending on the hook, this may contain other properties, but one (optional) property is context.dataVersion . dataVersion is a string containing the wanted version of the clinical data that EBMEDS uses for processing. If the value is latest or the field is missing, EBMEDS uses the latest version. The usage of older versions is not recommended, except for very specific use cases.","title":"Calling a hook"},{"location":"api/fhir/cds-hooks/#hook-response","text":"EBMEDS uses two patterns for CDS hook responses. The first pattern is a traditional approach, well suited for the CDS hooks standard. The second pattern is customized for the selfcare context. The example above, as you may remember, is in the selfcare context, so the call above will return the second pattern. More details below.","title":"Hook response"},{"location":"api/fhir/cds-hooks/#traditional-response-to-be-implemented","text":"Traditional CDS is focused on providing one or more text-based messages to a clinical professional, sometimes accompanied by some suggested actions, identified by a code. Each message, or reminder , is independent of the others, i.e. the same actions may be suggested in multiple reminders. It is up to the calling party to handle a user-friendly display of the information, potentially removing duplicate suggested actions, rendering different kinds of messages in different ways etc. An example, showing two reminders, is the following: { \"cards\": [ { \"summary\": \"Decreased renal function, switch tiatside to furosemide?\", \"detail\": \"Renal function is decreased (eGFR 21 ml/min 16.10.2017). Tiatsides lose their effect when GFR < 30 ml/min. Consider switching to furosemide.\", \"indicator\": \"info\", \"source\": { \"name\": \"EBMEDS v2.0.6\", \"url\": \"https://ebmeds.org/version/v2.0.6/data-version/v0.9.2\" }, \"suggestions\": [ { ActivityDefinition... }, { ActivityDefinition... }, ... ] }, { \"summary\": \"High ferritinine (355 ug/l 15.10.2017) - hemocromatosis?\", \"detail\": \"High ferritinine concentration (355 ug/l 15.10.2017): Consider the possibility of hemocromatosis. Ferritinine concentration may also be elevated due to infection or liver disease.\", \"indicator\": \"info\", \"source\": { \"name\": \"EBMEDS v2.0.6\", \"url\": \"https://ebmeds.org/version/v2.0.6/data-version/v0.9.2\" }, \"suggestions\": [ { ActivityDefinition... }, { ActivityDefinition... }, ... ] } ] } Again, ActivityDefinition... signifies a FHIR resource that is omitted for brevity. cards : Array of one or more card structures, containing a message, importance level, source data and suggested actions. summary : The short version of the reminder. Good to display in lists etc. detail : The complete message. Usually only a simple text string, but Github-flavored Markdown is supported. indicator : One of info , warning , hard-stop . Instructs the calling party how important the reminder is. source : Contains properties name and url , giving info about the EBMEDS version as well as the clinical data version used for generating the reminders. suggestions : An array (non-standard CDS hooks) containing zero or more FHIR resources. These resources are to be considered as create -type resources, refer to the CDS hooks documentation for more information. These suggestions are not duplicates within one cards, but several cards may contain the same suggestion. These cards are to be displayed by the calling party in a manner they see fit. Refer to the documentation of individual hooks regarding the formats and codings for suggested actions.","title":"Traditional response (to be implemented)"},{"location":"api/fhir/cds-hooks/#custom-self-care-card-format","text":"The self-care context poses some unique challenges. Originally created for a national project in Finland, these CDS cards are required to leave nothing to chance, since most parts of the self-care project in question are automated, without human intervention. In other words, the card format is too vague to offer much help, and all human-readable data is stripped out of it. Instead, the data is all in coded form inside suggestions , more specifically in the form of ActivityDefinition resources. Please refer to the selfcare-* hooks in the hook catalog. { \"cards\": [ { \"source\": { \"name\": \"EBMEDS v0.9.6\", \"url\": \"https://ebmeds.org/version/v0.9.6/data-version/v0.9.2\" }, \"suggestions\": [ { ActivityDefinition... }, { ActivityDefinition... }, ... ] } ] }","title":"Custom self-care card format"},{"location":"api/fhir/code-systems/","text":"Used Code Systems EBMEDS uses codes in a lot of different places. Below is a list of the code systems used in different parts of the system. Medical code systems The full list of code systems for medical or clinical matters is given here: Supported code systems For selfcare-* endpoints EBMEDS may return a customized coding related to actions a patient can do himself, unsupervised. This coding does not yet have an official code system, but is instead an amalgam of an existing code system (Finnish THL service coding or Kuntaliitto service coding) and an urgency code, separated by \"-\", for example ADA001-P2 . The urgency code means: P0 : Immediately P1 : Within 2 hours P2 : Within 10 hours P3 : Within 1 day P4 : Within 3 days L2 : Within 7 days L3 : Within 30 days L4 : Within more than 30 days And the service codings used (at the moment) are, in Finnish: THL service coding http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023&versionKey=2283 a.k.a. OID 1.2.246.537.6.49 AA-P0 : H\u00e4t\u00e4keskuspalvelu - Hoidetaan v\u00e4litt\u00f6m\u00e4sti - yhteys h\u00e4t\u00e4keskukseen ADA001-P1 : Terveysalan p\u00e4ivystyspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4 ADA001-P2 : Terveysalan p\u00e4ivystyspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4 ADA001-P2 : Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyspalvelut - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4 ADA001-P3 : Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyspalvelut - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (1 vrk) ADA001-P4 : Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (2-3 vrk) BAB-L2 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - 4-7 p\u00e4iv\u00e4\u00e4 BAB-P2 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4 BAB-P3 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk) BAB-P4 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk) EDA-P2 : Sairaanhoitajan peruspalvelut - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4 EDA-P3 : Sairaanhoitajan vastaanotto - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk) EDA-P4 : Sairaanhoitajan vastaanotto - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk) EEA-L2 : Yleisl\u00e4\u00e4k\u00e4rin peruspalvelu - 4 - 7 p\u00e4iv\u00e4\u00e4 EEA-P4 : Yleisl\u00e4\u00e4k\u00e4rin peruspalvelu - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (2 - 3 vrk) HBA-L2 : Fysioterapian palvelut - 4-7 p\u00e4iv\u00e4\u00e4 LAD-P4 : Ultra\u00e4\u00e4nitutkimus - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk) Kuntaliitto service coding http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=88&versionKey=120 1155-P2 : Virtsan bakteeriviljely (http://www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab30391) - Hoidetaan p\u00e4ivystyksen\u00e4, muttei y\u00f6ll\u00e4 1881-P2 : Virtsan kemiallinen seulonta (http://www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab31886) - Hoidetaan p\u00e4ivystyksen\u00e4 mutta ei y\u00f6ll\u00e4 3635-P3 : Streptokokkipikatesti nielusta (www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab33681) - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk) 4594-P2 : P-CRP - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4 FHIR resource-specific code systems Some code systems are specific to certain resources. They are listed below. The CodeSystem resources can be found at . Questionnaire https://duodecim.fi/fhir/sid/vkt-questionnaire-id : ID for questionnaire in VKT. In practice an integer string, e.g. \"348\" http://loinc.org : LOINC, for coding what type of measurement the question is asking about. http://hl7.org/fhir/sid/icd-10-fi : ICD10, for coding what type of diagnosis the question is asking about. In the ODA project, some ODA specific code systems are used: http://oda.fi/Questionnaire : Identifies the subtype of SelfCareQuestionnaire. Values: symptom , other values unknown. http://oda.fi/cds : Tags what CDSS should be used. For EBMEDS, the value is oda1 . ActivityDefinition https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions : The identifier for ActivityDefinitions containing reminder texts of different priorities, as above. Values: read-reminder (normal priority) read-prompt (medium priority) read-alert (high priority) Observation https://duodecim.fi/fhir/stu3/CodeSystem/custom-observations : Some observations are not mappable to international codes and must therefore be given some code. This is the codesystem for that expected-lifetime : The expected age in years a patient is expected to live to. potential-extra-years : The increase in lifespan if the patient starts living according to healthy lifestyle recommendations.","title":"Code Systems"},{"location":"api/fhir/code-systems/#used-code-systems","text":"EBMEDS uses codes in a lot of different places. Below is a list of the code systems used in different parts of the system.","title":"Used Code Systems"},{"location":"api/fhir/code-systems/#medical-code-systems","text":"The full list of code systems for medical or clinical matters is given here: Supported code systems For selfcare-* endpoints EBMEDS may return a customized coding related to actions a patient can do himself, unsupervised. This coding does not yet have an official code system, but is instead an amalgam of an existing code system (Finnish THL service coding or Kuntaliitto service coding) and an urgency code, separated by \"-\", for example ADA001-P2 . The urgency code means: P0 : Immediately P1 : Within 2 hours P2 : Within 10 hours P3 : Within 1 day P4 : Within 3 days L2 : Within 7 days L3 : Within 30 days L4 : Within more than 30 days And the service codings used (at the moment) are, in Finnish: THL service coding http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023&versionKey=2283 a.k.a. OID 1.2.246.537.6.49 AA-P0 : H\u00e4t\u00e4keskuspalvelu - Hoidetaan v\u00e4litt\u00f6m\u00e4sti - yhteys h\u00e4t\u00e4keskukseen ADA001-P1 : Terveysalan p\u00e4ivystyspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4 ADA001-P2 : Terveysalan p\u00e4ivystyspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4 ADA001-P2 : Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyspalvelut - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4 ADA001-P3 : Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyspalvelut - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (1 vrk) ADA001-P4 : Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (2-3 vrk) BAB-L2 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - 4-7 p\u00e4iv\u00e4\u00e4 BAB-P2 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4 BAB-P3 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk) BAB-P4 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk) EDA-P2 : Sairaanhoitajan peruspalvelut - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4 EDA-P3 : Sairaanhoitajan vastaanotto - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk) EDA-P4 : Sairaanhoitajan vastaanotto - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk) EEA-L2 : Yleisl\u00e4\u00e4k\u00e4rin peruspalvelu - 4 - 7 p\u00e4iv\u00e4\u00e4 EEA-P4 : Yleisl\u00e4\u00e4k\u00e4rin peruspalvelu - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (2 - 3 vrk) HBA-L2 : Fysioterapian palvelut - 4-7 p\u00e4iv\u00e4\u00e4 LAD-P4 : Ultra\u00e4\u00e4nitutkimus - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk) Kuntaliitto service coding http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=88&versionKey=120 1155-P2 : Virtsan bakteeriviljely (http://www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab30391) - Hoidetaan p\u00e4ivystyksen\u00e4, muttei y\u00f6ll\u00e4 1881-P2 : Virtsan kemiallinen seulonta (http://www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab31886) - Hoidetaan p\u00e4ivystyksen\u00e4 mutta ei y\u00f6ll\u00e4 3635-P3 : Streptokokkipikatesti nielusta (www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab33681) - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk) 4594-P2 : P-CRP - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4","title":"Medical code systems"},{"location":"api/fhir/code-systems/#fhir-resource-specific-code-systems","text":"Some code systems are specific to certain resources. They are listed below. The CodeSystem resources can be found at .","title":"FHIR resource-specific code systems"},{"location":"api/fhir/code-systems/#questionnaire","text":"https://duodecim.fi/fhir/sid/vkt-questionnaire-id : ID for questionnaire in VKT. In practice an integer string, e.g. \"348\" http://loinc.org : LOINC, for coding what type of measurement the question is asking about. http://hl7.org/fhir/sid/icd-10-fi : ICD10, for coding what type of diagnosis the question is asking about. In the ODA project, some ODA specific code systems are used: http://oda.fi/Questionnaire : Identifies the subtype of SelfCareQuestionnaire. Values: symptom , other values unknown. http://oda.fi/cds : Tags what CDSS should be used. For EBMEDS, the value is oda1 .","title":"Questionnaire"},{"location":"api/fhir/code-systems/#activitydefinition","text":"https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions : The identifier for ActivityDefinitions containing reminder texts of different priorities, as above. Values: read-reminder (normal priority) read-prompt (medium priority) read-alert (high priority)","title":"ActivityDefinition"},{"location":"api/fhir/code-systems/#observation","text":"https://duodecim.fi/fhir/stu3/CodeSystem/custom-observations : Some observations are not mappable to international codes and must therefore be given some code. This is the codesystem for that expected-lifetime : The expected age in years a patient is expected to live to. potential-extra-years : The increase in lifespan if the patient starts living according to healthy lifestyle recommendations.","title":"Observation"},{"location":"api/fhir/custom-rest/","text":"Custom REST API EBMEDS 2.0 is not a full-blown FHIR server, but we do provide a REST interface for getting some of our static FHIR resources via HTTP. Coaching URL: [base-url]/coaching Resource: CoachingPlanDefinition The CoachingPlanDefinition is a resource containing a set of messages that are sent to the user at specific intervals. There are coaching programs for a number of different topics, for example: Reduction of alcohol consumption Step exercise programme Good deeds Coaching programme for families with children Gratitude Optimism Positive interaction in couple relationship Resolving conflicts in a relationship Coachingprogrammet Konflikthantering Exercise programme three hours a week Exercise programme four hours a week Exercise programme five hours a week Exercise programme more than seven hours a week Exercise programme for diabetes patients Exercise programme for persons with musculoskeletal problems Coaching program for asthmatics Weight management Healthy nutrition programme Coaching program \"Stress management\" Preparing to quit smoking Quitting smoking Sleep coaching A list of available programs are available at the address [base-url]/coaching/programs and the individual programs can be accessed at [base-url]/coaching/programs/[id] . So for example, on ebmedscloud.org, a coaching program can be retrieved by doing a HTTP GET on the URL https://ebmedscloud.org/api/fhir/v1/coaching/programs/5 . The format of the CoachingPlanDefinition is described in more detail in the EBMEDS 2.0 FHIR resources listing .","title":"Custom REST"},{"location":"api/fhir/custom-rest/#custom-rest-api","text":"EBMEDS 2.0 is not a full-blown FHIR server, but we do provide a REST interface for getting some of our static FHIR resources via HTTP.","title":"Custom REST API"},{"location":"api/fhir/custom-rest/#coaching","text":"URL: [base-url]/coaching Resource: CoachingPlanDefinition The CoachingPlanDefinition is a resource containing a set of messages that are sent to the user at specific intervals. There are coaching programs for a number of different topics, for example: Reduction of alcohol consumption Step exercise programme Good deeds Coaching programme for families with children Gratitude Optimism Positive interaction in couple relationship Resolving conflicts in a relationship Coachingprogrammet Konflikthantering Exercise programme three hours a week Exercise programme four hours a week Exercise programme five hours a week Exercise programme more than seven hours a week Exercise programme for diabetes patients Exercise programme for persons with musculoskeletal problems Coaching program for asthmatics Weight management Healthy nutrition programme Coaching program \"Stress management\" Preparing to quit smoking Quitting smoking Sleep coaching A list of available programs are available at the address [base-url]/coaching/programs and the individual programs can be accessed at [base-url]/coaching/programs/[id] . So for example, on ebmedscloud.org, a coaching program can be retrieved by doing a HTTP GET on the URL https://ebmedscloud.org/api/fhir/v1/coaching/programs/5 . The format of the CoachingPlanDefinition is described in more detail in the EBMEDS 2.0 FHIR resources listing .","title":"Coaching"},{"location":"api/fhir/extensions/","text":"Questionnaire extensions self-care-instructions URL: https://duodecim.fi/fhir/extensions/self-care-instructions Location: Questionnaire root Contains the sub-extension instruction-text . Has a string value which is a markdown string containing a link to long-form self-care instructions. Example: { \"url\":\"https://duodecim.fi/fhir/extensions/self-care-instructions\", \"extension\":[ { \"url\":\"instruction-text\", \"valueString\":\"[Itsehoito-ohje](http://www.terveyskirjasto.fi/terveyskirjasto/tk.koti?p_artikkeli=dlk01167)\" } ] } displayCategory URL: http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory Location: Questionnaire.item (and sub-items) Question with type: 'display' require a few more subcategories, which is the purpose of this HL7 extension. The allowed values are: subtitle : As the name implies, a string designed to be a subtitle. The text field in this question is also styled with a markdown-style subtitle tag ( # Example subtitle ). feedback : Answering a set of questions in a certain way may provoke some immediate feedback in the questionnaire itself, without having to send the QuestionnaireResponse to EBMEDS. This display-type question contains this kind of feedback. terminus : This is similar to feedback , except that if the user has answered questions that produce this type of feedback, the situation is so critical that he should be stopped from answering any more questions, and immediately seek help. The UI should hide the questions following this feedback type, if it is visible. Example: [ { \"linkId\":\"14\", \"text\":\"# A subtitle\", \"type\":\"display\", \"extension\":[ { \"url\":\"http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory\", \"valueString\":\"subtitle\" } ] }, { \"linkId\":\"15\", \"text\":\"Things are really bad.\", \"type\":\"display\", \"extension\":[ { \"url\":\"http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory\", \"valueString\":\"terminus\" } ] } ] minValue URL: http://hl7.org/fhir/StructureDefinition/minValue Location: Questionnaire.item (and sub-items) Extension by HL7 to specify a minimum value for a numerical question. Is often seen together with maxValue. Example: { \"linkId\":\"15\", \"text\":\"Give the length of your foot.\", \"type\":\"decimal\", \"extension\":[ { \"url\": \"http://hl7.org/fhir/StructureDefinition/minValue\", \"valueDecimal\": 15.3 } ] } maxValue URL: http://hl7.org/fhir/StructureDefinition/minValue Location: Questionnaire.item (and sub-items) Extension by HL7 to specify a maximum value for a numerical question. Is often seen together with minValue. Example: { \"linkId\":\"15\", \"text\":\"Give your age.\", \"type\":\"decimal\", \"extension\":[ { \"url\": \"http://hl7.org/fhir/StructureDefinition/maxValue\", \"valueDecimal\": 100.3 } ] } There is some special UI logic required to handle a multiple choice question with the choice \"none of the above\". For this we use an extension that marks one of the choices as exclusive: optionExclusive URL: http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive Location: Questionnaire.item.option (and in sub-items) HL7 extension to specify that a multiple choice answer is exclusive , i.e. in a 'checkbox' multiple choice question, if you check this answer, all other options are taken to be unchecked, and should be greyed out in the UI. Mainly used for 'none of the above' types of answer choices. Example: { \"valueCoding\":{ \"id\": \"-1\", \"display\": \"None of the above\", \"extension\": [ { \"url\": \"http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive\", \"valueBoolean\": true } ] } } maxDecimalPlaces URL: http://hl7.org/fhir/StructureDefinition/maxDecimalPlaces Location: Questionnaire.item (and sub-items) For questions of type decimal , specifies an integer value signifying the maximum number of decimal places that a user is allowed to fill in for his answer. If the extension is not present, the value is taken to be infinity. If the value is 0, the question type should be integer instead. { \"linkId\":\"15\", \"text\":\"Give your age with 2 decimal precision.\", \"type\":\"decimal\", \"extension\":[ { \"url\": \"http://hl7.org/fhir/StructureDefinition/maxDecimalPlaces\", \"valueInteger\": 2 } ] } enable-when-operator URL: https://duodecim.fi/fhir/extensions/enable-when-operator Location: Questionnaire.item.enableWhen (and in sub-items) The display logic conditions in Questionnaire.item.enableWhen are given in an array. By default, the question should be visible when any of the listed conditions are true. This extension takes a string value AND , OR , NOT . They should be interpreted in the following manner: OR : If the condition extension contains this value, the logical operator between this condition and the previous condition in the array is the boolean OR. (This is the default when the extension is not present.) AND : As above, but the boolean operator is AND. NOT : This applies the NOT operator to the current condition. The same extension may be present multiple times in a condition, to construct e.g. AND NOT. Example: { \"linkId\": \"23\", \"required\": true, \"type\": \"boolean\", \"enableWhen\": [ { \"question\": \"3\", \"answerQuantity\": { \"value\": 15, \"comparator\": \">\" } }, { \"question\": \"3\", \"extension\": [ { \"url\": \"https://duodecim.fi/fhir/extensions/enable-when-operator\", \"valueString\": \"AND\" } ], \"answerQuantity\": { \"value\": 99, \"comparator\": \"<\" } } ] }","title":"Extensions"},{"location":"api/fhir/extensions/#questionnaire-extensions","text":"","title":"Questionnaire extensions"},{"location":"api/fhir/extensions/#self-care-instructions","text":"URL: https://duodecim.fi/fhir/extensions/self-care-instructions Location: Questionnaire root Contains the sub-extension instruction-text . Has a string value which is a markdown string containing a link to long-form self-care instructions. Example: { \"url\":\"https://duodecim.fi/fhir/extensions/self-care-instructions\", \"extension\":[ { \"url\":\"instruction-text\", \"valueString\":\"[Itsehoito-ohje](http://www.terveyskirjasto.fi/terveyskirjasto/tk.koti?p_artikkeli=dlk01167)\" } ] }","title":"self-care-instructions"},{"location":"api/fhir/extensions/#displaycategory","text":"URL: http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory Location: Questionnaire.item (and sub-items) Question with type: 'display' require a few more subcategories, which is the purpose of this HL7 extension. The allowed values are: subtitle : As the name implies, a string designed to be a subtitle. The text field in this question is also styled with a markdown-style subtitle tag ( # Example subtitle ). feedback : Answering a set of questions in a certain way may provoke some immediate feedback in the questionnaire itself, without having to send the QuestionnaireResponse to EBMEDS. This display-type question contains this kind of feedback. terminus : This is similar to feedback , except that if the user has answered questions that produce this type of feedback, the situation is so critical that he should be stopped from answering any more questions, and immediately seek help. The UI should hide the questions following this feedback type, if it is visible. Example: [ { \"linkId\":\"14\", \"text\":\"# A subtitle\", \"type\":\"display\", \"extension\":[ { \"url\":\"http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory\", \"valueString\":\"subtitle\" } ] }, { \"linkId\":\"15\", \"text\":\"Things are really bad.\", \"type\":\"display\", \"extension\":[ { \"url\":\"http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory\", \"valueString\":\"terminus\" } ] } ]","title":"displayCategory"},{"location":"api/fhir/extensions/#minvalue","text":"URL: http://hl7.org/fhir/StructureDefinition/minValue Location: Questionnaire.item (and sub-items) Extension by HL7 to specify a minimum value for a numerical question. Is often seen together with maxValue. Example: { \"linkId\":\"15\", \"text\":\"Give the length of your foot.\", \"type\":\"decimal\", \"extension\":[ { \"url\": \"http://hl7.org/fhir/StructureDefinition/minValue\", \"valueDecimal\": 15.3 } ] }","title":"minValue"},{"location":"api/fhir/extensions/#maxvalue","text":"URL: http://hl7.org/fhir/StructureDefinition/minValue Location: Questionnaire.item (and sub-items) Extension by HL7 to specify a maximum value for a numerical question. Is often seen together with minValue. Example: { \"linkId\":\"15\", \"text\":\"Give your age.\", \"type\":\"decimal\", \"extension\":[ { \"url\": \"http://hl7.org/fhir/StructureDefinition/maxValue\", \"valueDecimal\": 100.3 } ] } There is some special UI logic required to handle a multiple choice question with the choice \"none of the above\". For this we use an extension that marks one of the choices as exclusive:","title":"maxValue"},{"location":"api/fhir/extensions/#optionexclusive","text":"URL: http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive Location: Questionnaire.item.option (and in sub-items) HL7 extension to specify that a multiple choice answer is exclusive , i.e. in a 'checkbox' multiple choice question, if you check this answer, all other options are taken to be unchecked, and should be greyed out in the UI. Mainly used for 'none of the above' types of answer choices. Example: { \"valueCoding\":{ \"id\": \"-1\", \"display\": \"None of the above\", \"extension\": [ { \"url\": \"http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive\", \"valueBoolean\": true } ] } }","title":"optionExclusive"},{"location":"api/fhir/extensions/#maxdecimalplaces","text":"URL: http://hl7.org/fhir/StructureDefinition/maxDecimalPlaces Location: Questionnaire.item (and sub-items) For questions of type decimal , specifies an integer value signifying the maximum number of decimal places that a user is allowed to fill in for his answer. If the extension is not present, the value is taken to be infinity. If the value is 0, the question type should be integer instead. { \"linkId\":\"15\", \"text\":\"Give your age with 2 decimal precision.\", \"type\":\"decimal\", \"extension\":[ { \"url\": \"http://hl7.org/fhir/StructureDefinition/maxDecimalPlaces\", \"valueInteger\": 2 } ] }","title":"maxDecimalPlaces"},{"location":"api/fhir/extensions/#enable-when-operator","text":"URL: https://duodecim.fi/fhir/extensions/enable-when-operator Location: Questionnaire.item.enableWhen (and in sub-items) The display logic conditions in Questionnaire.item.enableWhen are given in an array. By default, the question should be visible when any of the listed conditions are true. This extension takes a string value AND , OR , NOT . They should be interpreted in the following manner: OR : If the condition extension contains this value, the logical operator between this condition and the previous condition in the array is the boolean OR. (This is the default when the extension is not present.) AND : As above, but the boolean operator is AND. NOT : This applies the NOT operator to the current condition. The same extension may be present multiple times in a condition, to construct e.g. AND NOT. Example: { \"linkId\": \"23\", \"required\": true, \"type\": \"boolean\", \"enableWhen\": [ { \"question\": \"3\", \"answerQuantity\": { \"value\": 15, \"comparator\": \">\" } }, { \"question\": \"3\", \"extension\": [ { \"url\": \"https://duodecim.fi/fhir/extensions/enable-when-operator\", \"valueString\": \"AND\" } ], \"answerQuantity\": { \"value\": 99, \"comparator\": \"<\" } } ] }","title":"enable-when-operator"},{"location":"api/fhir/getting-started/","text":"FHIR STU3 API Getting started EBMEDS can be used with the HL7 FHIR STU3 format. The main unit of information in FHIR is the resource , which is a JSON object with a particular type. FHIR can also be expressed in XML form, but this is not supported by EBMEDS. One can interact with EBMEDS using FHIR in the following ways: Calling decision support : We use the CDS Hooks standard as the communication model. Custom REST API : We provide a REST interface to retrieve static FHIR resources (Questionnaire, PlanDefinition, Goal) Communication model EBMEDS 2.0 is completely stateless and synchronous. In other words, each request to EBMEDS receives a response, and the response contents do not depend on previous requests. This also means that EBMEDS only operates on the data that is present in the request, combining it with the clinical knowledge base produced by Duodecim. The most common way of using EBMEDS is sending a request containing some clinical data about a patient. After analysis of this data, EBMEDS returns decision support information , i.e. messages to be shown to either the patient or a medical professional. Depending on the use case, EBMEDS may also suggest specific actions to be done, actions that are codified using a code system. The caller may then display the messages using a UI of choice, and potentially arrange for automated or semi-automated execution of the attached actions. The request is given a semantic context using CDS hooks . Regardless of the context, the general structure of the request and response is the same: one or more FHIR resources. See the CDS hook catalog to see which resources are used in which context, and the FHIR resource listing for more details on the individual resources. Versioning There are four major versioning schemes in EBMEDS 2.0: The overall software version . Changes with new releases of the software. (Version format: semver) The clinical data version . All internal data in EBMEDS is versioned using one version number. This includes the rulesets, drug data, translations etc. (Version format: semver) The API versions : At the moment EBMEDS supports XML and FHIR STU3 (JSON). These APIs are versioned separately. Newer software versions will support old interfaces for as long as technically feasible. (Version format: semver for XML, whole integers for FHIR) Distributed artifact versions . Some artifacts are distributed to customers so they can be potentially used outside of EBMEDS, for example FHIR Questionnaires. These follow their own versioning scheme that is mappable to the clinical data version scheme if required. (Version format: whole integers) Examples The easiest way to see EBMEDS 2.0 in action is by example. We therefore provide a collection of examples in the Postman Collection v2.1 format . These can be imported into the Postman app or explored by hand. Download the package here: EBMEDS FHIR examples v1.0","title":"Getting started"},{"location":"api/fhir/getting-started/#fhir-stu3-api","text":"","title":"FHIR STU3 API"},{"location":"api/fhir/getting-started/#getting-started","text":"EBMEDS can be used with the HL7 FHIR STU3 format. The main unit of information in FHIR is the resource , which is a JSON object with a particular type. FHIR can also be expressed in XML form, but this is not supported by EBMEDS. One can interact with EBMEDS using FHIR in the following ways: Calling decision support : We use the CDS Hooks standard as the communication model. Custom REST API : We provide a REST interface to retrieve static FHIR resources (Questionnaire, PlanDefinition, Goal)","title":"Getting started"},{"location":"api/fhir/getting-started/#communication-model","text":"EBMEDS 2.0 is completely stateless and synchronous. In other words, each request to EBMEDS receives a response, and the response contents do not depend on previous requests. This also means that EBMEDS only operates on the data that is present in the request, combining it with the clinical knowledge base produced by Duodecim. The most common way of using EBMEDS is sending a request containing some clinical data about a patient. After analysis of this data, EBMEDS returns decision support information , i.e. messages to be shown to either the patient or a medical professional. Depending on the use case, EBMEDS may also suggest specific actions to be done, actions that are codified using a code system. The caller may then display the messages using a UI of choice, and potentially arrange for automated or semi-automated execution of the attached actions. The request is given a semantic context using CDS hooks . Regardless of the context, the general structure of the request and response is the same: one or more FHIR resources. See the CDS hook catalog to see which resources are used in which context, and the FHIR resource listing for more details on the individual resources.","title":"Communication model"},{"location":"api/fhir/getting-started/#versioning","text":"There are four major versioning schemes in EBMEDS 2.0: The overall software version . Changes with new releases of the software. (Version format: semver) The clinical data version . All internal data in EBMEDS is versioned using one version number. This includes the rulesets, drug data, translations etc. (Version format: semver) The API versions : At the moment EBMEDS supports XML and FHIR STU3 (JSON). These APIs are versioned separately. Newer software versions will support old interfaces for as long as technically feasible. (Version format: semver for XML, whole integers for FHIR) Distributed artifact versions . Some artifacts are distributed to customers so they can be potentially used outside of EBMEDS, for example FHIR Questionnaires. These follow their own versioning scheme that is mappable to the clinical data version scheme if required. (Version format: whole integers)","title":"Versioning"},{"location":"api/fhir/getting-started/#examples","text":"The easiest way to see EBMEDS 2.0 in action is by example. We therefore provide a collection of examples in the Postman Collection v2.1 format . These can be imported into the Postman app or explored by hand. Download the package here: EBMEDS FHIR examples v1.0","title":"Examples"},{"location":"api/fhir/hook-catalog/","text":"EBMEDS Hook Catalog Below we list the available CDS hook endpoints, i.e. the REST endpoints at [base-url]/cds-services/[endpoint] . Note : the FHIR resources to be included in the request are listed (per the CDS hooks standard) as FHIR search strings. However, there is sometimes not enough granularity available in FHIR STU3 searches to specify exactly what is needed. Be aware of this when reading the service descriptions below. /selfcare-filled-questionnaire Hook: 'questionnaire-completed' This hook is intended for the self-care context, where an individual (either by himself or with the assistance of a healthcare professional) fills in a form related to his or her health. This might be a questionnaire about the person's symptoms, a questionnaire calculating lifestyle-related health risks, etc. The responses are encoded into a FHIR QuestionnaireResponse. EBMEDS responds with ActivityDefinitions that include coded actions available for the individual, e.g. the reservation of a time for a lab test, visit to the doctor, etc. A special ActivityDefinition is provided containing reminder texts, instead of the texts being in the CDS hook cards. Used FHIR resources Request SelfCareQuestionnaireResponse (profile of QuestionnaireResponse) Response SelfCareActivityDefinition SelfCareObservation (optional) SelfCareRiskAssessment (optional) Versioning info The version of the Questionnaire resource is tightly bound to the version of the ruleset used in EBMEDS to analyze the QuestionnaireResponse. Therefore the Questionnaire version (along with the Questionnaire ID itself) must be specified in the QuestionnaireResponse. The Questionnaire resource contains the Questionnaire.url field which is globally unique. That URL shall be included in the QuestionnaireResponse in the QuestionnaireResponse.questionnaire.reference field, which gives EBMEDS enough info to infer the version information. Note that old Questionnaire versions will not be supported indefinitely, and it is strongly recommended to always use the latest available questionnaire version for a given questionnaire. It is up to the calling party to make sure that the newest version is in use, information about new releases are provided by Duodecim using a mechanism agreed upon with the customer. Service description { \"id\": \"selfcare-filled-questionnaire\", \"hook\": \"questionnaire-completed\", \"name\": \"Self-care questionnaire analysis service\", \"description\": \"A hook for when a FHIR QuestionnaireResponse filled out by a patient/citizen is available for EBMEDS to process. The response may include directions both for the patient himself, and a medical professional.\", \"prefetch\": { \"questionnaireResponse\": \"/QuestionnaireResponse?patient={{Patient.id}}\" } } Example request { \"hook\": \"questionnaire-completed\", \"context\": { \"dataVersion\": \"latest\" }, \"prefetch\": { \"questionnaireResponse\": { \"resource\": { \"resourceType\": \"QuestionnaireResponse\", \"questionnaire\": { \"url\": \"https://www.ebmeds.org/form/api/FHIR/forms/export/21/622\" }, \"status\": \"completed\", \"item\": [ { \"linkId\": \"introduction\", \"item\": [ { \"linkId\": \"20\", \"answer\": [ { \"valueCoding\": { \"id\": \"47\" } } ] }, { \"linkId\": \"266\" }, { \"linkId\": \"3\", \"answer\": [ { \"valueDecimal\": 45 } ] }, { \"linkId\": \"666\" }, { \"linkId\": \"305\", \"answer\": [ { \"valueCoding\": { \"id\": \"462\" } } ] }, { \"linkId\": \"662\" }, { \"linkId\": \"21\", \"answer\": [ { \"valueCoding\": { \"id\": \"69\" } } ] }, { \"linkId\": \"22\", \"answer\": [ { \"valueCoding\": { \"id\": \"81\" } } ] }, { \"linkId\": \"28\" }, { \"linkId\": \"23\" \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"24\" \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"25\" \"answer\": [ { \"valueCoding\": { \"id\": \"414\" } } ] }, { \"linkId\": \"184\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"26\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"27\" }, { \"linkId\": \"29\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"660\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"30\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"31\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"32\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"33\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"702\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"34\" } ] } ] } } } } Example response { \"cards\": [ { \"summary\": \"Selfcare action suggestions\", \"indicator\": \"info\", \"source\": { \"name\": \"EBMEDS v2.0.6\", \"url\": \"https://ebmeds.org/version/v2.0.6/data-version/v0.9.2\" }, \"suggestions\": [ { \"resourceType\": \"ActivityDefinition\", \"status\": \"active\", \"copyright\": \"Kustannus Oy Duodecim, 2017\", \"participant\": [ { \"type\": \"patient\" } ], \"kind\": \"Observation\", \"code\": { \"coding\": [ { \"code\": \"ADA001-P1\", \"system\": \"http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023&versionKey=2283\", \"display\": \"Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Hoidetaan p\u00e4ivystyksen\u00e4\" } ] } }, { \"resourceType\": \"ActivityDefinition\", \"status\": \"active\", \"copyright\": \"Kustannus Oy Duodecim, 2017\", \"participant\": [ { \"type\": \"patient\" } ], \"kind\": \"CommunicationRequest\", \"code\": { \"coding\": [ { \"system\": \"https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\", \"code\": \"read-reminder\", \"display\": \"Lue muistutteet\" } ] }, \"topic\": [ { \"text\": \"Oireesi voivat johtua virtsatietulehduksesta, joka voi olla munuaistasoinen. Hakeudu p\u00e4ivystysvastaanotolle.\", \"coding\": [ { \"system\": \"https://duodecim.fi/fhir/stu3/CodeSystem/reminder-id\", \"code\": \"46bea5c0-c18e-4e78-a20c-06974bae60f7\" } ] } ] } ] } ] } /selfcare-general-cds The so-called general CDS is the traditional way of using EBMEDS, where as much patient data as possible is sent to the service, and a wide range of reminders and suggested actions are returned. Service description { \"id\": \"selfcare-general-cds\", \"hook\": \"general-cds\", \"name\": \"General decision support, no specialization.\", \"description\": \"This hook takes as much patient data as possible and returns as many reminders as possible. As well as prefetch data, see the documentation for what can be put in the context property.\", \"prefetch\": { \"patient\": \"Patient/{{Patient.id}}\", \"allergyIntolerances\": \"AllergyIntolerance?patient={{Patient.id}}\", \"familyMemberHistories\": \"FamilyMemberHistory?patient={{Patient.id}}\", \"conditions\": \"Condition?patient={{Patient.id}}\", \"observations\": \"Observation?patient={{Patient.id}}\", \"medicationStatements\": \"MedicationStatement?patient={{Patient.id}}\", \"immunizations\": \"Immunization?patient={{Patient.id}}\", \"procedures\": \"Procedure?patient={{Patient.id}}\", \"procedureRequests\": \"ProcedureRequest?patient={{Patient.id}}\" } } /selfcare-monitoring Given a MonitoringGoal and related measurements (e.g. a weight loss goal and weight measurements), provide feedback on the progress. Service description { \"id\": \"selfcare-monitoring\", \"hook\": \"selfcare-monitoring\", \"name\": \"Monitoring of certain observations for self-care purposes\", \"description\": \"This hook takes a MonitoringGoal resource and a bundle of associated MeasurementObservations and returns textual feedback on the user's progress.\", \"context\": { \"goals\": \"Goal?patient={{Patient.id}}\", \"measurements\": \"Observation?patient={{Patient.id}}\" } }","title":"Hook catalog"},{"location":"api/fhir/hook-catalog/#ebmeds-hook-catalog","text":"Below we list the available CDS hook endpoints, i.e. the REST endpoints at [base-url]/cds-services/[endpoint] . Note : the FHIR resources to be included in the request are listed (per the CDS hooks standard) as FHIR search strings. However, there is sometimes not enough granularity available in FHIR STU3 searches to specify exactly what is needed. Be aware of this when reading the service descriptions below.","title":"EBMEDS Hook Catalog"},{"location":"api/fhir/hook-catalog/#selfcare-filled-questionnaire","text":"Hook: 'questionnaire-completed' This hook is intended for the self-care context, where an individual (either by himself or with the assistance of a healthcare professional) fills in a form related to his or her health. This might be a questionnaire about the person's symptoms, a questionnaire calculating lifestyle-related health risks, etc. The responses are encoded into a FHIR QuestionnaireResponse. EBMEDS responds with ActivityDefinitions that include coded actions available for the individual, e.g. the reservation of a time for a lab test, visit to the doctor, etc. A special ActivityDefinition is provided containing reminder texts, instead of the texts being in the CDS hook cards.","title":"/selfcare-filled-questionnaire"},{"location":"api/fhir/hook-catalog/#used-fhir-resources","text":"Request SelfCareQuestionnaireResponse (profile of QuestionnaireResponse) Response SelfCareActivityDefinition SelfCareObservation (optional) SelfCareRiskAssessment (optional)","title":"Used FHIR resources"},{"location":"api/fhir/hook-catalog/#versioning-info","text":"The version of the Questionnaire resource is tightly bound to the version of the ruleset used in EBMEDS to analyze the QuestionnaireResponse. Therefore the Questionnaire version (along with the Questionnaire ID itself) must be specified in the QuestionnaireResponse. The Questionnaire resource contains the Questionnaire.url field which is globally unique. That URL shall be included in the QuestionnaireResponse in the QuestionnaireResponse.questionnaire.reference field, which gives EBMEDS enough info to infer the version information. Note that old Questionnaire versions will not be supported indefinitely, and it is strongly recommended to always use the latest available questionnaire version for a given questionnaire. It is up to the calling party to make sure that the newest version is in use, information about new releases are provided by Duodecim using a mechanism agreed upon with the customer.","title":"Versioning info"},{"location":"api/fhir/hook-catalog/#service-description","text":"{ \"id\": \"selfcare-filled-questionnaire\", \"hook\": \"questionnaire-completed\", \"name\": \"Self-care questionnaire analysis service\", \"description\": \"A hook for when a FHIR QuestionnaireResponse filled out by a patient/citizen is available for EBMEDS to process. The response may include directions both for the patient himself, and a medical professional.\", \"prefetch\": { \"questionnaireResponse\": \"/QuestionnaireResponse?patient={{Patient.id}}\" } }","title":"Service description"},{"location":"api/fhir/hook-catalog/#example-request","text":"{ \"hook\": \"questionnaire-completed\", \"context\": { \"dataVersion\": \"latest\" }, \"prefetch\": { \"questionnaireResponse\": { \"resource\": { \"resourceType\": \"QuestionnaireResponse\", \"questionnaire\": { \"url\": \"https://www.ebmeds.org/form/api/FHIR/forms/export/21/622\" }, \"status\": \"completed\", \"item\": [ { \"linkId\": \"introduction\", \"item\": [ { \"linkId\": \"20\", \"answer\": [ { \"valueCoding\": { \"id\": \"47\" } } ] }, { \"linkId\": \"266\" }, { \"linkId\": \"3\", \"answer\": [ { \"valueDecimal\": 45 } ] }, { \"linkId\": \"666\" }, { \"linkId\": \"305\", \"answer\": [ { \"valueCoding\": { \"id\": \"462\" } } ] }, { \"linkId\": \"662\" }, { \"linkId\": \"21\", \"answer\": [ { \"valueCoding\": { \"id\": \"69\" } } ] }, { \"linkId\": \"22\", \"answer\": [ { \"valueCoding\": { \"id\": \"81\" } } ] }, { \"linkId\": \"28\" }, { \"linkId\": \"23\" \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"24\" \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"25\" \"answer\": [ { \"valueCoding\": { \"id\": \"414\" } } ] }, { \"linkId\": \"184\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"26\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"27\" }, { \"linkId\": \"29\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"660\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"30\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"31\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"32\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"33\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"702\", \"answer\": [ { \"valueBoolean\": true } ] }, { \"linkId\": \"34\" } ] } ] } } } }","title":"Example request"},{"location":"api/fhir/hook-catalog/#example-response","text":"{ \"cards\": [ { \"summary\": \"Selfcare action suggestions\", \"indicator\": \"info\", \"source\": { \"name\": \"EBMEDS v2.0.6\", \"url\": \"https://ebmeds.org/version/v2.0.6/data-version/v0.9.2\" }, \"suggestions\": [ { \"resourceType\": \"ActivityDefinition\", \"status\": \"active\", \"copyright\": \"Kustannus Oy Duodecim, 2017\", \"participant\": [ { \"type\": \"patient\" } ], \"kind\": \"Observation\", \"code\": { \"coding\": [ { \"code\": \"ADA001-P1\", \"system\": \"http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023&versionKey=2283\", \"display\": \"Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Hoidetaan p\u00e4ivystyksen\u00e4\" } ] } }, { \"resourceType\": \"ActivityDefinition\", \"status\": \"active\", \"copyright\": \"Kustannus Oy Duodecim, 2017\", \"participant\": [ { \"type\": \"patient\" } ], \"kind\": \"CommunicationRequest\", \"code\": { \"coding\": [ { \"system\": \"https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\", \"code\": \"read-reminder\", \"display\": \"Lue muistutteet\" } ] }, \"topic\": [ { \"text\": \"Oireesi voivat johtua virtsatietulehduksesta, joka voi olla munuaistasoinen. Hakeudu p\u00e4ivystysvastaanotolle.\", \"coding\": [ { \"system\": \"https://duodecim.fi/fhir/stu3/CodeSystem/reminder-id\", \"code\": \"46bea5c0-c18e-4e78-a20c-06974bae60f7\" } ] } ] } ] } ] }","title":"Example response"},{"location":"api/fhir/hook-catalog/#selfcare-general-cds","text":"The so-called general CDS is the traditional way of using EBMEDS, where as much patient data as possible is sent to the service, and a wide range of reminders and suggested actions are returned.","title":"/selfcare-general-cds"},{"location":"api/fhir/hook-catalog/#service-description_1","text":"{ \"id\": \"selfcare-general-cds\", \"hook\": \"general-cds\", \"name\": \"General decision support, no specialization.\", \"description\": \"This hook takes as much patient data as possible and returns as many reminders as possible. As well as prefetch data, see the documentation for what can be put in the context property.\", \"prefetch\": { \"patient\": \"Patient/{{Patient.id}}\", \"allergyIntolerances\": \"AllergyIntolerance?patient={{Patient.id}}\", \"familyMemberHistories\": \"FamilyMemberHistory?patient={{Patient.id}}\", \"conditions\": \"Condition?patient={{Patient.id}}\", \"observations\": \"Observation?patient={{Patient.id}}\", \"medicationStatements\": \"MedicationStatement?patient={{Patient.id}}\", \"immunizations\": \"Immunization?patient={{Patient.id}}\", \"procedures\": \"Procedure?patient={{Patient.id}}\", \"procedureRequests\": \"ProcedureRequest?patient={{Patient.id}}\" } }","title":"Service description"},{"location":"api/fhir/hook-catalog/#selfcare-monitoring","text":"Given a MonitoringGoal and related measurements (e.g. a weight loss goal and weight measurements), provide feedback on the progress.","title":"/selfcare-monitoring"},{"location":"api/fhir/hook-catalog/#service-description_2","text":"{ \"id\": \"selfcare-monitoring\", \"hook\": \"selfcare-monitoring\", \"name\": \"Monitoring of certain observations for self-care purposes\", \"description\": \"This hook takes a MonitoringGoal resource and a bundle of associated MeasurementObservations and returns textual feedback on the user's progress.\", \"context\": { \"goals\": \"Goal?patient={{Patient.id}}\", \"measurements\": \"Observation?patient={{Patient.id}}\" } }","title":"Service description"},{"location":"api/fhir/oda/","text":"ODA project-specific customization SelfCareQuestionnaire FHIR resource In the selfcare-* CDS hooks, the following metadata is included (by request from the ODA project) in the SelfCareQuestionnaire resource: { \"meta\": { \"profile\": [ \"http://phr.kanta.fi/StructureDefinition/fiphr-questionnaire-stu3\" ], \"tag\": [ { \"system\":\"http://oda.fi/Questionnaire\", \"code\":\"symptom\" }, { \"system\":\"http://oda.fi/cds\", \"code\":\"oda1\" } ] } } SelfCareQuestionnaire push When new questionnaires (or versions of questionnaires) are available for use in the self-care context, they are pushed to a server specified by the ODA project.","title":"ODA-specific information"},{"location":"api/fhir/oda/#oda-project-specific-customization","text":"","title":"ODA project-specific customization"},{"location":"api/fhir/oda/#selfcarequestionnaire-fhir-resource","text":"In the selfcare-* CDS hooks, the following metadata is included (by request from the ODA project) in the SelfCareQuestionnaire resource: { \"meta\": { \"profile\": [ \"http://phr.kanta.fi/StructureDefinition/fiphr-questionnaire-stu3\" ], \"tag\": [ { \"system\":\"http://oda.fi/Questionnaire\", \"code\":\"symptom\" }, { \"system\":\"http://oda.fi/cds\", \"code\":\"oda1\" } ] } }","title":"SelfCareQuestionnaire FHIR resource"},{"location":"api/fhir/oda/#selfcarequestionnaire-push","text":"When new questionnaires (or versions of questionnaires) are available for use in the self-care context, they are pushed to a server specified by the ODA project.","title":"SelfCareQuestionnaire push"},{"location":"api/fhir/resources/","text":"FHIR resources in EBMEDS SelfCareQuestionnaire Inherits from : Questionnaire FHIR profile : SelfCareQuestionnaire The FHIR Questionnaire resource is a general way of describing, you guessed it, questionnaires. Example An example resource is: { \"resourceType\":\"Questionnaire\", \"language\":\"fi\", \"url\":\"https://www.ebmeds.org/form/api/FHIR/forms/export/107/550\", \"version\":\"v0.9.3\", \"status\":\"active\", \"date\":\"2017-10-11T11:45:49.036Z\", \"publisher\":\"\u00a9 Kustannus Oy Duodecim, 2017\", \"copyright\":\"\u00a9 Kustannus Oy Duodecim, 2017\", \"identifier\":[ { \"system\":\"https://duodecim.fi/fhir/sid/vkt-questionnaire-id\", \"value\":\"107\" } ], \"title\":\"Hengitystietulehdusoireiden oirearvio\", \"text\":{ \"status\":\"generated\", \"div\":\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Neuvova oirearviolomake, joka auttaa hengitystieinfektion oireita potevaa henkil\u00f6\u00e4 arvioimaan ammattiavun tarvetta ja omahoidon mahdollisuuksia</div>\" }, \"extension\":[ { \"url\":\"https://duodecim.fi/fhir/extensions/self-care-instructions\", \"extension\":[ { \"url\":\"instruction-text\", \"valueString\":\"[Itsehoito-ohje](http://www.terveyskirjasto.fi/terveyskirjasto/tk.koti?p_artikkeli=dlk01167)\" } ] } ], \"item\":[ { \"linkId\":\"introduction\", \"text\":\"Introductory text of the questionnaire. Also a container item. Has no answer, but contains other items. The text is written in markdown, so it may contain [links](https://ebmeds.org).\", \"type\":\"group\", \"item\":[ { \"linkId\": \"266\", \"type\": \"display\", \"text\": \"A display-type question in the Questionnaire, has no answer but must also be present in the QuestionnaireResponse according to the FHIR spec.\" }, { \"linkId\":\"3\", \"type\":\"decimal\", \"text\":\"A question with a numeric answer. (For example, age.)\", \"required\":true, \"code\":[ { \"system\":\"http://loinc.org\", \"code\":\"21612-7\" } ], \"extension\":[ { \"url\":\"http://hl7.org/fhir/StructureDefinition/minValue\", \"valueDecimal\":10 }, { \"url\":\"http://hl7.org/fhir/StructureDefinition/maxValue\", \"valueDecimal\":99 } ] }, { \"linkId\":\"306\", \"required\":true, \"text\":\"'Check box' type multiple choice questions may naturally have > 1 answers.\", \"type\":\"choice\", \"repeats\":true, \"option\":[ { \"valueCoding\":{ \"id\":\"452\", \"display\":\"First option.\" } }, { \"valueCoding\":{ \"id\":\"453\", \"display\":\"Second option.\" } }, { \"valueCoding\":{ \"id\":\"453\", \"display\":\"None of the above.\" }, \"extension\": [ { \"url\": \"http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive\", \"valueBoolean\": true } ] } ] }, { \"linkId\":\"305\", \"required\":true, \"text\":\"A 'radio button' type multiple choice question. In the QuestionnaireResponse, looks identical to a checkbox answer with one answer checked.\", \"type\":\"choice\", \"repeats\":false, \"option\":[ { \"valueCoding\":{ \"id\":\"462\", \"display\":\"First option.\" } }, { \"valueCoding\":{ \"id\":\"463\", \"display\":\"Second option.\" } }, { \"valueCoding\":{ \"id\":\"464\", \"display\":\"Third option.\" } } ] }, { \"linkId\": \"23\", \"required\": true, \"text\": \"A boolean-type question. In the Questionnaire this question contains display logic, i.e. the question is only visible when certain other questions have been answered in a certain way. In this example, the numerical answer in question ID 3 must be between 15 and 99.\", \"type\": \"boolean\", \"enableWhen\": [ { \"question\": \"3\", \"answerQuantity\": { \"value\": 15, \"comparator\": \">\" } }, { \"question\": \"3\", \"extension\": [ { \"url\": \"https://duodecim.fi/fhir/extensions/enable-when-operator\", \"valueString\": \"AND\" } ], \"answerQuantity\": { \"value\": 99, \"comparator\": \"<\" } } ] } ] } ] } With the fields: resourceType (string): Always Questionnaire . language (string): What language is the form written in? BCP47 language tag, e.g. fi or fi-FI . url (string): Globally unique URL for this questionnaire. status (string): Can be active , draft or retired . Only active questionnaires should be used in production. date (string): ISO 8601 date of when the Questionnaire was created or last modified. publisher (string): Who published the Questionnaire. Usually Duodecim. copyright (string): Standard copyright notice. identifier (array of objects): Identifying codes, in practice only one object is listed. system (string): 'http://duodecim.fi/fhir/sid/vkt-questionnaire-id' , an internally defined code system. code (string): The unique ID for this questionnaire (although different versions may exist with the same ID). title (string): The title of this questionnaire. text (object): A FHIR Narrative object, i.e. a human-readable description of the contents of this resource. Has the following fields: status (string): Always 'generated' . div (string): A string containing an XHTML div with the contents. Note that entity references are not allowed. item (array of objects): The field describing one or more questions. Items may contain other items, forming a tree structure. Questionnaire items The example Questionnaire above contains an assortment of the most common variants of a question item: the different question types, as well as the usage display logic ( enableWhen ) and custom extensions. The fields in item are as follows. item (object): Items may contain other items. linkId (string): A unique ID for identifying this question in the form. text (string, markdown, optional ): A markdown string containing the question text. May contain light text formatting and links to images. Not needed for certain item types, e.g. group . required (boolean): Whether or not this question is required to be answered. Questions with type: 'display' or type: 'group' can not be required . The required property is also not applicable to questions that are not visible to the user due to display logic hiding them. As a rule of thumb, the Questionnaires generated by Duodecim assume that all (visible and answerable) questions are required. type (string): One of 'decimal' , 'boolean' , 'string' , 'integer' , 'decimal' , 'date' , 'dateTime' , ' choice ' for actual questions. We also have the special types 'group' (that only contains other items) and 'display' which is used to show some informative text and/or subtitles (in markdown). See section \"Question types\" below. enableWhen (array of objects): A list of criteria for when this question should be visible to the user. Each criterium in the list is connected to the other by boolean OR operators by default, with AND operators being implemented by an extension. See the section \"Questionnaire extensions\". Questionnaire extensions See the extensions page . SelfCareQuestionnaireResponse Inherits from : QuestionnaireResponse FHIR profile : SelfCareQuestionnaireResponse The SelfCareQuestionnaireResponse is the counterpart to a Questionnaire: it contains the answers that the user has provided. This can be sent to EBMEDS for decision support. Here is a complete example: { \"resourceType\": \"QuestionnaireResponse\", \"id\": \"0685d814-f4af-41a3-8547-5c7e5f97c923\", \"questionnaire\": { \"identifier\": { \"system\": \"https://duodecim.fi/fhir/sid/vkt-questionnaire-id\", \"value\": \"21\" } }, \"status\": \"completed\", \"item\": [ { \"linkId\": \"introduction\", \"text\": \"Introductory text of the questionnaire. Also a container item. Has no answer, but contains other items. The text is written in markdown, so it may contain [links](https://ebmeds.org).\", \"item\": [ { \"linkId\": \"266\", \"text\": \"A display-type question in the Questionnaire, has no answer but must also be present in the QuestionnaireResponse according to the FHIR spec.\" }, { \"linkId\": \"3\", \"text\": \"A question with a numeric answer. (For example, age.)\", \"answer\": [ { \"valueDecimal\": 45 } ] }, { \"linkId\": \"306\", \"text\": \"'Check box' type multiple choice questions may naturally have > 1 answers.\", \"answer\": [ { \"valueCoding\": { \"id\": \"452\" } }, { \"valueCoding\": { \"id\": \"453\" } } ] }, { \"linkId\": \"305\", \"text\": \"A 'radio button' type multiple choice question. In the QuestionnaireResponse, looks identical to a checkbox answer with one answer checked.\", \"answer\": [ { \"valueCoding\": { \"id\": \"462\" } } ] }, { \"linkId\": \"23\", \"text\": \"A boolean-type question. In the Questionnaire this question contains display logic, i.e. the question is only visible when certain other questions have been answered in a certain way. In this example, the numerical answer in question ID 3 must be between 15 and 99.\", \"answer\": [ { \"valueBoolean\": true } ] } ] } ] } So the structure has the following fields: resourceType (string): Always QuestionnaireResponse . id (string, optional ): A unique ID, UUID works great. Not needed for CDS, but good to have for archiving purposes. questionnaire.identifier (object): A unique identifier for the Questionnaire that this QuestionnaireResponse answers. system (string): Always https://duodecim.fi/fhir/sid/vkt-questionnaire-id value (string): A unique ID for the Questionnaire. status (string): Always completed . item (array of objects): Tree hierarchy of the answers to the questionnaire. The hierarchy must be the same as the question hierarchy in the Questionnaire. item (see above, optional ): Items may contain other items. linkId (string): The unique ID of the question in the Questionnaire resource (also named linkId there). This ID is in fact globally unique for all Duodecim Questionnaires. answer (array, optional ): array of objects with property value[x] , corresponding to the Questionnaire answer[x] field for the question. The length of the array is always 1, or >= 1 if it is a multiple choice question ( valueCoding ). valueBoolean (boolean): A yes or no question answer. valueDecimal (number): A decimal-valued question answer. valueCoding (object): has one property, id (string), the ID of the wanted answer. Also globally unique ID in all Duodecim Questionnaires. text (markdown string, optional ): The question text from the Questionnaire repeated here, mostly to aid debugging. SelfCareActivityDefinition Inherits from : ActivityDefinition FHIR profile : SelfCareActivityDefinition The main point of the FHIR resource SelfCareActivityDefinition is to describe an action. In the traditional CDS context the primary unit is the reminder, an informative message that may have an encoded action suggestion attached to it. In the self-care context it is the other way around: we return actions that have messages attached to them. In practice, this means that if several reminders suggest the same action, only one SelfCareActivityDefinition is returned, with several reminder texts attached to it. This also means that the card structure of CDS hooks becomes meaningless, see the discussion at the bottom of this page . Data model The ActivityDefinitions in the selfcare-* hooks separate the reminder texts from their suggested actions. Given a set of reminders, each with 0 or more suggested actions attached to them, the reminder texts and actions are split up into several SelfCareActivityDefinitions: Zero or one ActivityDefinition containing the code system https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions and the code read-reminder . This resource contains all reminder texts with severity level reminder in its topic.text field. Zero or one ActivityDefinition containing the code system https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions and the code read-prompt . This resource contains all reminder texts with severity level prompt in its topic.text field. Zero or one ActivityDefinition containing the code system https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions and the code read-alert . This resource contains all reminder texts with severity level alert in its topic.text field. Zero or more ActivityDefinition containing any other code system and code, representing the actual actions. In other words: ActivityDefinitions of type 1-3 may or may not be present, but at least one of them contains at least one reminder text. See below for an example. Code systems These code systems are used when coding an ActivityDefinition. See the code systems page for more detailed information. https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions : custom codes identifying special types of ActivityDefinitions, like above. http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023&versionKey=2283 a.k.a. OID 1.2.246.537.6.49 : THL Sosiaali- ja terveysalan palvelunimikkeist\u00f6 http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=88&versionKey=120 a.k.a. OID 1.2.246.537.6.3 : Kuntaliitto Restrictions Some restrictions have been put in place to simplify data processing, using the SelfCareActivityDefinition profile. A SelfCareActivityDefinition is described by exactly one code, i.e. code must be present and code.coding may contain only one coding. The coding represents some kind of action. A reminder must have exactly one participant , i.e. the intended recipient of this SelfCareActivityDefinition. This is either the patient or a medical professional. The ActivityDefinitions are always freshly generated, so their status is always active . Example Below is an example of the two kinds of SelfCareActivityDefinitions (one describing an action, one containing reminder texts) in a CDS response: { \"cards\": [ { \"summary\": \"Selfcare action suggestions\", \"indicator\": \"info\", \"source\": { \"name\": \"EBMEDS v2.0.6\", \"url\": \"https://ebmeds.org/version/v2.0.6/data-version/v0.9.2\" }, \"suggestions\": [ { \"resourceType\": \"ActivityDefinition\", \"status\": \"active\", \"copyright\": \"Kustannus Oy Duodecim, 2017\", \"participant\": [ { \"type\": \"patient\" } ], \"kind\": \"Observation\", \"code\": { \"coding\": [ { \"code\": \"ADA001-P1\", \"system\": \"http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023&versionKey=2283\", \"display\": \"Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Hoidetaan p\u00e4ivystyksen\u00e4\" } ] } }, { \"resourceType\": \"ActivityDefinition\", \"status\": \"active\", \"copyright\": \"Kustannus Oy Duodecim, 2017\", \"participant\": [ { \"type\": \"patient\" } ], \"kind\": \"CommunicationRequest\", \"code\": { \"coding\": [ { \"system\": \"https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\", \"code\": \"read-reminder\", \"display\": \"Lue muistutteet\" } ] }, \"topic\": [ { \"text\": \"Oireesi voivat johtua virtsatietulehduksesta, joka voi olla munuaistasoinen. Hakeudu p\u00e4ivystysvastaanotolle.\", \"coding\": [ { \"system\": \"https://duodecim.fi/fhir/stu3/CodeSystem/reminder-id\", \"code\": \"46bea5c0-c18e-4e78-a20c-06974bae60f7\", } ] } ] } ] } ] } And the fields are described as follows. resourceType (string): Always ActivityDefinition for this resource. status (string): Only active ActivityDefinitions are returned. code (object, CodeableConcept): The code describing the action. coding : container object for a code + code system system (string): The code system used in this code. See a list of used code systems . code (string): The actual code, a symbol in the given system. display (string): Human-readable description of the action. topic (array, optional ): text (markdown string): The reminder text itself. May contain http links and text with light styling. coding.code (UUID): The unique ID of this particular reminder message. coding.system : Always https://duodecim.fi/fhir/stu3/CodeSystem/reminder-id . participant (array of objects): A list of participants and their roles. In practice there is only ever one entry in this list. Each object contains the following field: type (string): one of patient , practitioner or related-person . Only patient is in practical use at the moment. copyright (string): A standard copyright notice. SelfCareObservation Inherits from : Observation FHIR profile : SelfCareObservation A very simple resource describing some new observation made about the patient from the basis of his or her patient data. Example { \"status\": \"final\", \"code\": { \"coding\": [ { \"system\": \"https://duodecim.fi/fhir/stu3/CodeSystem/custom-observations\", \"code\": \"potential-extra-years\" } ] }, \"effectiveDateTime\": \"2018-04-25T11:13:56.894Z\", \"valueQuantity\": { \"unit\": \"a\", \"value\": 5 } } And the fields are the following: code.coding : The code system and coding describing the concept. effectiveDateTime (date string): When this observation was created. valueQuantity or valueString : The actual value, either as a number with a unit (Quantity) or as a string. SelfCareRiskAssessment Inherits from : RiskAssessment FHIR profile : SelfCareRiskAssessment A resource describing some newly calculated risk regarding the patient, from the basis of his or her patient data. The risk is always associated with a certain outcome (with a diagnosis code or similar), and the age range in years for which this risk is applicable for this particular patient. The risk probability is always given as a decimal between 0 and 1. Example { \"status\": \"final\", \"prediction\": [ \"outcome\": { \"coding\": [{ \"system\": \"http://snomed.info/sct\", \"code\": \"414545008\" }] }, \"probabilityDecimal\": 0.40, \"whenRange\": { \"low\": { \"value\": 52, \"unit\": \"a\" }, \"high\": { \"value\": 62, \"unit\": \"a\" } } ] } And the fields are the following: prediction.outcome : The code system and coding describing the outcome that may occur. prediction.probabilityDecimal (decimal between 0 and 1): The probability of the outcome occurring. whenRange : The patient's age range for which this risk has been calculated. Resources for general CDS At the moment, EBMEDS best supports questionnaire-based decision support in FHIR, using the resources described above. For a full-blown CDS service, a large range of other clinical data about a person can and should be included. The resources for describing these is in a very experimental stage, and the profiles will probably change once real-world use is initiated. The documentation is therefore still mostly in the profiles themselves: CDSImmunization CDSMedicationStatement CDSProcedure CDSProcedureRequest DiagnosisCondition DrugAllergyIntolerance MeasurementObservation MonitoringGoal NonIdentifiablePatient SimpleFamilyMemberHistory","title":"Resources"},{"location":"api/fhir/resources/#fhir-resources-in-ebmeds","text":"","title":"FHIR resources in EBMEDS"},{"location":"api/fhir/resources/#selfcarequestionnaire","text":"Inherits from : Questionnaire FHIR profile : SelfCareQuestionnaire The FHIR Questionnaire resource is a general way of describing, you guessed it, questionnaires.","title":"SelfCareQuestionnaire"},{"location":"api/fhir/resources/#example","text":"An example resource is: { \"resourceType\":\"Questionnaire\", \"language\":\"fi\", \"url\":\"https://www.ebmeds.org/form/api/FHIR/forms/export/107/550\", \"version\":\"v0.9.3\", \"status\":\"active\", \"date\":\"2017-10-11T11:45:49.036Z\", \"publisher\":\"\u00a9 Kustannus Oy Duodecim, 2017\", \"copyright\":\"\u00a9 Kustannus Oy Duodecim, 2017\", \"identifier\":[ { \"system\":\"https://duodecim.fi/fhir/sid/vkt-questionnaire-id\", \"value\":\"107\" } ], \"title\":\"Hengitystietulehdusoireiden oirearvio\", \"text\":{ \"status\":\"generated\", \"div\":\"<div xmlns=\\\"http://www.w3.org/1999/xhtml\\\">Neuvova oirearviolomake, joka auttaa hengitystieinfektion oireita potevaa henkil\u00f6\u00e4 arvioimaan ammattiavun tarvetta ja omahoidon mahdollisuuksia</div>\" }, \"extension\":[ { \"url\":\"https://duodecim.fi/fhir/extensions/self-care-instructions\", \"extension\":[ { \"url\":\"instruction-text\", \"valueString\":\"[Itsehoito-ohje](http://www.terveyskirjasto.fi/terveyskirjasto/tk.koti?p_artikkeli=dlk01167)\" } ] } ], \"item\":[ { \"linkId\":\"introduction\", \"text\":\"Introductory text of the questionnaire. Also a container item. Has no answer, but contains other items. The text is written in markdown, so it may contain [links](https://ebmeds.org).\", \"type\":\"group\", \"item\":[ { \"linkId\": \"266\", \"type\": \"display\", \"text\": \"A display-type question in the Questionnaire, has no answer but must also be present in the QuestionnaireResponse according to the FHIR spec.\" }, { \"linkId\":\"3\", \"type\":\"decimal\", \"text\":\"A question with a numeric answer. (For example, age.)\", \"required\":true, \"code\":[ { \"system\":\"http://loinc.org\", \"code\":\"21612-7\" } ], \"extension\":[ { \"url\":\"http://hl7.org/fhir/StructureDefinition/minValue\", \"valueDecimal\":10 }, { \"url\":\"http://hl7.org/fhir/StructureDefinition/maxValue\", \"valueDecimal\":99 } ] }, { \"linkId\":\"306\", \"required\":true, \"text\":\"'Check box' type multiple choice questions may naturally have > 1 answers.\", \"type\":\"choice\", \"repeats\":true, \"option\":[ { \"valueCoding\":{ \"id\":\"452\", \"display\":\"First option.\" } }, { \"valueCoding\":{ \"id\":\"453\", \"display\":\"Second option.\" } }, { \"valueCoding\":{ \"id\":\"453\", \"display\":\"None of the above.\" }, \"extension\": [ { \"url\": \"http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive\", \"valueBoolean\": true } ] } ] }, { \"linkId\":\"305\", \"required\":true, \"text\":\"A 'radio button' type multiple choice question. In the QuestionnaireResponse, looks identical to a checkbox answer with one answer checked.\", \"type\":\"choice\", \"repeats\":false, \"option\":[ { \"valueCoding\":{ \"id\":\"462\", \"display\":\"First option.\" } }, { \"valueCoding\":{ \"id\":\"463\", \"display\":\"Second option.\" } }, { \"valueCoding\":{ \"id\":\"464\", \"display\":\"Third option.\" } } ] }, { \"linkId\": \"23\", \"required\": true, \"text\": \"A boolean-type question. In the Questionnaire this question contains display logic, i.e. the question is only visible when certain other questions have been answered in a certain way. In this example, the numerical answer in question ID 3 must be between 15 and 99.\", \"type\": \"boolean\", \"enableWhen\": [ { \"question\": \"3\", \"answerQuantity\": { \"value\": 15, \"comparator\": \">\" } }, { \"question\": \"3\", \"extension\": [ { \"url\": \"https://duodecim.fi/fhir/extensions/enable-when-operator\", \"valueString\": \"AND\" } ], \"answerQuantity\": { \"value\": 99, \"comparator\": \"<\" } } ] } ] } ] } With the fields: resourceType (string): Always Questionnaire . language (string): What language is the form written in? BCP47 language tag, e.g. fi or fi-FI . url (string): Globally unique URL for this questionnaire. status (string): Can be active , draft or retired . Only active questionnaires should be used in production. date (string): ISO 8601 date of when the Questionnaire was created or last modified. publisher (string): Who published the Questionnaire. Usually Duodecim. copyright (string): Standard copyright notice. identifier (array of objects): Identifying codes, in practice only one object is listed. system (string): 'http://duodecim.fi/fhir/sid/vkt-questionnaire-id' , an internally defined code system. code (string): The unique ID for this questionnaire (although different versions may exist with the same ID). title (string): The title of this questionnaire. text (object): A FHIR Narrative object, i.e. a human-readable description of the contents of this resource. Has the following fields: status (string): Always 'generated' . div (string): A string containing an XHTML div with the contents. Note that entity references are not allowed. item (array of objects): The field describing one or more questions. Items may contain other items, forming a tree structure.","title":"Example"},{"location":"api/fhir/resources/#questionnaire-items","text":"The example Questionnaire above contains an assortment of the most common variants of a question item: the different question types, as well as the usage display logic ( enableWhen ) and custom extensions. The fields in item are as follows. item (object): Items may contain other items. linkId (string): A unique ID for identifying this question in the form. text (string, markdown, optional ): A markdown string containing the question text. May contain light text formatting and links to images. Not needed for certain item types, e.g. group . required (boolean): Whether or not this question is required to be answered. Questions with type: 'display' or type: 'group' can not be required . The required property is also not applicable to questions that are not visible to the user due to display logic hiding them. As a rule of thumb, the Questionnaires generated by Duodecim assume that all (visible and answerable) questions are required. type (string): One of 'decimal' , 'boolean' , 'string' , 'integer' , 'decimal' , 'date' , 'dateTime' , ' choice ' for actual questions. We also have the special types 'group' (that only contains other items) and 'display' which is used to show some informative text and/or subtitles (in markdown). See section \"Question types\" below. enableWhen (array of objects): A list of criteria for when this question should be visible to the user. Each criterium in the list is connected to the other by boolean OR operators by default, with AND operators being implemented by an extension. See the section \"Questionnaire extensions\".","title":"Questionnaire items"},{"location":"api/fhir/resources/#questionnaire-extensions","text":"See the extensions page .","title":"Questionnaire extensions"},{"location":"api/fhir/resources/#selfcarequestionnaireresponse","text":"Inherits from : QuestionnaireResponse FHIR profile : SelfCareQuestionnaireResponse The SelfCareQuestionnaireResponse is the counterpart to a Questionnaire: it contains the answers that the user has provided. This can be sent to EBMEDS for decision support. Here is a complete example: { \"resourceType\": \"QuestionnaireResponse\", \"id\": \"0685d814-f4af-41a3-8547-5c7e5f97c923\", \"questionnaire\": { \"identifier\": { \"system\": \"https://duodecim.fi/fhir/sid/vkt-questionnaire-id\", \"value\": \"21\" } }, \"status\": \"completed\", \"item\": [ { \"linkId\": \"introduction\", \"text\": \"Introductory text of the questionnaire. Also a container item. Has no answer, but contains other items. The text is written in markdown, so it may contain [links](https://ebmeds.org).\", \"item\": [ { \"linkId\": \"266\", \"text\": \"A display-type question in the Questionnaire, has no answer but must also be present in the QuestionnaireResponse according to the FHIR spec.\" }, { \"linkId\": \"3\", \"text\": \"A question with a numeric answer. (For example, age.)\", \"answer\": [ { \"valueDecimal\": 45 } ] }, { \"linkId\": \"306\", \"text\": \"'Check box' type multiple choice questions may naturally have > 1 answers.\", \"answer\": [ { \"valueCoding\": { \"id\": \"452\" } }, { \"valueCoding\": { \"id\": \"453\" } } ] }, { \"linkId\": \"305\", \"text\": \"A 'radio button' type multiple choice question. In the QuestionnaireResponse, looks identical to a checkbox answer with one answer checked.\", \"answer\": [ { \"valueCoding\": { \"id\": \"462\" } } ] }, { \"linkId\": \"23\", \"text\": \"A boolean-type question. In the Questionnaire this question contains display logic, i.e. the question is only visible when certain other questions have been answered in a certain way. In this example, the numerical answer in question ID 3 must be between 15 and 99.\", \"answer\": [ { \"valueBoolean\": true } ] } ] } ] } So the structure has the following fields: resourceType (string): Always QuestionnaireResponse . id (string, optional ): A unique ID, UUID works great. Not needed for CDS, but good to have for archiving purposes. questionnaire.identifier (object): A unique identifier for the Questionnaire that this QuestionnaireResponse answers. system (string): Always https://duodecim.fi/fhir/sid/vkt-questionnaire-id value (string): A unique ID for the Questionnaire. status (string): Always completed . item (array of objects): Tree hierarchy of the answers to the questionnaire. The hierarchy must be the same as the question hierarchy in the Questionnaire. item (see above, optional ): Items may contain other items. linkId (string): The unique ID of the question in the Questionnaire resource (also named linkId there). This ID is in fact globally unique for all Duodecim Questionnaires. answer (array, optional ): array of objects with property value[x] , corresponding to the Questionnaire answer[x] field for the question. The length of the array is always 1, or >= 1 if it is a multiple choice question ( valueCoding ). valueBoolean (boolean): A yes or no question answer. valueDecimal (number): A decimal-valued question answer. valueCoding (object): has one property, id (string), the ID of the wanted answer. Also globally unique ID in all Duodecim Questionnaires. text (markdown string, optional ): The question text from the Questionnaire repeated here, mostly to aid debugging.","title":"SelfCareQuestionnaireResponse"},{"location":"api/fhir/resources/#selfcareactivitydefinition","text":"Inherits from : ActivityDefinition FHIR profile : SelfCareActivityDefinition The main point of the FHIR resource SelfCareActivityDefinition is to describe an action. In the traditional CDS context the primary unit is the reminder, an informative message that may have an encoded action suggestion attached to it. In the self-care context it is the other way around: we return actions that have messages attached to them. In practice, this means that if several reminders suggest the same action, only one SelfCareActivityDefinition is returned, with several reminder texts attached to it. This also means that the card structure of CDS hooks becomes meaningless, see the discussion at the bottom of this page .","title":"SelfCareActivityDefinition"},{"location":"api/fhir/resources/#data-model","text":"The ActivityDefinitions in the selfcare-* hooks separate the reminder texts from their suggested actions. Given a set of reminders, each with 0 or more suggested actions attached to them, the reminder texts and actions are split up into several SelfCareActivityDefinitions: Zero or one ActivityDefinition containing the code system https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions and the code read-reminder . This resource contains all reminder texts with severity level reminder in its topic.text field. Zero or one ActivityDefinition containing the code system https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions and the code read-prompt . This resource contains all reminder texts with severity level prompt in its topic.text field. Zero or one ActivityDefinition containing the code system https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions and the code read-alert . This resource contains all reminder texts with severity level alert in its topic.text field. Zero or more ActivityDefinition containing any other code system and code, representing the actual actions. In other words: ActivityDefinitions of type 1-3 may or may not be present, but at least one of them contains at least one reminder text. See below for an example.","title":"Data model"},{"location":"api/fhir/resources/#code-systems","text":"These code systems are used when coding an ActivityDefinition. See the code systems page for more detailed information. https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions : custom codes identifying special types of ActivityDefinitions, like above. http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023&versionKey=2283 a.k.a. OID 1.2.246.537.6.49 : THL Sosiaali- ja terveysalan palvelunimikkeist\u00f6 http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=88&versionKey=120 a.k.a. OID 1.2.246.537.6.3 : Kuntaliitto","title":"Code systems"},{"location":"api/fhir/resources/#restrictions","text":"Some restrictions have been put in place to simplify data processing, using the SelfCareActivityDefinition profile. A SelfCareActivityDefinition is described by exactly one code, i.e. code must be present and code.coding may contain only one coding. The coding represents some kind of action. A reminder must have exactly one participant , i.e. the intended recipient of this SelfCareActivityDefinition. This is either the patient or a medical professional. The ActivityDefinitions are always freshly generated, so their status is always active .","title":"Restrictions"},{"location":"api/fhir/resources/#example_1","text":"Below is an example of the two kinds of SelfCareActivityDefinitions (one describing an action, one containing reminder texts) in a CDS response: { \"cards\": [ { \"summary\": \"Selfcare action suggestions\", \"indicator\": \"info\", \"source\": { \"name\": \"EBMEDS v2.0.6\", \"url\": \"https://ebmeds.org/version/v2.0.6/data-version/v0.9.2\" }, \"suggestions\": [ { \"resourceType\": \"ActivityDefinition\", \"status\": \"active\", \"copyright\": \"Kustannus Oy Duodecim, 2017\", \"participant\": [ { \"type\": \"patient\" } ], \"kind\": \"Observation\", \"code\": { \"coding\": [ { \"code\": \"ADA001-P1\", \"system\": \"http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023&versionKey=2283\", \"display\": \"Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Hoidetaan p\u00e4ivystyksen\u00e4\" } ] } }, { \"resourceType\": \"ActivityDefinition\", \"status\": \"active\", \"copyright\": \"Kustannus Oy Duodecim, 2017\", \"participant\": [ { \"type\": \"patient\" } ], \"kind\": \"CommunicationRequest\", \"code\": { \"coding\": [ { \"system\": \"https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\", \"code\": \"read-reminder\", \"display\": \"Lue muistutteet\" } ] }, \"topic\": [ { \"text\": \"Oireesi voivat johtua virtsatietulehduksesta, joka voi olla munuaistasoinen. Hakeudu p\u00e4ivystysvastaanotolle.\", \"coding\": [ { \"system\": \"https://duodecim.fi/fhir/stu3/CodeSystem/reminder-id\", \"code\": \"46bea5c0-c18e-4e78-a20c-06974bae60f7\", } ] } ] } ] } ] } And the fields are described as follows. resourceType (string): Always ActivityDefinition for this resource. status (string): Only active ActivityDefinitions are returned. code (object, CodeableConcept): The code describing the action. coding : container object for a code + code system system (string): The code system used in this code. See a list of used code systems . code (string): The actual code, a symbol in the given system. display (string): Human-readable description of the action. topic (array, optional ): text (markdown string): The reminder text itself. May contain http links and text with light styling. coding.code (UUID): The unique ID of this particular reminder message. coding.system : Always https://duodecim.fi/fhir/stu3/CodeSystem/reminder-id . participant (array of objects): A list of participants and their roles. In practice there is only ever one entry in this list. Each object contains the following field: type (string): one of patient , practitioner or related-person . Only patient is in practical use at the moment. copyright (string): A standard copyright notice.","title":"Example"},{"location":"api/fhir/resources/#selfcareobservation","text":"Inherits from : Observation FHIR profile : SelfCareObservation A very simple resource describing some new observation made about the patient from the basis of his or her patient data.","title":"SelfCareObservation"},{"location":"api/fhir/resources/#example_2","text":"{ \"status\": \"final\", \"code\": { \"coding\": [ { \"system\": \"https://duodecim.fi/fhir/stu3/CodeSystem/custom-observations\", \"code\": \"potential-extra-years\" } ] }, \"effectiveDateTime\": \"2018-04-25T11:13:56.894Z\", \"valueQuantity\": { \"unit\": \"a\", \"value\": 5 } } And the fields are the following: code.coding : The code system and coding describing the concept. effectiveDateTime (date string): When this observation was created. valueQuantity or valueString : The actual value, either as a number with a unit (Quantity) or as a string.","title":"Example"},{"location":"api/fhir/resources/#selfcareriskassessment","text":"Inherits from : RiskAssessment FHIR profile : SelfCareRiskAssessment A resource describing some newly calculated risk regarding the patient, from the basis of his or her patient data. The risk is always associated with a certain outcome (with a diagnosis code or similar), and the age range in years for which this risk is applicable for this particular patient. The risk probability is always given as a decimal between 0 and 1.","title":"SelfCareRiskAssessment"},{"location":"api/fhir/resources/#example_3","text":"{ \"status\": \"final\", \"prediction\": [ \"outcome\": { \"coding\": [{ \"system\": \"http://snomed.info/sct\", \"code\": \"414545008\" }] }, \"probabilityDecimal\": 0.40, \"whenRange\": { \"low\": { \"value\": 52, \"unit\": \"a\" }, \"high\": { \"value\": 62, \"unit\": \"a\" } } ] } And the fields are the following: prediction.outcome : The code system and coding describing the outcome that may occur. prediction.probabilityDecimal (decimal between 0 and 1): The probability of the outcome occurring. whenRange : The patient's age range for which this risk has been calculated.","title":"Example"},{"location":"api/fhir/resources/#resources-for-general-cds","text":"At the moment, EBMEDS best supports questionnaire-based decision support in FHIR, using the resources described above. For a full-blown CDS service, a large range of other clinical data about a person can and should be included. The resources for describing these is in a very experimental stage, and the profiles will probably change once real-world use is initiated. The documentation is therefore still mostly in the profiles themselves: CDSImmunization CDSMedicationStatement CDSProcedure CDSProcedureRequest DiagnosisCondition DrugAllergyIntolerance MeasurementObservation MonitoringGoal NonIdentifiablePatient SimpleFamilyMemberHistory","title":"Resources for general CDS"},{"location":"api/xml/getting-started/","text":"","title":"Getting started"},{"location":"api/xml/xml-schema/","text":"","title":"Xml schema"}]}