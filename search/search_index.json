{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\nThe Evidence-Based Medicine electronic Decision Support (EBMeDS) system brings evidence into practice by means of context-sensitive guidance at the point of care.\n\n\nEBMeDS receives structured patient data from electronic health records (EHRs) and returns reminders, therapeutic suggestions and diagnosis-specific links to guidelines. It can also be used to automatically prefill forms and calculators with patient specific data. In addition to real-time use, the EBMeDS decision support rules (so-called \nscripts\n) can also be run in patient populations (\"virtual health checks\").\n\n\nEBMeDS is a platform-independent service, which can be integrated into any EHR containing structured patient data. Other customized integrations are also possible.\n\n\nIn addition to local installations of EBMeDS, there is also a cloud version of the service called \n which will be brought into use incrementally during 2017-2018.\n\n\nEBMeDS is developed by \nDuodecim Medical Publications Ltd\n, a Finnish company owned by the Finnish Medical Society Duodecim. Both the association and the company have a long-standing collaborative relationship with the \nCochrane Collaboration\n, the \nGRADE Working Group\n, the \nGuidelines International Network (G-I-N)\n and the publishing company \nWiley-Blackwell\n.\n\n\nGetting started\n\n\nEBMeDS talks two different protocols, JSON-formatted FHIR STU3, and a native XML format:\n\n\n\n\nGet started with FHIR\n\n\nGet started with XML\n\n\n\n\nSystem requirements\n\n\nSee the \nsystem requirements page\n for a detailed overview of software and hardware requirements.\n\n\nOther resources\n\n\n\n\nEBMeDS script descriptions\n\n\nDuodecim's FHIR resources", 
            "title": "Home"
        }, 
        {
            "location": "/#overview", 
            "text": "The Evidence-Based Medicine electronic Decision Support (EBMeDS) system brings evidence into practice by means of context-sensitive guidance at the point of care.  EBMeDS receives structured patient data from electronic health records (EHRs) and returns reminders, therapeutic suggestions and diagnosis-specific links to guidelines. It can also be used to automatically prefill forms and calculators with patient specific data. In addition to real-time use, the EBMeDS decision support rules (so-called  scripts ) can also be run in patient populations (\"virtual health checks\").  EBMeDS is a platform-independent service, which can be integrated into any EHR containing structured patient data. Other customized integrations are also possible.  In addition to local installations of EBMeDS, there is also a cloud version of the service called   which will be brought into use incrementally during 2017-2018.  EBMeDS is developed by  Duodecim Medical Publications Ltd , a Finnish company owned by the Finnish Medical Society Duodecim. Both the association and the company have a long-standing collaborative relationship with the  Cochrane Collaboration , the  GRADE Working Group , the  Guidelines International Network (G-I-N)  and the publishing company  Wiley-Blackwell .", 
            "title": "Overview"
        }, 
        {
            "location": "/#getting-started", 
            "text": "EBMeDS talks two different protocols, JSON-formatted FHIR STU3, and a native XML format:   Get started with FHIR  Get started with XML", 
            "title": "Getting started"
        }, 
        {
            "location": "/#system-requirements", 
            "text": "See the  system requirements page  for a detailed overview of software and hardware requirements.", 
            "title": "System requirements"
        }, 
        {
            "location": "/#other-resources", 
            "text": "EBMeDS script descriptions  Duodecim's FHIR resources", 
            "title": "Other resources"
        }, 
        {
            "location": "/system-requirements/", 
            "text": "System requirements\n\n\nEBMeDS is a collection of services delivered as Docker containers. The system consists of the core EBMeDS services which are stateless, and auxiliary services such as databases for storing settings and logs. Docker was chosen to provide a standardized way of scaling up the solution. The solution is designed to be run in large, multi-node clusters but can be deployed on single servers as well.\n\n\nReference deployment instructions\n\n\nDocker containers are highly portable and can be deployed in numerous ways. For inexperienced Docker system administrators, Duodecim provides instructions for a small reference installation with sensible defaults. These instructions are in the Github repository \nebmeds-docker\n.\n\n\nExample single-node server\n\n\nIf you are in a hurry and don't want to read the details below, here is a server configuration that should work for a small installation where no clustering is needed:\n\n\n\n\nCPU: 2 x Intel i5-7600\n\n\nRAM: 8 GB\n\n\nDisk space: 256 GB\n\n\nOS: CentOS 7.4 (with latest patches)\n\n\nDocker: version 18.03.1-ce\n\n\n\n\nSoftware requirements\n\n\nDocker\n\n\nThe minimum requirement is Docker 1.13, but we recommend always using the latest stable version, especially in multi-node clusters. Most Linux distributions have a mechanism for installing Docker straight from Docker Inc's own repositories, which is the recommended way.\n\n\nDocker comes in the free Community Edition (CE) and the paid-for Enterprise Edition (EE). EBMeDS runs on both, although inexperienced Docker admins may find the support channel for Enterprise Edition helpful.\n\n\nOperating system\n\n\nEBMeDS requires Linux. Any of the Linux distributions with the official \nLicensed Docker Infrastructure\n mark works well, meaning either CentOS, Fedora, Debian or Ubuntu. Please see the \nDocker documentation\n for more details about specific versions and caveats.\n\n\nDocker also runs natively on Windows, but note that so-called \nWindows containers\n are not supported. If you want to run EBMeDS on Windows, you must run Linux in a virtual machine.\n\n\nElasticsearch\n\n\nThe Elasticsearch database is an auxiliary service that is:\n\n\n\n\nAn \noptional\n location to store application logs\n\n\nA \nmandatory\n location for storing \nEBMeDS Population\n data\n\n\n\n\nIn the reference installation, Elasticsearch is also run as a Docker container inside Docker Swarm, alongside the EBMeDS core services. However, Elasticsearch can also be installed more \"traditionally\", either on the same server or on a separate one. This may be an attractive option if you have an existing Elasticsearch installation available. Clustering is also easier to handle outside the Docker Swarm for high availability setups.\n\n\nEBMeDS requires the 6.2.x version of Elasticsearch. See \nthe Elasticsearch documentation\n for more details on operation and installation.\n\n\nAs mentioned, Elasticsearch is optional for storing application logs. In the reference installation, logs are stored here. But all the application logs are routed through \nLogstash\n, which can be configured to store the data \nin a multitude of ways\n, including as plain files on disk.\n\n\nFor population analysis, Elasticsearch (and Kibana) is still mandatory.\n\n\nHardware requirements\n\n\nThe hardware requirements of course rely on the scale of the installation. Below, we have listed recommendations for a single cluster node (or just a single server) when Elasticsearch is used, as per the reference installation. Should Elasticsearch be irrelevant for you, the changes in hardware requirements are noted separately below.\n\n\nCPU\n\n\nAny modern multicore x86_64 CPU is accepted. For performance, multiple cores are more important than higher clock rates.\n\n\n\n\nMinimum requirement: \n8 cores, ~3 GHz\n. \nExample\n: 2 x Intel i5-7600 (2 x 4 cores)\n\n\nRecommended: \n16 cores, ~3 GHz\n. \nExample\n: 2 x Intel i7-7820X (2 x 8 cores)\n\n\n\n\nRAM\n\n\n\n\nMinimum requirement: 8 GB (4 GB without Elasticsearch)\n\n\nRecommended: 16 GB (8 GB without Elasticsearch)\n\n\n\n\nDisk space:\n\n\nThe main things that take up disk space are:\n\n\n\n\nDatabase contents, i.e. logs and population analysis data\n\n\nDocker images, old versions can be saved and rollbacks performed if wanted.\n\n\n\n\nIf Elasticsearch is used, there should be a monitoring and archiving strategy for the data. Of course, this goes for any kind of logging solution.\n\n\n\n\nMinimum requirement: 256 GB (128 GB without Elasticsearch)\n\n\nRecommended: 512 GB (128 GB without Elasticsearch)", 
            "title": "System requirements"
        }, 
        {
            "location": "/system-requirements/#system-requirements", 
            "text": "EBMeDS is a collection of services delivered as Docker containers. The system consists of the core EBMeDS services which are stateless, and auxiliary services such as databases for storing settings and logs. Docker was chosen to provide a standardized way of scaling up the solution. The solution is designed to be run in large, multi-node clusters but can be deployed on single servers as well.", 
            "title": "System requirements"
        }, 
        {
            "location": "/system-requirements/#reference-deployment-instructions", 
            "text": "Docker containers are highly portable and can be deployed in numerous ways. For inexperienced Docker system administrators, Duodecim provides instructions for a small reference installation with sensible defaults. These instructions are in the Github repository  ebmeds-docker .", 
            "title": "Reference deployment instructions"
        }, 
        {
            "location": "/system-requirements/#example-single-node-server", 
            "text": "If you are in a hurry and don't want to read the details below, here is a server configuration that should work for a small installation where no clustering is needed:   CPU: 2 x Intel i5-7600  RAM: 8 GB  Disk space: 256 GB  OS: CentOS 7.4 (with latest patches)  Docker: version 18.03.1-ce", 
            "title": "Example single-node server"
        }, 
        {
            "location": "/system-requirements/#software-requirements", 
            "text": "", 
            "title": "Software requirements"
        }, 
        {
            "location": "/system-requirements/#docker", 
            "text": "The minimum requirement is Docker 1.13, but we recommend always using the latest stable version, especially in multi-node clusters. Most Linux distributions have a mechanism for installing Docker straight from Docker Inc's own repositories, which is the recommended way.  Docker comes in the free Community Edition (CE) and the paid-for Enterprise Edition (EE). EBMeDS runs on both, although inexperienced Docker admins may find the support channel for Enterprise Edition helpful.", 
            "title": "Docker"
        }, 
        {
            "location": "/system-requirements/#operating-system", 
            "text": "EBMeDS requires Linux. Any of the Linux distributions with the official  Licensed Docker Infrastructure  mark works well, meaning either CentOS, Fedora, Debian or Ubuntu. Please see the  Docker documentation  for more details about specific versions and caveats.  Docker also runs natively on Windows, but note that so-called  Windows containers  are not supported. If you want to run EBMeDS on Windows, you must run Linux in a virtual machine.", 
            "title": "Operating system"
        }, 
        {
            "location": "/system-requirements/#elasticsearch", 
            "text": "The Elasticsearch database is an auxiliary service that is:   An  optional  location to store application logs  A  mandatory  location for storing  EBMeDS Population  data   In the reference installation, Elasticsearch is also run as a Docker container inside Docker Swarm, alongside the EBMeDS core services. However, Elasticsearch can also be installed more \"traditionally\", either on the same server or on a separate one. This may be an attractive option if you have an existing Elasticsearch installation available. Clustering is also easier to handle outside the Docker Swarm for high availability setups.  EBMeDS requires the 6.2.x version of Elasticsearch. See  the Elasticsearch documentation  for more details on operation and installation.  As mentioned, Elasticsearch is optional for storing application logs. In the reference installation, logs are stored here. But all the application logs are routed through  Logstash , which can be configured to store the data  in a multitude of ways , including as plain files on disk.  For population analysis, Elasticsearch (and Kibana) is still mandatory.", 
            "title": "Elasticsearch"
        }, 
        {
            "location": "/system-requirements/#hardware-requirements", 
            "text": "The hardware requirements of course rely on the scale of the installation. Below, we have listed recommendations for a single cluster node (or just a single server) when Elasticsearch is used, as per the reference installation. Should Elasticsearch be irrelevant for you, the changes in hardware requirements are noted separately below.", 
            "title": "Hardware requirements"
        }, 
        {
            "location": "/system-requirements/#cpu", 
            "text": "Any modern multicore x86_64 CPU is accepted. For performance, multiple cores are more important than higher clock rates.   Minimum requirement:  8 cores, ~3 GHz .  Example : 2 x Intel i5-7600 (2 x 4 cores)  Recommended:  16 cores, ~3 GHz .  Example : 2 x Intel i7-7820X (2 x 8 cores)", 
            "title": "CPU"
        }, 
        {
            "location": "/system-requirements/#ram", 
            "text": "Minimum requirement: 8 GB (4 GB without Elasticsearch)  Recommended: 16 GB (8 GB without Elasticsearch)", 
            "title": "RAM"
        }, 
        {
            "location": "/system-requirements/#disk-space", 
            "text": "The main things that take up disk space are:   Database contents, i.e. logs and population analysis data  Docker images, old versions can be saved and rollbacks performed if wanted.   If Elasticsearch is used, there should be a monitoring and archiving strategy for the data. Of course, this goes for any kind of logging solution.   Minimum requirement: 256 GB (128 GB without Elasticsearch)  Recommended: 512 GB (128 GB without Elasticsearch)", 
            "title": "Disk space:"
        }, 
        {
            "location": "/components/", 
            "text": "Components\n\n\n\n\nWhen fully deployed, the EBMeDS solution includes the components pictured above. Each component is a Docker container, inside a Docker Swarm. Any of these components can be replicated across several machines, as performance and availability needs dictate. Docker Swarm performs an automatic round-robin load balancing on every network request done to any container with multiple instances.\n\n\napi-gateway\n\n\nGithub: \n\n\nThe API gateway is the access point from the outside world. It mostly acts as a request broker, forwarding requests to the appropriate containers, usually the engine. At the moment, it also provides the translation services between FHIR and the EBMeDS native XML format. Another output option is a custom JSON format used by some EBMeDS-connected apps.\n\n\n\n\n\n\nInput: FHIR requests, EBMeDS XML requests.\n\n\n\n\n\n\nOutput: FHIR, EBMeDS XML, custom JSON formats.\n\n\n\n\n\n\nengine\n\n\nThe main service, performing most of the calculations when performing decision support. Takes patient XML data as an input, and outputs data to aid in clinical decision making. Most notably, text-based reminder messages. Also produces\n\n\n\n\n\n\nInput: EBMeDS XML\n\n\n\n\n\n\nOutput: EBMeDS XML, custom JSON formats\n\n\n\n\n\n\ncoaching\n\n\nAn ODA-specific container, may or may not be present in the future. A simple REST interface providing access to coaching programs produced by Duodecim. These programs are given in FHIR STU3 form, and contain a number of messages that are to be sent to a patient at set times to aid in e.g. weight loss, cutting down on alcohol consumtion etc.\n\n\n\n\n\n\nInput: HTTP REST requests.\n\n\n\n\n\n\nOutput: FHIR\n\n\n\n\n\n\ndiagnosis-specific-view\n\n\nA UI providing a specialised view of the results obtained from the engine, for a specific patient. This container works like a kind of proxy to the engine: instead of sending the XML with patient data to the engine, it is sent to this container. The request is sent onward to the engine with some special flags, making the engine produce a specialised JSON format, that this container renders as HTML for the user. The JSON can also be sent directly to the user, should he want to build his own UI.\n\n\n\n\n\n\nInput: EBMeDS XML\n\n\n\n\n\n\nOutput: HTML\n\n\n\n\n\n\ncomprehensive-medication-review\n\n\nSimilar to diagnosis-specific-view, this is another specialised UI view, focusing on medication.\n\n\n\n\n\n\nInput: EBMeDS XML\n\n\n\n\n\n\nOutput: HTML\n\n\n\n\n\n\nelasticsearch\n\n\nA standard Elasticsearch container, i.e. a database. Used for logging by all other containers (via logstash). Also, the engine saves request/response pairs to a separate index for debugging and statistics.\n\n\nIndices\n\n\n\n\nlogstash-*\n: app logs from all other containers\n\n\nengine-*\n: request/response messages\n\n\n\n\nlogstash\n\n\nA standard Logstash container. Logs from all other containers are sent here, where they are queued and tagged with some extra metadata.\n\n\nkibana\n\n\nA standard Kibana container. Kibana works as a web UI for inspecting logs or any other elasticsearch data. At the moment Kibana in EBMeDS is only geared towards use by system administrators and developers, but there is some demand for users to be able to access their own logs. It should be noted that with standard settings, Elasticsearch and Kibana have no user or namespace support, everything is global. This can be changed by getting an X-Pack license, which is costly.\n\n\nSupporting tools\n\n\nThere are a number of tools external to the EBMeDS deployment that is used primarily by Duodecim to produce content. These are hosted by Duodecim.\n\n\nScript editor\n\n\nURL: \n\n\nWeb-based UI for editing engine scripts (i.e. rulesets). Individual scripts can be set to apply to e.g. certain organizations, certain countries/languages or certain events. The text reminders are also defined here, as well as their translations.\n\n\nThis script editor will be replaced by a new version soon.\n\n\nCompilation\n\n\nThe scripts and their accompanying data is compiled from the script editor into text files that can be read by the engine. This compilation process also includes \"numerical\" medical data, i.e. databases of drug interactions etc. Some of this data is bought from other companies, some of it is produced in-house.", 
            "title": "Components"
        }, 
        {
            "location": "/components/#components", 
            "text": "When fully deployed, the EBMeDS solution includes the components pictured above. Each component is a Docker container, inside a Docker Swarm. Any of these components can be replicated across several machines, as performance and availability needs dictate. Docker Swarm performs an automatic round-robin load balancing on every network request done to any container with multiple instances.", 
            "title": "Components"
        }, 
        {
            "location": "/components/#api-gateway", 
            "text": "Github:   The API gateway is the access point from the outside world. It mostly acts as a request broker, forwarding requests to the appropriate containers, usually the engine. At the moment, it also provides the translation services between FHIR and the EBMeDS native XML format. Another output option is a custom JSON format used by some EBMeDS-connected apps.    Input: FHIR requests, EBMeDS XML requests.    Output: FHIR, EBMeDS XML, custom JSON formats.", 
            "title": "api-gateway"
        }, 
        {
            "location": "/components/#engine", 
            "text": "The main service, performing most of the calculations when performing decision support. Takes patient XML data as an input, and outputs data to aid in clinical decision making. Most notably, text-based reminder messages. Also produces    Input: EBMeDS XML    Output: EBMeDS XML, custom JSON formats", 
            "title": "engine"
        }, 
        {
            "location": "/components/#coaching", 
            "text": "An ODA-specific container, may or may not be present in the future. A simple REST interface providing access to coaching programs produced by Duodecim. These programs are given in FHIR STU3 form, and contain a number of messages that are to be sent to a patient at set times to aid in e.g. weight loss, cutting down on alcohol consumtion etc.    Input: HTTP REST requests.    Output: FHIR", 
            "title": "coaching"
        }, 
        {
            "location": "/components/#diagnosis-specific-view", 
            "text": "A UI providing a specialised view of the results obtained from the engine, for a specific patient. This container works like a kind of proxy to the engine: instead of sending the XML with patient data to the engine, it is sent to this container. The request is sent onward to the engine with some special flags, making the engine produce a specialised JSON format, that this container renders as HTML for the user. The JSON can also be sent directly to the user, should he want to build his own UI.    Input: EBMeDS XML    Output: HTML", 
            "title": "diagnosis-specific-view"
        }, 
        {
            "location": "/components/#comprehensive-medication-review", 
            "text": "Similar to diagnosis-specific-view, this is another specialised UI view, focusing on medication.    Input: EBMeDS XML    Output: HTML", 
            "title": "comprehensive-medication-review"
        }, 
        {
            "location": "/components/#elasticsearch", 
            "text": "A standard Elasticsearch container, i.e. a database. Used for logging by all other containers (via logstash). Also, the engine saves request/response pairs to a separate index for debugging and statistics.", 
            "title": "elasticsearch"
        }, 
        {
            "location": "/components/#indices", 
            "text": "logstash-* : app logs from all other containers  engine-* : request/response messages", 
            "title": "Indices"
        }, 
        {
            "location": "/components/#logstash", 
            "text": "A standard Logstash container. Logs from all other containers are sent here, where they are queued and tagged with some extra metadata.", 
            "title": "logstash"
        }, 
        {
            "location": "/components/#kibana", 
            "text": "A standard Kibana container. Kibana works as a web UI for inspecting logs or any other elasticsearch data. At the moment Kibana in EBMeDS is only geared towards use by system administrators and developers, but there is some demand for users to be able to access their own logs. It should be noted that with standard settings, Elasticsearch and Kibana have no user or namespace support, everything is global. This can be changed by getting an X-Pack license, which is costly.", 
            "title": "kibana"
        }, 
        {
            "location": "/components/#supporting-tools", 
            "text": "There are a number of tools external to the EBMeDS deployment that is used primarily by Duodecim to produce content. These are hosted by Duodecim.", 
            "title": "Supporting tools"
        }, 
        {
            "location": "/components/#script-editor", 
            "text": "URL:   Web-based UI for editing engine scripts (i.e. rulesets). Individual scripts can be set to apply to e.g. certain organizations, certain countries/languages or certain events. The text reminders are also defined here, as well as their translations.  This script editor will be replaced by a new version soon.", 
            "title": "Script editor"
        }, 
        {
            "location": "/components/#compilation", 
            "text": "The scripts and their accompanying data is compiled from the script editor into text files that can be read by the engine. This compilation process also includes \"numerical\" medical data, i.e. databases of drug interactions etc. Some of this data is bought from other companies, some of it is produced in-house.", 
            "title": "Compilation"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nThe main steps to installing EBMeDS 2.0 are the following:\n\n\n\n\nInstall prerequisites\n\n\nGet a Docker registry username from Duodecim\n\n\nPull the Docker images\n\n\nConfigure the individual Docker images\n\n\nConfigure the Docker Swarm\n\n\nStart up the Swarm\n\n\n\n\nThese steps are given in more detail below.\n\n\nInstall prerequisites\n\n\nEBMeDS 2.x only requires Docker. Docker runs on Linux, Windows and Mac, but Linux is recommended, since Docker runs Linux internally and thus running it on other platforms incurs a small performance hit. Note that Docker supports running Windows internally on newer versions of Windows Server, but this is not supported by EBMeDS.\n\n\nInstall Docker\n\n\nThe installation instructions for Docker itself can be found on e.g. \nDocker's site\n. We support version 1.12+.\n\n\nInstall Node.js (optional)\n\n\nYou will need Node.js to run the \nnpm [...]\n commands below. You can also run docker commands manually, removing the need for Node. The commands are defined in the file \npackage.json\n.\n\n\nDownload ebmeds-docker repository\n\n\nDownload the zip file from \nGithub\n (the \"Clone or download\" button) or if you have Git installed, run the \ngit clone\n command.\n\n\n# Get a copy of the EBMeDS Docker configuration\ngit clone https://github.com/ebmeds/ebmeds-docker.git\n\n\n\n\nThis repository does not contain the Docker images themselves, only startup scripts and configuration files. It also contains a sample \ndocker-compose.yml\n file to get a Docker Swarm up and running with minimal effort.\n\n\nGet a Docker registry username from Duodecim\n\n\nIf you don't already have it, you need a Duodecim-supplied username and password to be able to download the EBMeDS Docker images, which reside in a private repository at \nquay.io\n. The username is in the form \nduodecim+yourname\n.\n\n\nLogin to quay.io and pull the required images\n\n\nThe built Docker images are stored in a repository on quay.io. Vendor organizations are provided with a login username and password. Developers with access to the EBMeDS Github repos can build the images locally.\n\n\nPull the Docker images\n\n\n# Go to the downloaded ebmeds-docker repository\ncd /path/to/ebmeds-docker\n\n# Run script that downloads the latest stable version of the images\n./get-images.sh\n\n# OR if one wishes to use e.g. the latest unstable version\n./get-images.sh dev\n\n# OR if one wishes to use a specific old version (not recommended)\n./get-images.sh 2.0.1\n\n\n\n\nYou need the proper Docker images downloaded (\"pulled\") onto your server before running them. This is true for single-machine servers and for each node in larger clusters.\n\n\nThe \nget-images.sh\n script will ask for the username/password of the EBMeDS Docker registry located at \nquay.io\n. These credentials are supplied by Duodecim. It will then pull the appropriate docker images and tag them with the following names:\n\n\n\n\nengine\n\n\napi-gateway\n\n\nauth\n\n\ncoaching\n\n\nelastichsearch \n(vanilla)\n\n\nkibana \n(vanilla)\n\n\nlogstash \n(vanilla)\n\n\n\n\nThe last three images are the vanilla ELK stack, the rest are custom images.\n\n\nDeployment\n\n\nDocker 1.13+\n\n\n# In the ebmeds-docker root directory:\nnpm run docker:init    # init Docker Swarm if not already running.\nnpm run docker:start\n\n# to stop\nnpm run docker:stop\n\n# and to restart:\nnpm run docker:restart  # same as stop + start\n\n# to stop the entire Swarm\nnpm run docker:deinit   # not needed in most cases\n\n\n\n\nAssuming that the Docker images are available on the machine, there are a bunch of NPM scripts in \nebmeds-docker\n that can start and stop a simple Docker Swarm configuration. \ndocker:init\n starts up a Docker Swarm with one member: the local machine. It is also the master of the swarm. The command outputs an ID number that other machines can use to join the swarm, for multi-node cluster support. See the Docker documentation for more details on this. The \ndocker:start\n and \ndocker:stop\n commands start and stop the containers themselves. They are configured in \ndocker-compose.yml\n.\n\n\nDocker 1.12\n\n\n# Example of how to start a service manually\ndocker swarm init\ndocker network create --driver overlay ebmedsnet\ndocker service create \\\n  --name api-gateway \\\n  -e LISTEN_PORT=3001 \\\n  -e ENGINE_URL='http://engine:3002/dss.asp?mode=test' \\\n  --network ebmedsnet \\\n  --publish 3001:3001 \\\n  --replicas=3 \\\n  --update-delay 10s \\\n  --update-parallelism 1 \\\n  api-gateway\ndocker service create ...\n\n\n\n\nThe oldest supported version of Docker does not have support for Docker Compose files when used together with Docker Swarm. Therefore the command \nnpm run docker:start\n will not work, and the \ndocker-compose.yml\n file must be transformed into e.g. shell scripts that set up the services manually. For example, starting the \napi-gateway\n service manually (see the example) is a matter of setting environment variables, publishing a port, setting the number of replicas and optionally setting some update settings for Docker's rolling updates.\n\n\nBefore this the swarm must be initialized and the network ebmedsnet created (in this example). Also note that the environment variables used in this example are the ones found in \napi-gateway/config.env\n.\n\n\nConfiguration\n\n\nEnvironment variables\n\n\nAll configuration of the EBMeDS services (except the ELK stack) is done through environment variables. These are defined in the \nebmeds-docker\n directory at \nimage-name\n/config.env\n, i.e. each container is configured separately. The \n.env\n files contain comments describing the different options.\n\n\nDefault ports\n\n\nThe containers inside the Swarm are configured to listen to the following ports per default:\n\n\n\n\napi-gateway: 3001\n\n\nengine: 3002\n\n\ncoaching: 3003\n\n\nelasticsearch: 9200 (REST API), 9300 (node communication in clusters)\n\n\nlogstash: 5000 (TCP input)\n\n\nkibana: 5601\n\n\n\n\n\nThe above ports are not accessible outside of the swarm, except for \napi-gateway\n at port 3001 and \nkibana\n at port 5601. Port 3001 should therefore be open for general EBMeDS usage (see #Usage) and port 5601 is for log data analysis using the web UI in Kibana, which should be accessible only by trusted sources.\n\n\n\n\nFile system access\n\n\nDocker containers cannot per default persist data to disk, i.e. all changes to the container file system are lost when the container is shut down. Therefore, to be able to save data between restarts, the host system running Docker must mount its own directories on top of the file system inside of Docker, to \"catch\" the saved data. The table below lists the folders that are configured to be mounted onto various Docker containers ($ROOT is the path to the \nebmeds-docker\n project):\n\n\n\n\n\n\n\n\nDefault host directory (configurable)\n\n\nInternal Docker directory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n$ROOT/elasticsearch/data\n\n\n/usr/share/elasticsearch/data\n\n\nThe place where the Elasticsearch DB data lives (may get very large)\n\n\n\n\n\n\n$ROOT/logstash/pipeline\n\n\n/usr/share/logstash/pipeline\n\n\nHow Logstash should process the data flowing through it\n\n\n\n\n\n\n$ROOT/logstash/queue\n\n\n/usr/share/logstash/data/queue\n\n\nInstead of storing the input queue in memory, persist it to disk to avoid data loss\n\n\n\n\n\n\n$ROOT/logstash/config\n\n\n/usr/share/logstash/config\n\n\nGeneral configuration for the Logstash server process (usually no need to edit this)\n\n\n\n\n\n\n$ROOT/kibana/config/\n\n\n/usr/share/kibana/config\n\n\nGeneral configuration for the Kibana server process (usually no need to edit this)\n\n\n\n\n\n\n\n\nNote that the permissions must be set correctly for the host folders: the UID and GID should match the UID and GID that the user inside Docker has (which per default is 1000/1000). SELinux labels can also be used to avoid getting permission errors. Permissions on Windows/OSX will behave differently.\n\n\n\nAlso note that the Docker daemon itself will use the file system to store pulled images internally. These images are not removed by default when new versions are pulled, to support roll-backs of updates that are not working etc. The system administrator should keep in mind that the images will, in time, take up a lot of disk space, and steps should be taken to remove unused Docker images.\n\n\n\n\nAdvanced deployment\n\n\nThere are many advanced features of Docker that can be used to make the service more failsafe. This includes backups, monitoring, automatic node failure recovery etc. These advanced features should be implemented by a competent DevOps professional and is not covered in this documentation.\n\n\nVerifying the installation\n\n\nTo see that the installation is succesful, perform the checklist below. $HOST is the hostname of the server running the Swarm. It may also be localhost:\n\n\n\n\nMake a HTTP GET to $HOST:3001/status, you should receive the reply \"OK\".\n\n\nMake a HTTP POST to $HOST:3001/xml, with the payload of an EBMeDS XML request. You should receive an XML response.\n\n\nOpen up Kibana at $HOST:5601 and add the indexes \nlogstash\n and \nengine\n, if not already added.\n\n\nIn the \"Discover\" tab, check the \nlogstash\n index to see that logging from the various containers is working.\n\n\nIn the \"Discover\" tab, check the \nengine\n index to see that logging of request/response pairs is working (this kind of logging can be turned off).\n\n\nOn the host's filesystem, check that \n$ROOT/elasticsearch/data\n and \n$ROOT/logstash/queue\n (or what you have configured them to be) are being populated with files. If not, the folder mounts are not working, and any data saved to the Elasticsearch database will disappear when the \nelasticsearch\n container is stopped.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "The main steps to installing EBMeDS 2.0 are the following:   Install prerequisites  Get a Docker registry username from Duodecim  Pull the Docker images  Configure the individual Docker images  Configure the Docker Swarm  Start up the Swarm   These steps are given in more detail below.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#install-prerequisites", 
            "text": "EBMeDS 2.x only requires Docker. Docker runs on Linux, Windows and Mac, but Linux is recommended, since Docker runs Linux internally and thus running it on other platforms incurs a small performance hit. Note that Docker supports running Windows internally on newer versions of Windows Server, but this is not supported by EBMeDS.", 
            "title": "Install prerequisites"
        }, 
        {
            "location": "/installation/#install-docker", 
            "text": "The installation instructions for Docker itself can be found on e.g.  Docker's site . We support version 1.12+.", 
            "title": "Install Docker"
        }, 
        {
            "location": "/installation/#install-nodejs-optional", 
            "text": "You will need Node.js to run the  npm [...]  commands below. You can also run docker commands manually, removing the need for Node. The commands are defined in the file  package.json .", 
            "title": "Install Node.js (optional)"
        }, 
        {
            "location": "/installation/#download-ebmeds-docker-repository", 
            "text": "Download the zip file from  Github  (the \"Clone or download\" button) or if you have Git installed, run the  git clone  command.  # Get a copy of the EBMeDS Docker configuration\ngit clone https://github.com/ebmeds/ebmeds-docker.git  This repository does not contain the Docker images themselves, only startup scripts and configuration files. It also contains a sample  docker-compose.yml  file to get a Docker Swarm up and running with minimal effort.", 
            "title": "Download ebmeds-docker repository"
        }, 
        {
            "location": "/installation/#get-a-docker-registry-username-from-duodecim", 
            "text": "If you don't already have it, you need a Duodecim-supplied username and password to be able to download the EBMeDS Docker images, which reside in a private repository at  quay.io . The username is in the form  duodecim+yourname .", 
            "title": "Get a Docker registry username from Duodecim"
        }, 
        {
            "location": "/installation/#login-to-quayio-and-pull-the-required-images", 
            "text": "The built Docker images are stored in a repository on quay.io. Vendor organizations are provided with a login username and password. Developers with access to the EBMeDS Github repos can build the images locally.", 
            "title": "Login to quay.io and pull the required images"
        }, 
        {
            "location": "/installation/#pull-the-docker-images", 
            "text": "# Go to the downloaded ebmeds-docker repository\ncd /path/to/ebmeds-docker\n\n# Run script that downloads the latest stable version of the images\n./get-images.sh\n\n# OR if one wishes to use e.g. the latest unstable version\n./get-images.sh dev\n\n# OR if one wishes to use a specific old version (not recommended)\n./get-images.sh 2.0.1  You need the proper Docker images downloaded (\"pulled\") onto your server before running them. This is true for single-machine servers and for each node in larger clusters.  The  get-images.sh  script will ask for the username/password of the EBMeDS Docker registry located at  quay.io . These credentials are supplied by Duodecim. It will then pull the appropriate docker images and tag them with the following names:   engine  api-gateway  auth  coaching  elastichsearch  (vanilla)  kibana  (vanilla)  logstash  (vanilla)   The last three images are the vanilla ELK stack, the rest are custom images.", 
            "title": "Pull the Docker images"
        }, 
        {
            "location": "/installation/#deployment", 
            "text": "", 
            "title": "Deployment"
        }, 
        {
            "location": "/installation/#docker-113", 
            "text": "# In the ebmeds-docker root directory:\nnpm run docker:init    # init Docker Swarm if not already running.\nnpm run docker:start\n\n# to stop\nnpm run docker:stop\n\n# and to restart:\nnpm run docker:restart  # same as stop + start\n\n# to stop the entire Swarm\nnpm run docker:deinit   # not needed in most cases  Assuming that the Docker images are available on the machine, there are a bunch of NPM scripts in  ebmeds-docker  that can start and stop a simple Docker Swarm configuration.  docker:init  starts up a Docker Swarm with one member: the local machine. It is also the master of the swarm. The command outputs an ID number that other machines can use to join the swarm, for multi-node cluster support. See the Docker documentation for more details on this. The  docker:start  and  docker:stop  commands start and stop the containers themselves. They are configured in  docker-compose.yml .", 
            "title": "Docker 1.13+"
        }, 
        {
            "location": "/installation/#docker-112", 
            "text": "# Example of how to start a service manually\ndocker swarm init\ndocker network create --driver overlay ebmedsnet\ndocker service create \\\n  --name api-gateway \\\n  -e LISTEN_PORT=3001 \\\n  -e ENGINE_URL='http://engine:3002/dss.asp?mode=test' \\\n  --network ebmedsnet \\\n  --publish 3001:3001 \\\n  --replicas=3 \\\n  --update-delay 10s \\\n  --update-parallelism 1 \\\n  api-gateway\ndocker service create ...  The oldest supported version of Docker does not have support for Docker Compose files when used together with Docker Swarm. Therefore the command  npm run docker:start  will not work, and the  docker-compose.yml  file must be transformed into e.g. shell scripts that set up the services manually. For example, starting the  api-gateway  service manually (see the example) is a matter of setting environment variables, publishing a port, setting the number of replicas and optionally setting some update settings for Docker's rolling updates.  Before this the swarm must be initialized and the network ebmedsnet created (in this example). Also note that the environment variables used in this example are the ones found in  api-gateway/config.env .", 
            "title": "Docker 1.12"
        }, 
        {
            "location": "/installation/#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/installation/#environment-variables", 
            "text": "All configuration of the EBMeDS services (except the ELK stack) is done through environment variables. These are defined in the  ebmeds-docker  directory at  image-name /config.env , i.e. each container is configured separately. The  .env  files contain comments describing the different options.", 
            "title": "Environment variables"
        }, 
        {
            "location": "/installation/#default-ports", 
            "text": "The containers inside the Swarm are configured to listen to the following ports per default:   api-gateway: 3001  engine: 3002  coaching: 3003  elasticsearch: 9200 (REST API), 9300 (node communication in clusters)  logstash: 5000 (TCP input)  kibana: 5601   \nThe above ports are not accessible outside of the swarm, except for  api-gateway  at port 3001 and  kibana  at port 5601. Port 3001 should therefore be open for general EBMeDS usage (see #Usage) and port 5601 is for log data analysis using the web UI in Kibana, which should be accessible only by trusted sources.", 
            "title": "Default ports"
        }, 
        {
            "location": "/installation/#file-system-access", 
            "text": "Docker containers cannot per default persist data to disk, i.e. all changes to the container file system are lost when the container is shut down. Therefore, to be able to save data between restarts, the host system running Docker must mount its own directories on top of the file system inside of Docker, to \"catch\" the saved data. The table below lists the folders that are configured to be mounted onto various Docker containers ($ROOT is the path to the  ebmeds-docker  project):     Default host directory (configurable)  Internal Docker directory  Description      $ROOT/elasticsearch/data  /usr/share/elasticsearch/data  The place where the Elasticsearch DB data lives (may get very large)    $ROOT/logstash/pipeline  /usr/share/logstash/pipeline  How Logstash should process the data flowing through it    $ROOT/logstash/queue  /usr/share/logstash/data/queue  Instead of storing the input queue in memory, persist it to disk to avoid data loss    $ROOT/logstash/config  /usr/share/logstash/config  General configuration for the Logstash server process (usually no need to edit this)    $ROOT/kibana/config/  /usr/share/kibana/config  General configuration for the Kibana server process (usually no need to edit this)     Note that the permissions must be set correctly for the host folders: the UID and GID should match the UID and GID that the user inside Docker has (which per default is 1000/1000). SELinux labels can also be used to avoid getting permission errors. Permissions on Windows/OSX will behave differently.  \nAlso note that the Docker daemon itself will use the file system to store pulled images internally. These images are not removed by default when new versions are pulled, to support roll-backs of updates that are not working etc. The system administrator should keep in mind that the images will, in time, take up a lot of disk space, and steps should be taken to remove unused Docker images.", 
            "title": "File system access"
        }, 
        {
            "location": "/installation/#advanced-deployment", 
            "text": "There are many advanced features of Docker that can be used to make the service more failsafe. This includes backups, monitoring, automatic node failure recovery etc. These advanced features should be implemented by a competent DevOps professional and is not covered in this documentation.", 
            "title": "Advanced deployment"
        }, 
        {
            "location": "/installation/#verifying-the-installation", 
            "text": "To see that the installation is succesful, perform the checklist below. $HOST is the hostname of the server running the Swarm. It may also be localhost:   Make a HTTP GET to $HOST:3001/status, you should receive the reply \"OK\".  Make a HTTP POST to $HOST:3001/xml, with the payload of an EBMeDS XML request. You should receive an XML response.  Open up Kibana at $HOST:5601 and add the indexes  logstash  and  engine , if not already added.  In the \"Discover\" tab, check the  logstash  index to see that logging from the various containers is working.  In the \"Discover\" tab, check the  engine  index to see that logging of request/response pairs is working (this kind of logging can be turned off).  On the host's filesystem, check that  $ROOT/elasticsearch/data  and  $ROOT/logstash/queue  (or what you have configured them to be) are being populated with files. If not, the folder mounts are not working, and any data saved to the Elasticsearch database will disappear when the  elasticsearch  container is stopped.", 
            "title": "Verifying the installation"
        }, 
        {
            "location": "/api/fhir/getting-started/", 
            "text": "FHIR STU3 API\n\n\nGetting started\n\n\nEBMeDS can be used with the \nHL7 FHIR STU3\n format. The main unit of information in FHIR is the \nresource\n, which is a JSON object with a particular type. FHIR can also be expressed in XML form, but this is not supported by EBMeDS.\n\n\nOne can interact with EBMeDS using FHIR in the following ways:\n\n\n\n\nCalling decision support\n: We use the \nCDS Hooks\n standard as the communication model.\n\n\nCustom REST API\n: We provide a REST interface to retrieve static FHIR resources (Questionnaire, PlanDefinition, Goal)\n\n\n\n\nCommunication model\n\n\nEBMeDS 2.0 is completely stateless and synchronous. In other words, each request to EBMeDS receives a response, and the response contents do not depend on previous requests. This also means that EBMeDS only operates on the data that is present in the request, combining it with the clinical knowledge base produced by Duodecim.\n\n\nThe most common way of using EBMeDS is sending a request containing some clinical data about a patient. After analysis of this data, EBMeDS returns \ndecision support information\n, i.e. messages to be shown to either the patient or a medical professional. Depending on the use case, EBMeDS may also suggest specific actions to be done, actions that are codified using a code system. The caller may then display the messages using a UI of choice, and potentially arrange for automated or semi-automated execution of the attached actions.\n\n\nThe request is given a semantic context using \nCDS hooks\n. Regardless of the context, the general structure of the request and response is the same: one or more FHIR resources. See the \nCDS hook catalog\n to see which resources are used in which context, and the \nFHIR resource listing\n for more details on the individual resources.\n\n\nVersioning\n\n\nThere are four major versioning schemes in EBMeDS 2.0:\n\n\n\n\nThe overall software version\n. Changes with new releases of the software. (Version format: semver)\n\n\nThe clinical data version\n. All internal data in EBMeDS is versioned using one version number. This includes the rulesets, drug data, translations etc. (Version format: semver)\n\n\nThe API versions\n: At the moment EBMeDS supports XML and FHIR STU3 (JSON). These APIs are versioned separately. Newer software versions will support old interfaces for as long as technically feasible. (Version format: semver for XML, whole integers for FHIR)\n\n\nDistributed artifact versions\n. Some artifacts are distributed to customers so they can be potentially used outside of EBMeDS, for example FHIR Questionnaires. These follow their own versioning scheme that is mappable to the clinical data version scheme if required. (Version format: whole integers)\n\n\n\n\nExamples\n\n\nThe easiest way to see EBMeDS 2.0 in action is by example. We therefore provide a collection of examples in the \nPostman Collection v2.1 format\n. These can be imported into the Postman app or explored by hand.\n\n\nDownload the package here: \nEBMeDS FHIR examples v1.0", 
            "title": "Getting started"
        }, 
        {
            "location": "/api/fhir/getting-started/#fhir-stu3-api", 
            "text": "", 
            "title": "FHIR STU3 API"
        }, 
        {
            "location": "/api/fhir/getting-started/#getting-started", 
            "text": "EBMeDS can be used with the  HL7 FHIR STU3  format. The main unit of information in FHIR is the  resource , which is a JSON object with a particular type. FHIR can also be expressed in XML form, but this is not supported by EBMeDS.  One can interact with EBMeDS using FHIR in the following ways:   Calling decision support : We use the  CDS Hooks  standard as the communication model.  Custom REST API : We provide a REST interface to retrieve static FHIR resources (Questionnaire, PlanDefinition, Goal)", 
            "title": "Getting started"
        }, 
        {
            "location": "/api/fhir/getting-started/#communication-model", 
            "text": "EBMeDS 2.0 is completely stateless and synchronous. In other words, each request to EBMeDS receives a response, and the response contents do not depend on previous requests. This also means that EBMeDS only operates on the data that is present in the request, combining it with the clinical knowledge base produced by Duodecim.  The most common way of using EBMeDS is sending a request containing some clinical data about a patient. After analysis of this data, EBMeDS returns  decision support information , i.e. messages to be shown to either the patient or a medical professional. Depending on the use case, EBMeDS may also suggest specific actions to be done, actions that are codified using a code system. The caller may then display the messages using a UI of choice, and potentially arrange for automated or semi-automated execution of the attached actions.  The request is given a semantic context using  CDS hooks . Regardless of the context, the general structure of the request and response is the same: one or more FHIR resources. See the  CDS hook catalog  to see which resources are used in which context, and the  FHIR resource listing  for more details on the individual resources.", 
            "title": "Communication model"
        }, 
        {
            "location": "/api/fhir/getting-started/#versioning", 
            "text": "There are four major versioning schemes in EBMeDS 2.0:   The overall software version . Changes with new releases of the software. (Version format: semver)  The clinical data version . All internal data in EBMeDS is versioned using one version number. This includes the rulesets, drug data, translations etc. (Version format: semver)  The API versions : At the moment EBMeDS supports XML and FHIR STU3 (JSON). These APIs are versioned separately. Newer software versions will support old interfaces for as long as technically feasible. (Version format: semver for XML, whole integers for FHIR)  Distributed artifact versions . Some artifacts are distributed to customers so they can be potentially used outside of EBMeDS, for example FHIR Questionnaires. These follow their own versioning scheme that is mappable to the clinical data version scheme if required. (Version format: whole integers)", 
            "title": "Versioning"
        }, 
        {
            "location": "/api/fhir/getting-started/#examples", 
            "text": "The easiest way to see EBMeDS 2.0 in action is by example. We therefore provide a collection of examples in the  Postman Collection v2.1 format . These can be imported into the Postman app or explored by hand.  Download the package here:  EBMeDS FHIR examples v1.0", 
            "title": "Examples"
        }, 
        {
            "location": "/api/fhir/cds-hooks/", 
            "text": "CDS Hooks\n\n\nEBMeDS uses a slightly customized version of the \nCDS Hooks\n standard. This standard is still in flux and will soon reach its 1.0 version, at which point these customizations will be re-evaluated.\n\n\nThe overall point of CDS hooks is that the calling party calls EBMeDS using three pieces of information:\n\n\n\n\nThe REST endpoint name (the \"hook ID\"), giving the high-level context, e.g. \nselfcare-questionnaire-filled\n.\n\n\nThe hook name, providing the action/event that triggered this particular call, e.g. \nquestionnaire-completed\n.\n\n\nThe clinical data specified in the \nEBMeDS hook catalog\n.\n\n\n\n\nThis enables EBMeDS to tailor its output depending on the usage context, and also to provide a machine-readable format for what data is required. The context itself is not machine-readable, i.e. it is described by natural language, but some \nstandardized hooks exist\n.\n\n\nDifferences between the EBMeDS implementation and the current CDS hooks documentation\n:\n\n\n\n\nThe \nprefetch\n field is used widely in EBMeDS at the moment. However, this field is intended to be used as an optional performance enhancement, i.e. the assumed data model in CDS hooks is that the CDS system has access to the calling party's FHIR server, from which it can read the clinical data by itself, if the data is not provided in \nprefetch\n. However, in EBMeDS, the \nprefetch\n field is mandatory at this moment. The \ncontext\n field will be used exclusively in the future.\n\n\nThe response format in CDS hooks is in the form of \ncards\n. The card is a simple container for a message string (and some metadata) and is therefore usually not flexible enough to contain things like specifying the recipient of the message. Therefore, the meat of the response is located in the \nsuggestions\n field, which contains an array of FHIR resources, not the structure with different action types (\ncreate\n, \nupdate\n, \ndelete\n) that is described in the standard. All FHIR resources in the \nsuggestions\n array are implicitly of the \ncreate\n type at this moment.\n\n\nWhen calling a hook, the \ncontext\n field is currently specified as an array of objects in the standard. This is going to change in version 1.0 of the standard into a simple object. EBMeDS already uses this.\n\n\nThe \ncontext\n field will work like a \"mandatory \nprefetch\n\" in CDS hooks 1.0, and will be described in the same way in the hook catalog, i.e. using FHIR search strings. EBMeDS also uses \ncontext\n for setting some options, i.e. \ndataVersion\n, which specifies which version of the internal clinical datasets EBMeDS should use. This is in no way describable by a FHIR search string.\n\n\nIn \nprefetch\n (or \ncontext\n), most of the FHIR search strings return a Bundle, not an individual resource (like QuestionnaireResponse). However, EBMeDS supports returning an individual resource instead of a Bundle of length one. Bundles will be required in the future.\n\n\n\n\nCDS hooks REST API\n\n\nThe REST API for CDS hooks is very simple. One can \nGET\n the list of available hooks (the \"hook catalog\") from \n[base-url]/cds-services\n, and one calls a hook by \nPOST\ning to \n[base-url]/cds-services/[hook-name]\n. The base URL depends on where and how EBMeDS is installed: one example is \nhttps://ebmedscloud.org/api/fhir/v1\n.\n\n\nHook description format\n\n\nWe will continue with the \nquestionnaire-completed\n example mentioned briefly above. The EBMeDS hook catalog specifies this kind of hook:\n\n\n{\n  \nid\n: \nselfcare-filled-questionnaire\n,\n  \nhook\n: \nquestionnaire-completed\n,\n  \nname\n: \nSelf-care questionnaire analysis service\n,\n  \ndescription\n: \nA hook for when a FHIR QuestionnaireResponse filled out by a patient/citizen is available for EBMeDS to process. The response may include directions both for the patient himself, and a medical professional.\n,\n  \nprefetch\n: {\n    \nquestionnaireResponse\n: \n/QuestionnaireResponse?patient={{Patient.id}}\n\n  }\n}\n\n\n\n\nSo what does this mean? Let's go through the hook description field by field:\n\n\n\n\nid\n: Again, the main identifier for the hook in question. This field determines the URL used when calling the hook, e.g. \nhttps://ebmedscloud.org/api/fhir/v1/cds-services/selfcare-filled-questionnaire\n. At the same time, the \nid\n provides the most high level context for this hook. The value is unique.\n\n\nhook\n: The action or event that triggers this hook. The \nhook\n value is not unique, there may be many different CDS hooks (at different REST endpoints i.e. with a different \nid\n) that all have the same \nhook\n value. The idea is to develop a standardized set of hooks that behave the same in any CDS system. In this case, \nquestionnaire-completed\n is a non-standard hook, specific to EBMeDS.\n\n\nname\n: A short description of the hook.\n\n\ndescription\n: A longer description of the hook.\n\n\nprefetch\n: This field is an object, each property within that object acts as a label for a set of FHIR resources, obtained by performing the FHIR search provided in the property value. It is not mandatory to use the search string (e.g. if you do not have a FHIR server), but it does specify the format of the data to be put in the request. \nNOTE\n: as mentioned, the prefetch fields are mandatory in EBMeDS, but not in the CDS hooks standard.\n\n\nprefetch.questionnaireResponse\n: In this example, there is only one piece of data needed for the CDS hook call. This data is the FHIR resource called QuestionnaireResponse that has presumably just been filled out by the patient in question (identified by \n{{Patient.id}}\n). The property name \nquestionnaireResponse\n is the label given this piece of data. This label will also be used when calling the CDS hook (see below).\n\n\n\n\n\n\n\n\nCalling a hook\n\n\nSo, given the hook description above, we can call the hook. The format is, quite simply:\n\n\n{\n  \nhook\n: \nquestionnaire-completed\n,\n  \nprefetch\n: {\n    \nquestionnaireResponse\n: {\n      \nresource\n: { QuestionnaireResponse... }\n    }\n  },\n  \ncontext\n: {\n    \ndataVersion\n: \nlatest\n\n  }\n}\n\n\n\n\n\n\nhook\n: The same value as in the hook description.\n\n\nprefetch\n: Contains the same properties as in the hook description. In this case, the wanted QuestionnaireResponse resource is in \nprefetch.questionnaireResponse.resource\n.\n\n\nQuestionnaireResponse...\n: Omitted for brevity, this is where the actual FHIR resource is. In this case it is a QuestionnaireResponse, so it starts with \n{ \"resourceType\": \"QuestionnaireResponse\" ...\n etc. See the \nFHIR resource page\n for a closer description of the resource, among many others.\n\n\ncontext\n: Depending on the hook, this may contain other properties, but one (optional) property is \ncontext.dataVersion\n. \ndataVersion\n is a string containing the wanted version of the clinical data that EBMeDS uses for processing. If the value is \nlatest\n or the field is missing, EBMeDS uses the latest version. The usage of older versions is not recommended, except for very specific use cases.\n\n\n\n\nHook response\n\n\nEBMeDS uses two patterns for CDS hook responses. The first pattern is a traditional approach, well suited for the CDS hooks standard. The second pattern is customized for the selfcare context. The example above, as you may remember, is in the selfcare context, so the call above will return the second pattern. More details below.\n\n\nTraditional response (to be implemented)\n\n\nTraditional CDS is focused on providing one or more text-based messages to a clinical professional, sometimes accompanied by some suggested actions, identified by a code. Each message, or \nreminder\n, is independent of the others, i.e. the same actions may be suggested in multiple reminders. It is up to the calling party to handle a user-friendly display of the information, potentially removing duplicate suggested actions, rendering different kinds of messages in different ways etc. An example, showing two reminders, is the following:\n\n\n{\n  \ncards\n: [\n    {\n      \nsummary\n: \nDecreased renal function, switch tiatside to furosemide?\n,\n      \ndetail\n: \nRenal function is decreased (eGFR 21 ml/min 16.10.2017). Tiatsides lose their effect when GFR \n 30 ml/min. Consider switching to furosemide.\n,\n      \nindicator\n: \ninfo\n,\n      \nsource\n: {\n        \nname\n: \nEBMeDS v2.0.6\n,\n        \nurl\n: \nhttps://ebmeds.org/version/v2.0.6/data-version/v0.9.2\n\n      },\n      \nsuggestions\n: [\n        { ActivityDefinition... },\n        { ActivityDefinition... },\n        ...\n      ]\n    },\n    {\n      \nsummary\n: \nHigh ferritinine (355 ug/l 15.10.2017) - hemocromatosis?\n,\n      \ndetail\n: \nHigh ferritinine concentration (355 ug/l 15.10.2017): Consider the possibility of hemocromatosis. Ferritinine concentration may also be elevated due to infection or liver disease.\n,\n      \nindicator\n: \ninfo\n,\n      \nsource\n: {\n        \nname\n: \nEBMeDS v2.0.6\n,\n        \nurl\n: \nhttps://ebmeds.org/version/v2.0.6/data-version/v0.9.2\n\n      },\n      \nsuggestions\n: [\n        { ActivityDefinition... },\n        { ActivityDefinition... },\n        ...\n      ]\n    }\n  ]\n}\n\n\n\n\nAgain, \nActivityDefinition...\n signifies a FHIR resource that is omitted for brevity.\n\n\n\n\ncards\n: Array of one or more card structures, containing a message, importance level, source data and suggested actions.\n\n\nsummary\n: The short version of the reminder. Good to display in lists etc.\n\n\ndetail\n: The complete message. Usually only a simple text string, but Github-flavored Markdown is supported.\n\n\nindicator\n: One of \ninfo\n, \nwarning\n, \nhard-stop\n. Instructs the calling party how important the reminder is.\n\n\nsource\n: Contains properties \nname\n and \nurl\n, giving info about the EBMeDS version as well as the clinical data version used for generating the reminders.\n\n\nsuggestions\n: An array (non-standard CDS hooks) containing zero or more FHIR resources. These resources are to be considered as \ncreate\n-type resources, refer to the CDS hooks documentation for more information. These suggestions are not duplicates within one cards, but several cards may contain the same suggestion.\n\n\n\n\nThese cards are to be displayed by the calling party in a manner they see fit. Refer to the documentation of individual hooks regarding the formats and codings for suggested actions.\n\n\nCustom self-care card format\n\n\nThe self-care context poses some unique challenges. Originally created for a national project in Finland, these CDS cards are required to leave nothing to chance, since most parts of the self-care project in question are automated, without human intervention. In other words, the card format is too vague to offer much help, and all human-readable data is stripped out of it. Instead, the data is all in coded form inside \nsuggestions\n, more specifically in the form of ActivityDefinition resources. Please refer to the \nselfcare-*\n hooks in the hook catalog.\n\n\n{\n  \ncards\n: [\n    {\n      \nsource\n: {\n        \nname\n: \nEBMeDS v0.9.6\n,\n        \nurl\n: \nhttps://ebmeds.org/version/v0.9.6/data-version/v0.9.2\n\n      },\n      \nsuggestions\n: [\n        { ActivityDefinition... },\n        { ActivityDefinition... },\n        ...\n      ]\n    }\n  ]\n}", 
            "title": "CDS hooks"
        }, 
        {
            "location": "/api/fhir/cds-hooks/#cds-hooks", 
            "text": "EBMeDS uses a slightly customized version of the  CDS Hooks  standard. This standard is still in flux and will soon reach its 1.0 version, at which point these customizations will be re-evaluated.  The overall point of CDS hooks is that the calling party calls EBMeDS using three pieces of information:   The REST endpoint name (the \"hook ID\"), giving the high-level context, e.g.  selfcare-questionnaire-filled .  The hook name, providing the action/event that triggered this particular call, e.g.  questionnaire-completed .  The clinical data specified in the  EBMeDS hook catalog .   This enables EBMeDS to tailor its output depending on the usage context, and also to provide a machine-readable format for what data is required. The context itself is not machine-readable, i.e. it is described by natural language, but some  standardized hooks exist .  Differences between the EBMeDS implementation and the current CDS hooks documentation :   The  prefetch  field is used widely in EBMeDS at the moment. However, this field is intended to be used as an optional performance enhancement, i.e. the assumed data model in CDS hooks is that the CDS system has access to the calling party's FHIR server, from which it can read the clinical data by itself, if the data is not provided in  prefetch . However, in EBMeDS, the  prefetch  field is mandatory at this moment. The  context  field will be used exclusively in the future.  The response format in CDS hooks is in the form of  cards . The card is a simple container for a message string (and some metadata) and is therefore usually not flexible enough to contain things like specifying the recipient of the message. Therefore, the meat of the response is located in the  suggestions  field, which contains an array of FHIR resources, not the structure with different action types ( create ,  update ,  delete ) that is described in the standard. All FHIR resources in the  suggestions  array are implicitly of the  create  type at this moment.  When calling a hook, the  context  field is currently specified as an array of objects in the standard. This is going to change in version 1.0 of the standard into a simple object. EBMeDS already uses this.  The  context  field will work like a \"mandatory  prefetch \" in CDS hooks 1.0, and will be described in the same way in the hook catalog, i.e. using FHIR search strings. EBMeDS also uses  context  for setting some options, i.e.  dataVersion , which specifies which version of the internal clinical datasets EBMeDS should use. This is in no way describable by a FHIR search string.  In  prefetch  (or  context ), most of the FHIR search strings return a Bundle, not an individual resource (like QuestionnaireResponse). However, EBMeDS supports returning an individual resource instead of a Bundle of length one. Bundles will be required in the future.", 
            "title": "CDS Hooks"
        }, 
        {
            "location": "/api/fhir/cds-hooks/#cds-hooks-rest-api", 
            "text": "The REST API for CDS hooks is very simple. One can  GET  the list of available hooks (the \"hook catalog\") from  [base-url]/cds-services , and one calls a hook by  POST ing to  [base-url]/cds-services/[hook-name] . The base URL depends on where and how EBMeDS is installed: one example is  https://ebmedscloud.org/api/fhir/v1 .", 
            "title": "CDS hooks REST API"
        }, 
        {
            "location": "/api/fhir/cds-hooks/#hook-description-format", 
            "text": "We will continue with the  questionnaire-completed  example mentioned briefly above. The EBMeDS hook catalog specifies this kind of hook:  {\n   id :  selfcare-filled-questionnaire ,\n   hook :  questionnaire-completed ,\n   name :  Self-care questionnaire analysis service ,\n   description :  A hook for when a FHIR QuestionnaireResponse filled out by a patient/citizen is available for EBMeDS to process. The response may include directions both for the patient himself, and a medical professional. ,\n   prefetch : {\n     questionnaireResponse :  /QuestionnaireResponse?patient={{Patient.id}} \n  }\n}  So what does this mean? Let's go through the hook description field by field:   id : Again, the main identifier for the hook in question. This field determines the URL used when calling the hook, e.g.  https://ebmedscloud.org/api/fhir/v1/cds-services/selfcare-filled-questionnaire . At the same time, the  id  provides the most high level context for this hook. The value is unique.  hook : The action or event that triggers this hook. The  hook  value is not unique, there may be many different CDS hooks (at different REST endpoints i.e. with a different  id ) that all have the same  hook  value. The idea is to develop a standardized set of hooks that behave the same in any CDS system. In this case,  questionnaire-completed  is a non-standard hook, specific to EBMeDS.  name : A short description of the hook.  description : A longer description of the hook.  prefetch : This field is an object, each property within that object acts as a label for a set of FHIR resources, obtained by performing the FHIR search provided in the property value. It is not mandatory to use the search string (e.g. if you do not have a FHIR server), but it does specify the format of the data to be put in the request.  NOTE : as mentioned, the prefetch fields are mandatory in EBMeDS, but not in the CDS hooks standard.  prefetch.questionnaireResponse : In this example, there is only one piece of data needed for the CDS hook call. This data is the FHIR resource called QuestionnaireResponse that has presumably just been filled out by the patient in question (identified by  {{Patient.id}} ). The property name  questionnaireResponse  is the label given this piece of data. This label will also be used when calling the CDS hook (see below).", 
            "title": "Hook description format"
        }, 
        {
            "location": "/api/fhir/cds-hooks/#calling-a-hook", 
            "text": "So, given the hook description above, we can call the hook. The format is, quite simply:  {\n   hook :  questionnaire-completed ,\n   prefetch : {\n     questionnaireResponse : {\n       resource : { QuestionnaireResponse... }\n    }\n  },\n   context : {\n     dataVersion :  latest \n  }\n}   hook : The same value as in the hook description.  prefetch : Contains the same properties as in the hook description. In this case, the wanted QuestionnaireResponse resource is in  prefetch.questionnaireResponse.resource .  QuestionnaireResponse... : Omitted for brevity, this is where the actual FHIR resource is. In this case it is a QuestionnaireResponse, so it starts with  { \"resourceType\": \"QuestionnaireResponse\" ...  etc. See the  FHIR resource page  for a closer description of the resource, among many others.  context : Depending on the hook, this may contain other properties, but one (optional) property is  context.dataVersion .  dataVersion  is a string containing the wanted version of the clinical data that EBMeDS uses for processing. If the value is  latest  or the field is missing, EBMeDS uses the latest version. The usage of older versions is not recommended, except for very specific use cases.", 
            "title": "Calling a hook"
        }, 
        {
            "location": "/api/fhir/cds-hooks/#hook-response", 
            "text": "EBMeDS uses two patterns for CDS hook responses. The first pattern is a traditional approach, well suited for the CDS hooks standard. The second pattern is customized for the selfcare context. The example above, as you may remember, is in the selfcare context, so the call above will return the second pattern. More details below.", 
            "title": "Hook response"
        }, 
        {
            "location": "/api/fhir/cds-hooks/#traditional-response-to-be-implemented", 
            "text": "Traditional CDS is focused on providing one or more text-based messages to a clinical professional, sometimes accompanied by some suggested actions, identified by a code. Each message, or  reminder , is independent of the others, i.e. the same actions may be suggested in multiple reminders. It is up to the calling party to handle a user-friendly display of the information, potentially removing duplicate suggested actions, rendering different kinds of messages in different ways etc. An example, showing two reminders, is the following:  {\n   cards : [\n    {\n       summary :  Decreased renal function, switch tiatside to furosemide? ,\n       detail :  Renal function is decreased (eGFR 21 ml/min 16.10.2017). Tiatsides lose their effect when GFR   30 ml/min. Consider switching to furosemide. ,\n       indicator :  info ,\n       source : {\n         name :  EBMeDS v2.0.6 ,\n         url :  https://ebmeds.org/version/v2.0.6/data-version/v0.9.2 \n      },\n       suggestions : [\n        { ActivityDefinition... },\n        { ActivityDefinition... },\n        ...\n      ]\n    },\n    {\n       summary :  High ferritinine (355 ug/l 15.10.2017) - hemocromatosis? ,\n       detail :  High ferritinine concentration (355 ug/l 15.10.2017): Consider the possibility of hemocromatosis. Ferritinine concentration may also be elevated due to infection or liver disease. ,\n       indicator :  info ,\n       source : {\n         name :  EBMeDS v2.0.6 ,\n         url :  https://ebmeds.org/version/v2.0.6/data-version/v0.9.2 \n      },\n       suggestions : [\n        { ActivityDefinition... },\n        { ActivityDefinition... },\n        ...\n      ]\n    }\n  ]\n}  Again,  ActivityDefinition...  signifies a FHIR resource that is omitted for brevity.   cards : Array of one or more card structures, containing a message, importance level, source data and suggested actions.  summary : The short version of the reminder. Good to display in lists etc.  detail : The complete message. Usually only a simple text string, but Github-flavored Markdown is supported.  indicator : One of  info ,  warning ,  hard-stop . Instructs the calling party how important the reminder is.  source : Contains properties  name  and  url , giving info about the EBMeDS version as well as the clinical data version used for generating the reminders.  suggestions : An array (non-standard CDS hooks) containing zero or more FHIR resources. These resources are to be considered as  create -type resources, refer to the CDS hooks documentation for more information. These suggestions are not duplicates within one cards, but several cards may contain the same suggestion.   These cards are to be displayed by the calling party in a manner they see fit. Refer to the documentation of individual hooks regarding the formats and codings for suggested actions.", 
            "title": "Traditional response (to be implemented)"
        }, 
        {
            "location": "/api/fhir/cds-hooks/#custom-self-care-card-format", 
            "text": "The self-care context poses some unique challenges. Originally created for a national project in Finland, these CDS cards are required to leave nothing to chance, since most parts of the self-care project in question are automated, without human intervention. In other words, the card format is too vague to offer much help, and all human-readable data is stripped out of it. Instead, the data is all in coded form inside  suggestions , more specifically in the form of ActivityDefinition resources. Please refer to the  selfcare-*  hooks in the hook catalog.  {\n   cards : [\n    {\n       source : {\n         name :  EBMeDS v0.9.6 ,\n         url :  https://ebmeds.org/version/v0.9.6/data-version/v0.9.2 \n      },\n       suggestions : [\n        { ActivityDefinition... },\n        { ActivityDefinition... },\n        ...\n      ]\n    }\n  ]\n}", 
            "title": "Custom self-care card format"
        }, 
        {
            "location": "/api/fhir/hook-catalog/", 
            "text": "EBMeDS Hook Catalog\n\n\nBelow we list the available CDS hook endpoints, i.e. the REST endpoints at \n[base-url]/cds-services/[endpoint]\n.\n\n\nNote\n: the FHIR resources to be included in the request are listed (per the CDS hooks standard) as FHIR search strings. However, there is sometimes not enough granularity available in FHIR STU3 searches to specify exactly what is needed. Be aware of this when reading the service descriptions below.\n\n\n/selfcare-filled-questionnaire\n\n\nHook: 'questionnaire-completed'\n\n\nThis hook is intended for the self-care context, where an individual (either by himself or with the assistance of a healthcare professional) fills in a form related to his or her health. This might be a questionnaire about the person's symptoms, a questionnaire calculating lifestyle-related health risks, etc. The responses are encoded into a FHIR QuestionnaireResponse. EBMeDS responds with ActivityDefinitions that include coded actions available for the individual, e.g. the reservation of a time for a lab test, visit to the doctor, etc. A special ActivityDefinition is provided containing reminder texts, instead of the texts being in the CDS hook cards.\n\n\nUsed FHIR resources\n\n\n\n\nRequest\n\n\nSelfCareQuestionnaireResponse\n (profile of QuestionnaireResponse)\n\n\n\n\n\n\nResponse\n\n\nSelfCareActivityDefinition\n\n\nSelfCareObservation (optional)\n\n\nSelfCareRiskAssessment (optional)\n\n\n\n\n\n\n\n\nVersioning info\n\n\nThe version of the Questionnaire resource is tightly bound to the version of the ruleset used in EBMeDS to analyze the QuestionnaireResponse. Therefore the Questionnaire version (along with the Questionnaire ID itself) must be specified in the QuestionnaireResponse. The Questionnaire resource contains the \nQuestionnaire.url\n field which is globally unique. That URL shall be included in the QuestionnaireResponse in the \nQuestionnaireResponse.questionnaire.reference\n field, which gives EBMeDS enough info to infer the version information.\n\n\nNote that old Questionnaire versions will not be supported indefinitely, and it is strongly recommended to always use the latest available questionnaire version for a given questionnaire. It is up to the calling party to make sure that the newest version is in use, information about new releases are provided by Duodecim using a mechanism agreed upon with the customer.\n\n\nService description\n\n\n{\n  \nid\n: \nselfcare-filled-questionnaire\n,\n  \nhook\n: \nquestionnaire-completed\n,\n  \nname\n: \nSelf-care questionnaire analysis service\n,\n  \ndescription\n: \nA hook for when a FHIR QuestionnaireResponse filled out by a patient/citizen is available for EBMeDS to process. The response may include directions both for the patient himself, and a medical professional.\n,\n  \nprefetch\n: {\n    \nquestionnaireResponse\n: \n/QuestionnaireResponse?patient={{Patient.id}}\n\n  }\n}\n\n\n\n\nExample request\n\n\n{\n  \nhook\n: \nquestionnaire-completed\n,\n  \ncontext\n: {\n    \ndataVersion\n: \nlatest\n\n  },\n  \nprefetch\n: {\n    \nquestionnaireResponse\n: {\n      \nresource\n: {\n        \nresourceType\n: \nQuestionnaireResponse\n,\n        \nquestionnaire\n: {\n          \nurl\n: \nhttps://www.ebmeds.org/form/api/FHIR/forms/export/21/622\n\n        },\n        \nstatus\n: \ncompleted\n,\n        \nitem\n: [\n          {\n            \nlinkId\n: \nintroduction\n,\n            \nitem\n: [\n              {\n                \nlinkId\n: \n20\n,\n                \nanswer\n: [\n                  {\n                    \nvalueCoding\n: {\n                      \nid\n: \n47\n\n                    }\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n266\n\n              },\n              {\n                \nlinkId\n: \n3\n,\n                \nanswer\n: [\n                  {\n                    \nvalueDecimal\n: 45\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n666\n\n              },\n              {\n                \nlinkId\n: \n305\n,\n                \nanswer\n: [\n                  {\n                    \nvalueCoding\n: {\n                      \nid\n: \n462\n\n                    }\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n662\n\n              },\n              {\n                \nlinkId\n: \n21\n,\n                \nanswer\n: [\n                  {\n                    \nvalueCoding\n: {\n                      \nid\n: \n69\n\n                    }\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n22\n,\n                \nanswer\n: [\n                  {\n                    \nvalueCoding\n: {\n                      \nid\n: \n81\n\n                    }\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n28\n\n              },\n              {\n                \nlinkId\n: \n23\n\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n24\n\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n25\n\n                \nanswer\n: [\n                  {\n                    \nvalueCoding\n: {\n                      \nid\n: \n414\n\n                    }\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n184\n,\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n26\n,\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n27\n\n              },\n              {\n                \nlinkId\n: \n29\n,\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n660\n,\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n30\n,\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n31\n,\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n32\n,\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n33\n,\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n702\n,\n                \nanswer\n: [\n                  {\n                    \nvalueBoolean\n: true\n                  }\n                ]\n              },\n              {\n                \nlinkId\n: \n34\n\n              }\n            ]\n          }\n        ]\n      }\n    }\n  }\n}\n\n\n\n\nExample response\n\n\n{\n  \ncards\n: [\n    {\n      \nsummary\n: \nSelfcare action suggestions\n,\n      \nindicator\n: \ninfo\n,\n      \nsource\n: {\n        \nname\n: \nEBMeDS v2.0.6\n,\n        \nurl\n: \nhttps://ebmeds.org/version/v2.0.6/data-version/v0.9.2\n\n      },\n      \nsuggestions\n: [\n        {\n          \nresourceType\n: \nActivityDefinition\n,\n          \nstatus\n: \nactive\n,\n          \ncopyright\n: \nKustannus Oy Duodecim, 2017\n,\n          \nparticipant\n: [\n            {\n              \ntype\n: \npatient\n\n            }\n          ],\n          \nkind\n: \nObservation\n,\n          \ncode\n: {\n            \ncoding\n: [\n              {\n                \ncode\n: \nADA001-P1\n,\n                \nsystem\n: \nhttp://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023\nversionKey=2283\n,\n                \ndisplay\n: \nYleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Hoidetaan p\u00e4ivystyksen\u00e4\n\n              }\n            ]\n          }\n        },\n        {\n          \nresourceType\n: \nActivityDefinition\n,\n          \nstatus\n: \nactive\n,\n          \ncopyright\n: \nKustannus Oy Duodecim, 2017\n,\n          \nparticipant\n: [\n            {\n              \ntype\n: \npatient\n\n            }\n          ],\n          \nkind\n: \nCommunicationRequest\n,\n          \ncode\n: {\n            \ncoding\n: [\n              {\n                \nsystem\n: \nhttps://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\n,\n                \ncode\n: \nread-reminder\n,\n                \ndisplay\n: \nLue muistutteet\n\n              }\n            ]\n          },\n          \ntopic\n: [\n            {\n              \ntext\n: \nOireesi voivat johtua virtsatietulehduksesta, joka voi olla munuaistasoinen. Hakeudu p\u00e4ivystysvastaanotolle.\n,\n              \ncoding\n: [\n                {\n                  \nsystem\n: \nhttps://duodecim.fi/fhir/stu3/CodeSystem/reminder-id\n,\n                  \ncode\n: \n46bea5c0-c18e-4e78-a20c-06974bae60f7\n,\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n\n\n\n/selfcare-general-cds\n\n\nThe so-called general CDS is the traditional way of using EBMeDS, where as much patient data as possible is sent to the service, and a wide range of reminders and suggested actions are returned.\n\n\nService description\n\n\n{\n  \nid\n: \nselfcare-general-cds\n,\n  \nhook\n: \ngeneral-cds\n,\n  \nname\n: \nGeneral decision support, no specialization.\n,\n  \ndescription\n: \nThis hook takes as much patient data as possible and returns as many reminders as possible. As well as prefetch data, see the documentation for what can be put in the context property.\n,\n  \nprefetch\n: {\n    \npatient\n: \nPatient/{{Patient.id}}\n,\n    \nallergyIntolerances\n: \nAllergyIntolerance?patient={{Patient.id}}\n,\n    \nfamilyMemberHistories\n: \nFamilyMemberHistory?patient={{Patient.id}}\n,\n    \nconditions\n: \nCondition?patient={{Patient.id}}\n,\n    \nobservations\n: \nObservation?patient={{Patient.id}}\n,\n    \nmedicationStatements\n: \nMedicationStatement?patient={{Patient.id}}\n,\n    \nimmunizations\n: \nImmunization?patient={{Patient.id}}\n,\n    \nprocedures\n: \nProcedure?patient={{Patient.id}}\n,\n    \nprocedureRequests\n: \nProcedureRequest?patient={{Patient.id}}\n\n  }\n}\n\n\n\n\n/selfcare-monitoring\n\n\nGiven a MonitoringGoal and related measurements (e.g. a weight loss goal and weight measurements), provide feedback on the progress.\n\n\nService description\n\n\n{\n  \nid\n: \nselfcare-monitoring\n,\n  \nhook\n: \nselfcare-monitoring\n,\n  \nname\n: \nMonitoring of certain observations for self-care purposes\n,\n  \ndescription\n: \nThis hook takes a MonitoringGoal resource and a bundle of associated MeasurementObservations and returns textual feedback on the user's progress.\n,\n  \ncontext\n: {\n    \ngoals\n: \nGoal?patient={{Patient.id}}\n,\n    \nmeasurements\n: \nObservation?patient={{Patient.id}}\n,\n  }\n}", 
            "title": "Hook catalog"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#ebmeds-hook-catalog", 
            "text": "Below we list the available CDS hook endpoints, i.e. the REST endpoints at  [base-url]/cds-services/[endpoint] .  Note : the FHIR resources to be included in the request are listed (per the CDS hooks standard) as FHIR search strings. However, there is sometimes not enough granularity available in FHIR STU3 searches to specify exactly what is needed. Be aware of this when reading the service descriptions below.", 
            "title": "EBMeDS Hook Catalog"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#selfcare-filled-questionnaire", 
            "text": "Hook: 'questionnaire-completed'  This hook is intended for the self-care context, where an individual (either by himself or with the assistance of a healthcare professional) fills in a form related to his or her health. This might be a questionnaire about the person's symptoms, a questionnaire calculating lifestyle-related health risks, etc. The responses are encoded into a FHIR QuestionnaireResponse. EBMeDS responds with ActivityDefinitions that include coded actions available for the individual, e.g. the reservation of a time for a lab test, visit to the doctor, etc. A special ActivityDefinition is provided containing reminder texts, instead of the texts being in the CDS hook cards.", 
            "title": "/selfcare-filled-questionnaire"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#used-fhir-resources", 
            "text": "Request  SelfCareQuestionnaireResponse  (profile of QuestionnaireResponse)    Response  SelfCareActivityDefinition  SelfCareObservation (optional)  SelfCareRiskAssessment (optional)", 
            "title": "Used FHIR resources"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#versioning-info", 
            "text": "The version of the Questionnaire resource is tightly bound to the version of the ruleset used in EBMeDS to analyze the QuestionnaireResponse. Therefore the Questionnaire version (along with the Questionnaire ID itself) must be specified in the QuestionnaireResponse. The Questionnaire resource contains the  Questionnaire.url  field which is globally unique. That URL shall be included in the QuestionnaireResponse in the  QuestionnaireResponse.questionnaire.reference  field, which gives EBMeDS enough info to infer the version information.  Note that old Questionnaire versions will not be supported indefinitely, and it is strongly recommended to always use the latest available questionnaire version for a given questionnaire. It is up to the calling party to make sure that the newest version is in use, information about new releases are provided by Duodecim using a mechanism agreed upon with the customer.", 
            "title": "Versioning info"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#service-description", 
            "text": "{\n   id :  selfcare-filled-questionnaire ,\n   hook :  questionnaire-completed ,\n   name :  Self-care questionnaire analysis service ,\n   description :  A hook for when a FHIR QuestionnaireResponse filled out by a patient/citizen is available for EBMeDS to process. The response may include directions both for the patient himself, and a medical professional. ,\n   prefetch : {\n     questionnaireResponse :  /QuestionnaireResponse?patient={{Patient.id}} \n  }\n}", 
            "title": "Service description"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#example-request", 
            "text": "{\n   hook :  questionnaire-completed ,\n   context : {\n     dataVersion :  latest \n  },\n   prefetch : {\n     questionnaireResponse : {\n       resource : {\n         resourceType :  QuestionnaireResponse ,\n         questionnaire : {\n           url :  https://www.ebmeds.org/form/api/FHIR/forms/export/21/622 \n        },\n         status :  completed ,\n         item : [\n          {\n             linkId :  introduction ,\n             item : [\n              {\n                 linkId :  20 ,\n                 answer : [\n                  {\n                     valueCoding : {\n                       id :  47 \n                    }\n                  }\n                ]\n              },\n              {\n                 linkId :  266 \n              },\n              {\n                 linkId :  3 ,\n                 answer : [\n                  {\n                     valueDecimal : 45\n                  }\n                ]\n              },\n              {\n                 linkId :  666 \n              },\n              {\n                 linkId :  305 ,\n                 answer : [\n                  {\n                     valueCoding : {\n                       id :  462 \n                    }\n                  }\n                ]\n              },\n              {\n                 linkId :  662 \n              },\n              {\n                 linkId :  21 ,\n                 answer : [\n                  {\n                     valueCoding : {\n                       id :  69 \n                    }\n                  }\n                ]\n              },\n              {\n                 linkId :  22 ,\n                 answer : [\n                  {\n                     valueCoding : {\n                       id :  81 \n                    }\n                  }\n                ]\n              },\n              {\n                 linkId :  28 \n              },\n              {\n                 linkId :  23 \n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  24 \n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  25 \n                 answer : [\n                  {\n                     valueCoding : {\n                       id :  414 \n                    }\n                  }\n                ]\n              },\n              {\n                 linkId :  184 ,\n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  26 ,\n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  27 \n              },\n              {\n                 linkId :  29 ,\n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  660 ,\n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  30 ,\n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  31 ,\n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  32 ,\n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  33 ,\n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  702 ,\n                 answer : [\n                  {\n                     valueBoolean : true\n                  }\n                ]\n              },\n              {\n                 linkId :  34 \n              }\n            ]\n          }\n        ]\n      }\n    }\n  }\n}", 
            "title": "Example request"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#example-response", 
            "text": "{\n   cards : [\n    {\n       summary :  Selfcare action suggestions ,\n       indicator :  info ,\n       source : {\n         name :  EBMeDS v2.0.6 ,\n         url :  https://ebmeds.org/version/v2.0.6/data-version/v0.9.2 \n      },\n       suggestions : [\n        {\n           resourceType :  ActivityDefinition ,\n           status :  active ,\n           copyright :  Kustannus Oy Duodecim, 2017 ,\n           participant : [\n            {\n               type :  patient \n            }\n          ],\n           kind :  Observation ,\n           code : {\n             coding : [\n              {\n                 code :  ADA001-P1 ,\n                 system :  http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023 versionKey=2283 ,\n                 display :  Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Hoidetaan p\u00e4ivystyksen\u00e4 \n              }\n            ]\n          }\n        },\n        {\n           resourceType :  ActivityDefinition ,\n           status :  active ,\n           copyright :  Kustannus Oy Duodecim, 2017 ,\n           participant : [\n            {\n               type :  patient \n            }\n          ],\n           kind :  CommunicationRequest ,\n           code : {\n             coding : [\n              {\n                 system :  https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions ,\n                 code :  read-reminder ,\n                 display :  Lue muistutteet \n              }\n            ]\n          },\n           topic : [\n            {\n               text :  Oireesi voivat johtua virtsatietulehduksesta, joka voi olla munuaistasoinen. Hakeudu p\u00e4ivystysvastaanotolle. ,\n               coding : [\n                {\n                   system :  https://duodecim.fi/fhir/stu3/CodeSystem/reminder-id ,\n                   code :  46bea5c0-c18e-4e78-a20c-06974bae60f7 ,\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}", 
            "title": "Example response"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#selfcare-general-cds", 
            "text": "The so-called general CDS is the traditional way of using EBMeDS, where as much patient data as possible is sent to the service, and a wide range of reminders and suggested actions are returned.", 
            "title": "/selfcare-general-cds"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#service-description_1", 
            "text": "{\n   id :  selfcare-general-cds ,\n   hook :  general-cds ,\n   name :  General decision support, no specialization. ,\n   description :  This hook takes as much patient data as possible and returns as many reminders as possible. As well as prefetch data, see the documentation for what can be put in the context property. ,\n   prefetch : {\n     patient :  Patient/{{Patient.id}} ,\n     allergyIntolerances :  AllergyIntolerance?patient={{Patient.id}} ,\n     familyMemberHistories :  FamilyMemberHistory?patient={{Patient.id}} ,\n     conditions :  Condition?patient={{Patient.id}} ,\n     observations :  Observation?patient={{Patient.id}} ,\n     medicationStatements :  MedicationStatement?patient={{Patient.id}} ,\n     immunizations :  Immunization?patient={{Patient.id}} ,\n     procedures :  Procedure?patient={{Patient.id}} ,\n     procedureRequests :  ProcedureRequest?patient={{Patient.id}} \n  }\n}", 
            "title": "Service description"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#selfcare-monitoring", 
            "text": "Given a MonitoringGoal and related measurements (e.g. a weight loss goal and weight measurements), provide feedback on the progress.", 
            "title": "/selfcare-monitoring"
        }, 
        {
            "location": "/api/fhir/hook-catalog/#service-description_2", 
            "text": "{\n   id :  selfcare-monitoring ,\n   hook :  selfcare-monitoring ,\n   name :  Monitoring of certain observations for self-care purposes ,\n   description :  This hook takes a MonitoringGoal resource and a bundle of associated MeasurementObservations and returns textual feedback on the user's progress. ,\n   context : {\n     goals :  Goal?patient={{Patient.id}} ,\n     measurements :  Observation?patient={{Patient.id}} ,\n  }\n}", 
            "title": "Service description"
        }, 
        {
            "location": "/api/fhir/custom-rest/", 
            "text": "Custom REST API\n\n\nEBMeDS 2.0 is not a full-blown FHIR server, but we do provide a REST interface for getting some of our static FHIR resources via HTTP.\n\n\nCoaching\n\n\n\n\nURL: \n[base-url]/coaching\n\n\nResource: \nCoachingPlanDefinition\n\n\n\n\nThe CoachingPlanDefinition is a resource containing a set of messages that are sent to the user at specific intervals. There are coaching programs for a number of different topics, for example:\n\n\n\n\nReduction of alcohol consumption\n\n\nStep exercise programme\n\n\nGood deeds\n\n\nCoaching programme for families with children\n\n\nGratitude\n\n\nOptimism\n\n\nPositive interaction in couple relationship\n\n\nResolving conflicts in a relationship\n\n\nCoachingprogrammet Konflikthantering\n\n\nExercise programme three hours a week\n\n\nExercise programme four hours a week\n\n\nExercise programme five hours a week\n\n\nExercise programme more than seven hours a week\n\n\nExercise programme for diabetes patients\n\n\nExercise programme for persons with musculoskeletal problems\n\n\nCoaching program for asthmatics\n\n\nWeight management\n\n\nHealthy nutrition programme\n\n\nCoaching program \"Stress management\"\n\n\nPreparing to quit smoking\n\n\nQuitting smoking\n\n\nSleep coaching\n\n\n\n\nA list of available programs are available at the address \n[base-url]/coaching/programs\n and the individual programs can be accessed at \n[base-url]/coaching/programs/[id]\n. So for example, on ebmedscloud.org, a coaching program can be retrieved by doing a HTTP GET on the URL \nhttps://ebmedscloud.org/api/fhir/v1/coaching/programs/5\n.\n\n\nThe format of the CoachingPlanDefinition is described in more detail in the EBMeDS 2.0 \nFHIR resources listing\n.", 
            "title": "Custom REST"
        }, 
        {
            "location": "/api/fhir/custom-rest/#custom-rest-api", 
            "text": "EBMeDS 2.0 is not a full-blown FHIR server, but we do provide a REST interface for getting some of our static FHIR resources via HTTP.", 
            "title": "Custom REST API"
        }, 
        {
            "location": "/api/fhir/custom-rest/#coaching", 
            "text": "URL:  [base-url]/coaching  Resource:  CoachingPlanDefinition   The CoachingPlanDefinition is a resource containing a set of messages that are sent to the user at specific intervals. There are coaching programs for a number of different topics, for example:   Reduction of alcohol consumption  Step exercise programme  Good deeds  Coaching programme for families with children  Gratitude  Optimism  Positive interaction in couple relationship  Resolving conflicts in a relationship  Coachingprogrammet Konflikthantering  Exercise programme three hours a week  Exercise programme four hours a week  Exercise programme five hours a week  Exercise programme more than seven hours a week  Exercise programme for diabetes patients  Exercise programme for persons with musculoskeletal problems  Coaching program for asthmatics  Weight management  Healthy nutrition programme  Coaching program \"Stress management\"  Preparing to quit smoking  Quitting smoking  Sleep coaching   A list of available programs are available at the address  [base-url]/coaching/programs  and the individual programs can be accessed at  [base-url]/coaching/programs/[id] . So for example, on ebmedscloud.org, a coaching program can be retrieved by doing a HTTP GET on the URL  https://ebmedscloud.org/api/fhir/v1/coaching/programs/5 .  The format of the CoachingPlanDefinition is described in more detail in the EBMeDS 2.0  FHIR resources listing .", 
            "title": "Coaching"
        }, 
        {
            "location": "/api/fhir/resources/", 
            "text": "FHIR resources in EBMeDS\n\n\nSelfCareQuestionnaire\n\n\nInherits from\n: \nQuestionnaire\n\n\nFHIR profile\n: \nSelfCareQuestionnaire\n\n\nThe FHIR \nQuestionnaire resource\n is a general way of describing, you guessed it, questionnaires.\n\n\nExample\n\n\nAn example resource is:\n\n\n{\n  \nresourceType\n:\nQuestionnaire\n,\n  \nlanguage\n:\nfi\n,\n  \nurl\n:\nhttps://www.ebmeds.org/form/api/FHIR/forms/export/107/550\n,\n  \nversion\n:\nv0.9.3\n\n  \nstatus\n:\nactive\n,\n  \ndate\n:\n2017-10-11T11:45:49.036Z\n,\n  \npublisher\n:\n\u00a9 Kustannus Oy Duodecim, 2017\n,\n  \ncopyright\n:\n\u00a9 Kustannus Oy Duodecim, 2017\n,\n  \nidentifier\n:[\n    {\n      \nsystem\n:\nhttps://duodecim.fi/fhir/sid/vkt-questionnaire-id\n,\n      \nvalue\n:\n107\n\n    }\n  ],\n  \ntitle\n:\nHengitystietulehdusoireiden oirearvio\n,\n  \ntext\n:{\n    \nstatus\n:\ngenerated\n,\n    \ndiv\n:\ndiv xmlns=\\\nhttp://www.w3.org/1999/xhtml\\\nNeuvova oirearviolomake, joka auttaa hengitystieinfektion oireita potevaa henkil\u00f6\u00e4 arvioimaan ammattiavun tarvetta ja omahoidon mahdollisuuksia\n/div\n\n  },\n  \nextension\n:[\n    {\n      \nurl\n:\nhttps://duodecim.fi/fhir/extensions/self-care-instructions\n,\n      \nextension\n:[\n        {\n          \nurl\n:\ninstruction-text\n,\n          \nvalueString\n:\n[Itsehoito-ohje](http://www.terveyskirjasto.fi/terveyskirjasto/tk.koti?p_artikkeli=dlk01167)\n\n        }\n      ]\n    }\n  ],\n  \nitem\n:[\n    {\n      \nlinkId\n:\nintroduction\n,\n      \ntext\n:\nIntroductory text of the questionnaire. Also a container item. Has no answer, but contains other items. The text is written in markdown, so it may contain [links](https://ebmeds.org).\n,\n      \ntype\n:\ngroup\n,\n      \nitem\n:[\n        {\n          \nlinkId\n: \n266\n,\n          \ntype\n: \ndisplay\n\n          \ntext\n: \nA display-type question in the Questionnaire, has no answer but must also be present in the QuestionnaireResponse according to the FHIR spec.\n\n        },\n        {\n          \nlinkId\n:\n3\n,\n          \ntype\n:\ndecimal\n,\n          \ntext\n:\nA question with a numeric answer. (For example, age.)\n,\n          \nrequired\n:true,\n          \ncode\n:[\n            {\n              \nsystem\n:\nhttp://loinc.org\n,\n              \ncode\n:\n21612-7\n\n            }\n          ],\n          \nextension\n:[\n            {\n              \nurl\n:\nhttp://hl7.org/fhir/StructureDefinition/minValue\n,\n              \nvalueDecimal\n:10\n            },\n            {\n              \nurl\n:\nhttp://hl7.org/fhir/StructureDefinition/maxValue\n,\n              \nvalueDecimal\n:99\n            }\n          ]\n        },\n        {\n          \nlinkId\n:\n306\n,\n          \nrequired\n:true,\n          \ntext\n:\n'Check box' type multiple choice questions may naturally have \n 1 answers.\n,\n          \ntype\n:\nchoice\n,\n          \nrepeats\n:true,\n          \noption\n:[\n            {\n              \nvalueCoding\n:{\n                \nid\n:\n452\n,\n                \ndisplay\n:\nFirst option.\n\n              }\n            },\n            {\n              \nvalueCoding\n:{\n                \nid\n:\n453\n,\n                \ndisplay\n:\nSecond option.\n\n              }\n            },\n            {\n              \nvalueCoding\n:{\n                \nid\n:\n453\n,\n                \ndisplay\n:\nNone of the above.\n\n              },\n              \nextension\n: [\n                {\n                  \nurl\n: \nhttp://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive\n,\n                  \nvalueBoolean\n: true\n                }\n              ]\n            }\n          ],\n        },\n        {\n          \nlinkId\n:\n305\n,\n          \nrequired\n:true,\n          \ntext\n:\nA 'radio button' type multiple choice question. In the QuestionnaireResponse, looks identical to a checkbox answer with one answer checked.\n,\n          \ntype\n:\nchoice\n,\n          \nrepeats\n:false,\n          \noption\n:[\n            {\n              \nvalueCoding\n:{\n                \nid\n:\n462\n,\n                \ndisplay\n:\nFirst option.\n\n              }\n            },\n            {\n              \nvalueCoding\n:{\n                \nid\n:\n463\n,\n                \ndisplay\n:\nSecond option.\n\n              }\n            },\n            {\n              \nvalueCoding\n:{\n                \nid\n:\n464\n,\n                \ndisplay\n:\nThird option.\n\n              }\n            }\n          ],\n        },\n        {\n          \nlinkId\n: \n23\n,\n          \nrequired\n: true,\n          \ntext\n: \nA boolean-type question. In the Questionnaire this question contains display logic, i.e. the question is only visible when certain other questions have been answered in a certain way. In this example, the numerical answer in question ID 3 must be between 15 and 99.\n,\n          \ntype\n: \nboolean\n,\n          \nenableWhen\n: [\n            {\n              \nquestion\n: \n3\n,\n              \nanswerQuantity\n: {\n                \nvalue\n: 15,\n                \ncomparator\n: \n\n              }\n            },\n            {\n              \nquestion\n: \n3\n,\n              \nextension\n: [\n                {\n                  \nurl\n: \nhttps://duodecim.fi/fhir/extensions/enable-when-operator\n,\n                  \nvalueString\n: \nAND\n\n                }\n              ],\n              \nanswerQuantity\n: {\n                \nvalue\n: 99,\n                \ncomparator\n: \n\n              }\n            }\n          ]\n        }\n    }\n  ]\n}\n\n\n\n\nWith the fields:\n\n\n\n\nresourceType\n (string): Always \nQuestionnaire\n.\n\n\nlanguage\n (string): What language is the form written in? BCP47 language tag, e.g. \nfi\n or \nfi-FI\n.\n\n\nurl\n (string): Globally unique URL for this questionnaire.\n\n\nstatus\n (string): Can be \nactive\n, \ndraft\n or \nretired\n. Only active questionnaires should be used in production.\n\n\ndate\n (string): ISO 8601 date of when the Questionnaire was created or last modified.\n\n\npublisher\n (string): Who published the Questionnaire. Usually Duodecim.\n\n\ncopyright\n (string): Standard copyright notice.\n\n\nidentifier\n (array of objects): Identifying codes, in practice only one object is listed.\n\n\nsystem\n (string): \n'http://duodecim.fi/fhir/sid/vkt-questionnaire-id'\n, an internally defined code system.\n\n\ncode\n (string): The unique ID for this questionnaire (although different versions may exist with the same ID).\n\n\n\n\n\n\ntitle\n (string): The title of this questionnaire.\n\n\ntext\n (object): A FHIR Narrative object, i.e. a human-readable description of the contents of this resource. Has the following fields:\n\n\nstatus\n (string): Always \n'generated'\n.\n\n\ndiv\n (string): A string containing an XHTML \ndiv\n with the contents. Note that entity references are not allowed.\n\n\n\n\n\n\nitem\n (array of objects): The field describing one or more questions. Items may contain other items, forming a tree structure.\n\n\n\n\nQuestionnaire items\n\n\nThe example Questionnaire above contains an assortment of the most common variants of a question item: the different question types, as well as the usage display logic (\nenableWhen\n) and custom extensions.\n\n\nThe fields in \nitem\n are as follows.\n\n\n\n\nitem\n (object): Items may contain other items.\n\n\nlinkId\n (string): A unique ID for identifying this question in the form.\n\n\ntext\n (string, markdown, \noptional\n): A markdown string containing the question text. May contain light text formatting and links to images. Not needed for certain item types, e.g. \ngroup\n.\n\n\nrequired\n (boolean): Whether or not this question is required to be answered. Questions with \ntype: 'display'\n or \ntype: 'group'\n can not be \nrequired\n. The \nrequired\n property is also not applicable to questions that are not visible to the user due to display logic hiding them. As a rule of thumb, the Questionnaires generated by Duodecim assume that all (visible and answerable) questions are required.\n\n\ntype\n (string): One of \n'decimal'\n, \n'boolean'\n, \n'string'\n, \n'integer'\n, \n'decimal'\n, \n'date'\n, \n'dateTime'\n, '\nchoice\n' for actual questions. We also have the special types \n'group'\n (that only contains other items) and \n'display'\n which is used to show some informative text and/or subtitles (in markdown). See section \"Question types\" below.\n\n\nenableWhen\n (array of objects): A list of criteria for when this question should be visible to the user. Each criterium in the list is connected to the other by boolean OR operators by default, with AND operators being implemented by an extension. See the section \"Questionnaire extensions\".\n\n\n\n\nQuestionnaire extensions\n\n\nSee the \nextensions page\n.\n\n\nSelfCareQuestionnaireResponse\n\n\nInherits from\n: \nQuestionnaireResponse\n\n\nFHIR profile\n: \nSelfCareQuestionnaireResponse\n\n\nThe \nSelfCareQuestionnaireResponse\n is the counterpart to a Questionnaire: it contains the answers that the user has provided. This can be sent to EBMeDS for decision support.\n\n\nHere is a complete example:\n\n\n{\n  \nresourceType\n: \nQuestionnaireResponse\n,\n  \nid\n: \n0685d814-f4af-41a3-8547-5c7e5f97c923\n,\n  \nquestionnaire\n: {\n    \nidentifier\n: {\n      \nsystem\n: \nhttps://duodecim.fi/fhir/sid/vkt-questionnaire-id\n,\n      \nvalue\n: \n21\n\n    }\n  },\n  \nstatus\n: \ncompleted\n,\n  \nitem\n: [\n    {\n      \nlinkId\n: \nintroduction\n,\n      \ntext\n: \nIntroductory text of the questionnaire. Also a container item. Has no answer, but contains other items. The text is written in markdown, so it may contain [links](https://ebmeds.org).\n\n      \nitem\n: [\n        {\n          \nlinkId\n: \n266\n,\n          \ntext\n: \nA display-type question in the Questionnaire, has no answer but must also be present in the QuestionnaireResponse according to the FHIR spec.\n\n        },\n        {\n          \nlinkId\n: \n3\n,\n          \ntext\n: \nA question with a numeric answer. (For example, age.)\n,\n          \nanswer\n: [\n            {\n              \nvalueDecimal\n: 45\n            }\n          ]\n        },\n        {\n          \nlinkId\n: \n306\n,\n          \ntext\n: \n'Check box' type multiple choice questions may naturally have \n 1 answers.\n,\n          \nanswer\n: [\n            {\n              \nvalueCoding\n: {\n                \nid\n: \n452\n\n              }\n            },\n            {\n              \nvalueCoding\n: {\n                \nid\n: \n453\n\n              }\n            }\n          ]\n        },\n        {\n          \nlinkId\n: \n305\n,\n          \ntext\n: \nA 'radio button' type multiple choice question. In the QuestionnaireResponse, looks identical to a checkbox answer with one answer checked.\n,\n          \nanswer\n: [\n            {\n              \nvalueCoding\n: {\n                \nid\n: \n462\n\n              }\n            }\n          ]\n        },\n        {\n          \nlinkId\n: \n23\n\n          \ntext\n: \nA boolean-type question. In the Questionnaire this question contains display logic, i.e. the question is only visible when certain other questions have been answered in a certain way. In this example, the numerical answer in question ID 3 must be between 15 and 99.\n\n          \nanswer\n: [\n            {\n              \nvalueBoolean\n: true\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n\n\n\nSo the structure has the following fields:\n\n\n\n\nresourceType\n (string): Always \nQuestionnaireResponse\n.\n\n\nid\n (string, \noptional\n): A unique ID, UUID works great. Not needed for CDS, but good to have for archiving purposes.\n\n\nquestionnaire.identifier\n (object): A unique identifier for the Questionnaire that this QuestionnaireResponse answers.\n\n\nsystem\n (string): Always \nhttps://duodecim.fi/fhir/sid/vkt-questionnaire-id\n\n\nvalue\n (string): A unique ID for the Questionnaire.\n\n\n\n\n\n\nstatus\n (string): Always \ncompleted\n.\n\n\nitem\n (array of objects): Tree hierarchy of the answers to the questionnaire. The hierarchy must be the same as the question hierarchy in the Questionnaire.\n\n\nitem\n (see above, \noptional\n): Items may contain other items.\n\n\nlinkId\n (string): The unique ID of the question in the Questionnaire resource (also named \nlinkId\n there). This ID is in fact globally unique for all Duodecim Questionnaires.\n\n\nanswer\n (array, \noptional\n): array of objects with property \nvalue[x]\n, corresponding to the Questionnaire \nanswer[x]\n field for the question. The length of the array is always 1, or \n= 1 if it is a multiple choice question (\nvalueCoding\n).\n\n\nvalueBoolean\n (boolean): A yes or no question answer.\n\n\nvalueDecimal\n (number): A decimal-valued question answer.\n\n\nvalueCoding\n (object): has one property, \nid\n (string), the ID of the wanted answer. Also globally unique ID in all Duodecim Questionnaires.\n\n\n\n\n\n\ntext\n (markdown string, \noptional\n): The question text from the Questionnaire repeated here, mostly to aid debugging.\n\n\n\n\n\n\n\n\nSelfCareActivityDefinition\n\n\nInherits from\n: \nActivityDefinition\n\n\nFHIR profile\n: \nSelfCareActivityDefinition\n\n\nThe main point of the FHIR resource \nSelfCareActivityDefinition\n is to describe an action. In the traditional CDS context the primary unit is the reminder, an informative message that may have an encoded action suggestion attached to it. In the self-care context it is the other way around: we return actions that have messages attached to them.\n\n\nIn practice, this means that if several reminders suggest the same action, only one SelfCareActivityDefinition is returned, with several reminder texts attached to it. This also means that the card structure of CDS hooks becomes meaningless, see the discussion at the bottom of \nthis page\n.\n\n\nData model\n\n\nThe ActivityDefinitions in the \nselfcare-*\n hooks separate the reminder texts from their suggested actions. Given a set of reminders, each with 0 or more suggested actions attached to them, the reminder texts and actions are split up into several SelfCareActivityDefinitions:\n\n\n\n\nZero or one ActivityDefinition containing the code system \nhttps://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\n and the code \nread-reminder\n. This resource contains all reminder texts with severity level \nreminder\n in its \ntopic.text\n field.\n\n\nZero or one ActivityDefinition containing the code system \nhttps://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\n and the code \nread-prompt\n. This resource contains all reminder texts with severity level \nprompt\n in its \ntopic.text\n field.\n\n\nZero or one ActivityDefinition containing the code system \nhttps://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\n and the code \nread-alert\n. This resource contains all reminder texts with severity level \nalert\n in its \ntopic.text\n field.\n\n\nZero or more ActivityDefinition containing any other code system and code, representing the actual actions.\n\n\n\n\nIn other words: ActivityDefinitions of type 1-3 may or may not be present, but at least one of them contains at least one reminder text. See below for an example.\n\n\nCode systems\n\n\nThese code systems are used when coding an ActivityDefinition. See the \ncode systems page\n for more detailed information.\n\n\n\n\nhttps://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\n: custom codes identifying special types of ActivityDefinitions, like above.\n\n\nhttp://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023\nversionKey=2283\n a.k.a. OID \n1.2.246.537.6.49\n: THL Sosiaali- ja terveysalan palvelunimikkeist\u00f6\n\n\nhttp://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=88\nversionKey=120\n a.k.a. OID \n1.2.246.537.6.3\n: Kuntaliitto\n\n\n\n\nRestrictions\n\n\nSome restrictions have been put in place to simplify data processing, using the \nSelfCareActivityDefinition\n profile.\n\n\n\n\nA SelfCareActivityDefinition is described by exactly one code, i.e. \ncode\n must be present and \ncode.coding\n may contain only one coding. The coding represents some kind of action.\n\n\nA reminder must have exactly one \nparticipant\n, i.e. the intended recipient of this SelfCareActivityDefinition. This is either the patient or a medical professional.\n\n\nThe ActivityDefinitions are always freshly generated, so their \nstatus\n is always \nactive\n.\n\n\n\n\nExample\n\n\nBelow is an example of the two kinds of SelfCareActivityDefinitions (one describing an action, one containing reminder texts) in a CDS response:\n\n\n{\n  \ncards\n: [\n    {\n      \nsummary\n: \nSelfcare action suggestions\n,\n      \nindicator\n: \ninfo\n,\n      \nsource\n: {\n        \nname\n: \nEBMeDS v2.0.6\n,\n        \nurl\n: \nhttps://ebmeds.org/version/v2.0.6/data-version/v0.9.2\n\n      },\n      \nsuggestions\n: [\n        {\n          \nresourceType\n: \nActivityDefinition\n,\n          \nstatus\n: \nactive\n,\n          \ncopyright\n: \nKustannus Oy Duodecim, 2017\n,\n          \nparticipant\n: [\n            {\n              \ntype\n: \npatient\n\n            }\n          ],\n          \nkind\n: \nObservation\n,\n          \ncode\n: {\n            \ncoding\n: [\n              {\n                \ncode\n: \nADA001-P1\n,\n                \nsystem\n: \nhttp://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023\nversionKey=2283\n,\n                \ndisplay\n: \nYleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Hoidetaan p\u00e4ivystyksen\u00e4\n\n              }\n            ]\n          }\n        },\n        {\n          \nresourceType\n: \nActivityDefinition\n,\n          \nstatus\n: \nactive\n,\n          \ncopyright\n: \nKustannus Oy Duodecim, 2017\n,\n          \nparticipant\n: [\n            {\n              \ntype\n: \npatient\n\n            }\n          ],\n          \nkind\n: \nCommunicationRequest\n,\n          \ncode\n: {\n            \ncoding\n: [\n              {\n                \nsystem\n: \nhttps://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\n,\n                \ncode\n: \nread-reminder\n,\n                \ndisplay\n: \nLue muistutteet\n\n              }\n            ]\n          },\n          \ntopic\n: [\n            {\n              \ntext\n: \nOireesi voivat johtua virtsatietulehduksesta, joka voi olla munuaistasoinen. Hakeudu p\u00e4ivystysvastaanotolle.\n,\n              \ncoding\n: [\n                {\n                  \nsystem\n: \nhttps://duodecim.fi/fhir/stu3/CodeSystem/reminder-id\n,\n                  \ncode\n: \n46bea5c0-c18e-4e78-a20c-06974bae60f7\n,\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n\n\n\n\nAnd the fields are described as follows.\n\n\n\n\nresourceType\n (string): Always \nActivityDefinition\n for this resource.\n\n\nstatus\n (string): Only \nactive\n ActivityDefinitions are returned.\n\n\ncode\n (object, CodeableConcept): The code describing the action.\n\n\ncoding\n: container object for a code + code system\n\n\nsystem\n (string): The code system used in this code. See \na list of used code systems\n.\n\n\ncode\n (string): The actual code, a symbol in the given system.\n\n\ndisplay\n (string): Human-readable description of the action.\n\n\n\n\n\n\n\n\n\n\ntopic\n (array, \noptional\n):\n\n\ntext\n (markdown string): The reminder text itself. May contain http links and text with light styling.\n\n\ncoding.code\n (UUID): The unique ID of this particular reminder message.\n\n\ncoding.system\n: Always \nhttps://duodecim.fi/fhir/stu3/CodeSystem/reminder-id\n.\n\n\n\n\n\n\nparticipant\n (array of objects): A list of participants and their roles. In practice there is only ever one entry in this list. Each object contains the following field:\n\n\ntype\n (string): one of \npatient\n, \npractitioner\n or \nrelated-person\n. Only \npatient\n is in practical use at the moment.\n\n\n\n\n\n\ncopyright\n (string): A standard copyright notice.\n\n\n\n\nSelfCareObservation\n\n\nInherits from\n: \nObservation\n\n\nFHIR profile\n: \nSelfCareObservation\n\n\nA very simple resource describing some new observation made about the patient from the basis of his or her patient data.\n\n\nExample\n\n\n{\n  \nstatus\n: \nfinal\n,\n  \ncode\n: {\n    \ncoding\n: [\n      {\n        \nsystem\n: \nhttps://duodecim.fi/fhir/stu3/CodeSystem/custom-observations\n,\n        \ncode\n: \npotential-extra-years\n\n      }\n    ]\n  },\n  \neffectiveDateTime\n: \n2018-04-25T11:13:56.894Z\n,\n  \nvalueQuantity\n: {\n    \nunit\n: \na\n,\n    \nvalue\n: 5\n  }\n}\n\n\n\n\nAnd the fields are the following:\n\n\n\n\ncode.coding\n: The code system and coding describing the concept.\n\n\neffectiveDateTime\n (date string): When this observation was created.\n\n\nvalueQuantity\n or \nvalueString\n: The actual value, either as a number with a unit (Quantity) or as a string.\n\n\n\n\nSelfCareRiskAssessment\n\n\nInherits from\n: \nRiskAssessment\n\n\nFHIR profile\n: \nSelfCareRiskAssessment\n\n\nA resource describing some newly calculated risk regarding the patient, from the basis of his or her patient data. The risk is always associated with a certain outcome (with a diagnosis code or similar), and the age range in years for which this risk is applicable for this particular patient. The risk probability is always given as a decimal between 0 and 1.\n\n\nExample\n\n\n{\n  \nstatus\n: \nfinal\n,\n  \nprediction\n: [\n    \noutcome\n: {\n      \ncoding\n: [{\n        \nsystem\n: \nhttp://snomed.info/sct\n,\n        \ncode\n: \n414545008\n\n      }]\n    },\n    \nprobabilityDecimal\n: 0.40,\n    \nwhenRange\n: {\n      \nlow\n: {\n        \nvalue\n: 52,\n        \nunit\n: \na\n\n      },\n      \nhigh\n: {\n        \nvalue\n: 62,\n        \nunit\n: \na\n\n      }\n    }\n  ]\n}\n\n\n\n\nAnd the fields are the following:\n\n\n\n\nprediction.outcome\n: The code system and coding describing the outcome that may occur.\n\n\nprediction.probabilityDecimal\n (decimal between 0 and 1): The probability of the outcome occurring.\n\n\nwhenRange\n: The patient's age range for which this risk has been calculated.\n\n\n\n\nResources for general CDS\n\n\nAt the moment, EBMeDS best supports questionnaire-based decision support in FHIR, using the resources described above. For a full-blown CDS service, a large range of other clinical data about a person can and should be included. The resources for describing these is in a very experimental stage, and the profiles will probably change once real-world use is initiated. The documentation is therefore still mostly in the profiles themselves:\n\n\n\n\nCDSImmunization\n\n\nCDSMedicationStatement\n\n\nCDSProcedure\n\n\nCDSProcedureRequest\n\n\nDiagnosisCondition\n\n\nDrugAllergyIntolerance\n\n\nMeasurementObservation\n\n\nMonitoringGoal\n\n\nNonIdentifiablePatient\n\n\nSimpleFamilyMemberHistory", 
            "title": "Resources"
        }, 
        {
            "location": "/api/fhir/resources/#fhir-resources-in-ebmeds", 
            "text": "", 
            "title": "FHIR resources in EBMeDS"
        }, 
        {
            "location": "/api/fhir/resources/#selfcarequestionnaire", 
            "text": "Inherits from :  Questionnaire  FHIR profile :  SelfCareQuestionnaire  The FHIR  Questionnaire resource  is a general way of describing, you guessed it, questionnaires.", 
            "title": "SelfCareQuestionnaire"
        }, 
        {
            "location": "/api/fhir/resources/#example", 
            "text": "An example resource is:  {\n   resourceType : Questionnaire ,\n   language : fi ,\n   url : https://www.ebmeds.org/form/api/FHIR/forms/export/107/550 ,\n   version : v0.9.3 \n   status : active ,\n   date : 2017-10-11T11:45:49.036Z ,\n   publisher : \u00a9 Kustannus Oy Duodecim, 2017 ,\n   copyright : \u00a9 Kustannus Oy Duodecim, 2017 ,\n   identifier :[\n    {\n       system : https://duodecim.fi/fhir/sid/vkt-questionnaire-id ,\n       value : 107 \n    }\n  ],\n   title : Hengitystietulehdusoireiden oirearvio ,\n   text :{\n     status : generated ,\n     div : div xmlns=\\ http://www.w3.org/1999/xhtml\\ Neuvova oirearviolomake, joka auttaa hengitystieinfektion oireita potevaa henkil\u00f6\u00e4 arvioimaan ammattiavun tarvetta ja omahoidon mahdollisuuksia /div \n  },\n   extension :[\n    {\n       url : https://duodecim.fi/fhir/extensions/self-care-instructions ,\n       extension :[\n        {\n           url : instruction-text ,\n           valueString : [Itsehoito-ohje](http://www.terveyskirjasto.fi/terveyskirjasto/tk.koti?p_artikkeli=dlk01167) \n        }\n      ]\n    }\n  ],\n   item :[\n    {\n       linkId : introduction ,\n       text : Introductory text of the questionnaire. Also a container item. Has no answer, but contains other items. The text is written in markdown, so it may contain [links](https://ebmeds.org). ,\n       type : group ,\n       item :[\n        {\n           linkId :  266 ,\n           type :  display \n           text :  A display-type question in the Questionnaire, has no answer but must also be present in the QuestionnaireResponse according to the FHIR spec. \n        },\n        {\n           linkId : 3 ,\n           type : decimal ,\n           text : A question with a numeric answer. (For example, age.) ,\n           required :true,\n           code :[\n            {\n               system : http://loinc.org ,\n               code : 21612-7 \n            }\n          ],\n           extension :[\n            {\n               url : http://hl7.org/fhir/StructureDefinition/minValue ,\n               valueDecimal :10\n            },\n            {\n               url : http://hl7.org/fhir/StructureDefinition/maxValue ,\n               valueDecimal :99\n            }\n          ]\n        },\n        {\n           linkId : 306 ,\n           required :true,\n           text : 'Check box' type multiple choice questions may naturally have   1 answers. ,\n           type : choice ,\n           repeats :true,\n           option :[\n            {\n               valueCoding :{\n                 id : 452 ,\n                 display : First option. \n              }\n            },\n            {\n               valueCoding :{\n                 id : 453 ,\n                 display : Second option. \n              }\n            },\n            {\n               valueCoding :{\n                 id : 453 ,\n                 display : None of the above. \n              },\n               extension : [\n                {\n                   url :  http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive ,\n                   valueBoolean : true\n                }\n              ]\n            }\n          ],\n        },\n        {\n           linkId : 305 ,\n           required :true,\n           text : A 'radio button' type multiple choice question. In the QuestionnaireResponse, looks identical to a checkbox answer with one answer checked. ,\n           type : choice ,\n           repeats :false,\n           option :[\n            {\n               valueCoding :{\n                 id : 462 ,\n                 display : First option. \n              }\n            },\n            {\n               valueCoding :{\n                 id : 463 ,\n                 display : Second option. \n              }\n            },\n            {\n               valueCoding :{\n                 id : 464 ,\n                 display : Third option. \n              }\n            }\n          ],\n        },\n        {\n           linkId :  23 ,\n           required : true,\n           text :  A boolean-type question. In the Questionnaire this question contains display logic, i.e. the question is only visible when certain other questions have been answered in a certain way. In this example, the numerical answer in question ID 3 must be between 15 and 99. ,\n           type :  boolean ,\n           enableWhen : [\n            {\n               question :  3 ,\n               answerQuantity : {\n                 value : 15,\n                 comparator :  \n              }\n            },\n            {\n               question :  3 ,\n               extension : [\n                {\n                   url :  https://duodecim.fi/fhir/extensions/enable-when-operator ,\n                   valueString :  AND \n                }\n              ],\n               answerQuantity : {\n                 value : 99,\n                 comparator :  \n              }\n            }\n          ]\n        }\n    }\n  ]\n}  With the fields:   resourceType  (string): Always  Questionnaire .  language  (string): What language is the form written in? BCP47 language tag, e.g.  fi  or  fi-FI .  url  (string): Globally unique URL for this questionnaire.  status  (string): Can be  active ,  draft  or  retired . Only active questionnaires should be used in production.  date  (string): ISO 8601 date of when the Questionnaire was created or last modified.  publisher  (string): Who published the Questionnaire. Usually Duodecim.  copyright  (string): Standard copyright notice.  identifier  (array of objects): Identifying codes, in practice only one object is listed.  system  (string):  'http://duodecim.fi/fhir/sid/vkt-questionnaire-id' , an internally defined code system.  code  (string): The unique ID for this questionnaire (although different versions may exist with the same ID).    title  (string): The title of this questionnaire.  text  (object): A FHIR Narrative object, i.e. a human-readable description of the contents of this resource. Has the following fields:  status  (string): Always  'generated' .  div  (string): A string containing an XHTML  div  with the contents. Note that entity references are not allowed.    item  (array of objects): The field describing one or more questions. Items may contain other items, forming a tree structure.", 
            "title": "Example"
        }, 
        {
            "location": "/api/fhir/resources/#questionnaire-items", 
            "text": "The example Questionnaire above contains an assortment of the most common variants of a question item: the different question types, as well as the usage display logic ( enableWhen ) and custom extensions.  The fields in  item  are as follows.   item  (object): Items may contain other items.  linkId  (string): A unique ID for identifying this question in the form.  text  (string, markdown,  optional ): A markdown string containing the question text. May contain light text formatting and links to images. Not needed for certain item types, e.g.  group .  required  (boolean): Whether or not this question is required to be answered. Questions with  type: 'display'  or  type: 'group'  can not be  required . The  required  property is also not applicable to questions that are not visible to the user due to display logic hiding them. As a rule of thumb, the Questionnaires generated by Duodecim assume that all (visible and answerable) questions are required.  type  (string): One of  'decimal' ,  'boolean' ,  'string' ,  'integer' ,  'decimal' ,  'date' ,  'dateTime' , ' choice ' for actual questions. We also have the special types  'group'  (that only contains other items) and  'display'  which is used to show some informative text and/or subtitles (in markdown). See section \"Question types\" below.  enableWhen  (array of objects): A list of criteria for when this question should be visible to the user. Each criterium in the list is connected to the other by boolean OR operators by default, with AND operators being implemented by an extension. See the section \"Questionnaire extensions\".", 
            "title": "Questionnaire items"
        }, 
        {
            "location": "/api/fhir/resources/#questionnaire-extensions", 
            "text": "See the  extensions page .", 
            "title": "Questionnaire extensions"
        }, 
        {
            "location": "/api/fhir/resources/#selfcarequestionnaireresponse", 
            "text": "Inherits from :  QuestionnaireResponse  FHIR profile :  SelfCareQuestionnaireResponse  The  SelfCareQuestionnaireResponse  is the counterpart to a Questionnaire: it contains the answers that the user has provided. This can be sent to EBMeDS for decision support.  Here is a complete example:  {\n   resourceType :  QuestionnaireResponse ,\n   id :  0685d814-f4af-41a3-8547-5c7e5f97c923 ,\n   questionnaire : {\n     identifier : {\n       system :  https://duodecim.fi/fhir/sid/vkt-questionnaire-id ,\n       value :  21 \n    }\n  },\n   status :  completed ,\n   item : [\n    {\n       linkId :  introduction ,\n       text :  Introductory text of the questionnaire. Also a container item. Has no answer, but contains other items. The text is written in markdown, so it may contain [links](https://ebmeds.org). \n       item : [\n        {\n           linkId :  266 ,\n           text :  A display-type question in the Questionnaire, has no answer but must also be present in the QuestionnaireResponse according to the FHIR spec. \n        },\n        {\n           linkId :  3 ,\n           text :  A question with a numeric answer. (For example, age.) ,\n           answer : [\n            {\n               valueDecimal : 45\n            }\n          ]\n        },\n        {\n           linkId :  306 ,\n           text :  'Check box' type multiple choice questions may naturally have   1 answers. ,\n           answer : [\n            {\n               valueCoding : {\n                 id :  452 \n              }\n            },\n            {\n               valueCoding : {\n                 id :  453 \n              }\n            }\n          ]\n        },\n        {\n           linkId :  305 ,\n           text :  A 'radio button' type multiple choice question. In the QuestionnaireResponse, looks identical to a checkbox answer with one answer checked. ,\n           answer : [\n            {\n               valueCoding : {\n                 id :  462 \n              }\n            }\n          ]\n        },\n        {\n           linkId :  23 \n           text :  A boolean-type question. In the Questionnaire this question contains display logic, i.e. the question is only visible when certain other questions have been answered in a certain way. In this example, the numerical answer in question ID 3 must be between 15 and 99. \n           answer : [\n            {\n               valueBoolean : true\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}  So the structure has the following fields:   resourceType  (string): Always  QuestionnaireResponse .  id  (string,  optional ): A unique ID, UUID works great. Not needed for CDS, but good to have for archiving purposes.  questionnaire.identifier  (object): A unique identifier for the Questionnaire that this QuestionnaireResponse answers.  system  (string): Always  https://duodecim.fi/fhir/sid/vkt-questionnaire-id  value  (string): A unique ID for the Questionnaire.    status  (string): Always  completed .  item  (array of objects): Tree hierarchy of the answers to the questionnaire. The hierarchy must be the same as the question hierarchy in the Questionnaire.  item  (see above,  optional ): Items may contain other items.  linkId  (string): The unique ID of the question in the Questionnaire resource (also named  linkId  there). This ID is in fact globally unique for all Duodecim Questionnaires.  answer  (array,  optional ): array of objects with property  value[x] , corresponding to the Questionnaire  answer[x]  field for the question. The length of the array is always 1, or  = 1 if it is a multiple choice question ( valueCoding ).  valueBoolean  (boolean): A yes or no question answer.  valueDecimal  (number): A decimal-valued question answer.  valueCoding  (object): has one property,  id  (string), the ID of the wanted answer. Also globally unique ID in all Duodecim Questionnaires.    text  (markdown string,  optional ): The question text from the Questionnaire repeated here, mostly to aid debugging.", 
            "title": "SelfCareQuestionnaireResponse"
        }, 
        {
            "location": "/api/fhir/resources/#selfcareactivitydefinition", 
            "text": "Inherits from :  ActivityDefinition  FHIR profile :  SelfCareActivityDefinition  The main point of the FHIR resource  SelfCareActivityDefinition  is to describe an action. In the traditional CDS context the primary unit is the reminder, an informative message that may have an encoded action suggestion attached to it. In the self-care context it is the other way around: we return actions that have messages attached to them.  In practice, this means that if several reminders suggest the same action, only one SelfCareActivityDefinition is returned, with several reminder texts attached to it. This also means that the card structure of CDS hooks becomes meaningless, see the discussion at the bottom of  this page .", 
            "title": "SelfCareActivityDefinition"
        }, 
        {
            "location": "/api/fhir/resources/#data-model", 
            "text": "The ActivityDefinitions in the  selfcare-*  hooks separate the reminder texts from their suggested actions. Given a set of reminders, each with 0 or more suggested actions attached to them, the reminder texts and actions are split up into several SelfCareActivityDefinitions:   Zero or one ActivityDefinition containing the code system  https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions  and the code  read-reminder . This resource contains all reminder texts with severity level  reminder  in its  topic.text  field.  Zero or one ActivityDefinition containing the code system  https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions  and the code  read-prompt . This resource contains all reminder texts with severity level  prompt  in its  topic.text  field.  Zero or one ActivityDefinition containing the code system  https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions  and the code  read-alert . This resource contains all reminder texts with severity level  alert  in its  topic.text  field.  Zero or more ActivityDefinition containing any other code system and code, representing the actual actions.   In other words: ActivityDefinitions of type 1-3 may or may not be present, but at least one of them contains at least one reminder text. See below for an example.", 
            "title": "Data model"
        }, 
        {
            "location": "/api/fhir/resources/#code-systems", 
            "text": "These code systems are used when coding an ActivityDefinition. See the  code systems page  for more detailed information.   https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions : custom codes identifying special types of ActivityDefinitions, like above.  http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023 versionKey=2283  a.k.a. OID  1.2.246.537.6.49 : THL Sosiaali- ja terveysalan palvelunimikkeist\u00f6  http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=88 versionKey=120  a.k.a. OID  1.2.246.537.6.3 : Kuntaliitto", 
            "title": "Code systems"
        }, 
        {
            "location": "/api/fhir/resources/#restrictions", 
            "text": "Some restrictions have been put in place to simplify data processing, using the  SelfCareActivityDefinition  profile.   A SelfCareActivityDefinition is described by exactly one code, i.e.  code  must be present and  code.coding  may contain only one coding. The coding represents some kind of action.  A reminder must have exactly one  participant , i.e. the intended recipient of this SelfCareActivityDefinition. This is either the patient or a medical professional.  The ActivityDefinitions are always freshly generated, so their  status  is always  active .", 
            "title": "Restrictions"
        }, 
        {
            "location": "/api/fhir/resources/#example_1", 
            "text": "Below is an example of the two kinds of SelfCareActivityDefinitions (one describing an action, one containing reminder texts) in a CDS response:  {\n   cards : [\n    {\n       summary :  Selfcare action suggestions ,\n       indicator :  info ,\n       source : {\n         name :  EBMeDS v2.0.6 ,\n         url :  https://ebmeds.org/version/v2.0.6/data-version/v0.9.2 \n      },\n       suggestions : [\n        {\n           resourceType :  ActivityDefinition ,\n           status :  active ,\n           copyright :  Kustannus Oy Duodecim, 2017 ,\n           participant : [\n            {\n               type :  patient \n            }\n          ],\n           kind :  Observation ,\n           code : {\n             coding : [\n              {\n                 code :  ADA001-P1 ,\n                 system :  http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023 versionKey=2283 ,\n                 display :  Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Hoidetaan p\u00e4ivystyksen\u00e4 \n              }\n            ]\n          }\n        },\n        {\n           resourceType :  ActivityDefinition ,\n           status :  active ,\n           copyright :  Kustannus Oy Duodecim, 2017 ,\n           participant : [\n            {\n               type :  patient \n            }\n          ],\n           kind :  CommunicationRequest ,\n           code : {\n             coding : [\n              {\n                 system :  https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions ,\n                 code :  read-reminder ,\n                 display :  Lue muistutteet \n              }\n            ]\n          },\n           topic : [\n            {\n               text :  Oireesi voivat johtua virtsatietulehduksesta, joka voi olla munuaistasoinen. Hakeudu p\u00e4ivystysvastaanotolle. ,\n               coding : [\n                {\n                   system :  https://duodecim.fi/fhir/stu3/CodeSystem/reminder-id ,\n                   code :  46bea5c0-c18e-4e78-a20c-06974bae60f7 ,\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}  And the fields are described as follows.   resourceType  (string): Always  ActivityDefinition  for this resource.  status  (string): Only  active  ActivityDefinitions are returned.  code  (object, CodeableConcept): The code describing the action.  coding : container object for a code + code system  system  (string): The code system used in this code. See  a list of used code systems .  code  (string): The actual code, a symbol in the given system.  display  (string): Human-readable description of the action.      topic  (array,  optional ):  text  (markdown string): The reminder text itself. May contain http links and text with light styling.  coding.code  (UUID): The unique ID of this particular reminder message.  coding.system : Always  https://duodecim.fi/fhir/stu3/CodeSystem/reminder-id .    participant  (array of objects): A list of participants and their roles. In practice there is only ever one entry in this list. Each object contains the following field:  type  (string): one of  patient ,  practitioner  or  related-person . Only  patient  is in practical use at the moment.    copyright  (string): A standard copyright notice.", 
            "title": "Example"
        }, 
        {
            "location": "/api/fhir/resources/#selfcareobservation", 
            "text": "Inherits from :  Observation  FHIR profile :  SelfCareObservation  A very simple resource describing some new observation made about the patient from the basis of his or her patient data.", 
            "title": "SelfCareObservation"
        }, 
        {
            "location": "/api/fhir/resources/#example_2", 
            "text": "{\n   status :  final ,\n   code : {\n     coding : [\n      {\n         system :  https://duodecim.fi/fhir/stu3/CodeSystem/custom-observations ,\n         code :  potential-extra-years \n      }\n    ]\n  },\n   effectiveDateTime :  2018-04-25T11:13:56.894Z ,\n   valueQuantity : {\n     unit :  a ,\n     value : 5\n  }\n}  And the fields are the following:   code.coding : The code system and coding describing the concept.  effectiveDateTime  (date string): When this observation was created.  valueQuantity  or  valueString : The actual value, either as a number with a unit (Quantity) or as a string.", 
            "title": "Example"
        }, 
        {
            "location": "/api/fhir/resources/#selfcareriskassessment", 
            "text": "Inherits from :  RiskAssessment  FHIR profile :  SelfCareRiskAssessment  A resource describing some newly calculated risk regarding the patient, from the basis of his or her patient data. The risk is always associated with a certain outcome (with a diagnosis code or similar), and the age range in years for which this risk is applicable for this particular patient. The risk probability is always given as a decimal between 0 and 1.", 
            "title": "SelfCareRiskAssessment"
        }, 
        {
            "location": "/api/fhir/resources/#example_3", 
            "text": "{\n   status :  final ,\n   prediction : [\n     outcome : {\n       coding : [{\n         system :  http://snomed.info/sct ,\n         code :  414545008 \n      }]\n    },\n     probabilityDecimal : 0.40,\n     whenRange : {\n       low : {\n         value : 52,\n         unit :  a \n      },\n       high : {\n         value : 62,\n         unit :  a \n      }\n    }\n  ]\n}  And the fields are the following:   prediction.outcome : The code system and coding describing the outcome that may occur.  prediction.probabilityDecimal  (decimal between 0 and 1): The probability of the outcome occurring.  whenRange : The patient's age range for which this risk has been calculated.", 
            "title": "Example"
        }, 
        {
            "location": "/api/fhir/resources/#resources-for-general-cds", 
            "text": "At the moment, EBMeDS best supports questionnaire-based decision support in FHIR, using the resources described above. For a full-blown CDS service, a large range of other clinical data about a person can and should be included. The resources for describing these is in a very experimental stage, and the profiles will probably change once real-world use is initiated. The documentation is therefore still mostly in the profiles themselves:   CDSImmunization  CDSMedicationStatement  CDSProcedure  CDSProcedureRequest  DiagnosisCondition  DrugAllergyIntolerance  MeasurementObservation  MonitoringGoal  NonIdentifiablePatient  SimpleFamilyMemberHistory", 
            "title": "Resources for general CDS"
        }, 
        {
            "location": "/api/fhir/code-systems/", 
            "text": "Used Code Systems\n\n\nEBMeDS uses codes in a lot of different places. Below is a list of the code systems used in different parts of the system.\n\n\nMedical code systems\n\n\nThe full list of code systems for medical or clinical matters is given here: \n\n\nFor \nselfcare-*\n endpoints EBMeDS may return a customized coding related to actions a patient can do himself, unsupervised. This coding does not yet have an official code system, but is instead an amalgam of an existing code system (Finnish THL service coding or Kuntaliitto service coding) and an urgency code, separated by \"-\", for example \nADA001-P2\n. The urgency code means:\n\n\n\n\nP0\n: Immediately\n\n\nP1\n: Within 2 hours\n\n\nP2\n: Within 10 hours\n\n\nP3\n: Within 1 day\n\n\nP4\n: Within 3 days\n\n\nL2\n: Within 7 days\n\n\nL3\n: Within 30 days\n\n\nL4\n: Within more than 30 days\n\n\n\n\nAnd the service codings used (at the moment) are, in Finnish:\n\n\n\n\nTHL service coding \nhttp://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023\nversionKey=2283\n a.k.a. OID \n1.2.246.537.6.49\n\n\nAA-P0\n: H\u00e4t\u00e4keskuspalvelu - Hoidetaan v\u00e4litt\u00f6m\u00e4sti - yhteys h\u00e4t\u00e4keskukseen\n\n\nADA001-P1\n: Terveysalan p\u00e4ivystyspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4\n\n\nADA001-P2\n: Terveysalan p\u00e4ivystyspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4\n\n\nADA001-P2\n: Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyspalvelut - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4\n\n\nADA001-P3\n: Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyspalvelut - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (1 vrk)\n\n\nADA001-P4\n: Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (2-3 vrk)\n\n\nBAB-L2\n: Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - 4-7 p\u00e4iv\u00e4\u00e4\n\n\nBAB-P2\n: Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4\n\n\nBAB-P3\n: Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk)\n\n\nBAB-P4\n: Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk)\n\n\nEDA-P2\n: Sairaanhoitajan peruspalvelut - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4\n\n\nEDA-P3\n: Sairaanhoitajan vastaanotto - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk)\n\n\nEDA-P4\n: Sairaanhoitajan vastaanotto - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk)\n\n\nEEA-L2\n: Yleisl\u00e4\u00e4k\u00e4rin peruspalvelu - 4 - 7 p\u00e4iv\u00e4\u00e4\n\n\nEEA-P4\n: Yleisl\u00e4\u00e4k\u00e4rin peruspalvelu - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (2 - 3 vrk)\n\n\nHBA-L2\n: Fysioterapian palvelut - 4-7 p\u00e4iv\u00e4\u00e4\n\n\nLAD-P4\n: Ultra\u00e4\u00e4nitutkimus - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk)\n\n\n\n\n\n\nKuntaliitto service coding \nhttp://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=88\nversionKey=120\n\n\n1155-P2\n: Virtsan bakteeriviljely (http://www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab30391) - Hoidetaan p\u00e4ivystyksen\u00e4, muttei y\u00f6ll\u00e4\n\n\n1881-P2\n: Virtsan kemiallinen seulonta (http://www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab31886) - Hoidetaan p\u00e4ivystyksen\u00e4 mutta ei y\u00f6ll\u00e4\n\n\n3635-P3\n: Streptokokkipikatesti nielusta (www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab33681) - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk)\n\n\n4594-P2\n: P-CRP - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4\n\n\n\n\n\n\n\n\nFHIR resource-specific code systems\n\n\nSome code systems are specific to certain resources. They are listed below. The CodeSystem resources can be found at \n.\n\n\nQuestionnaire\n\n\n\n\nhttps://duodecim.fi/fhir/sid/vkt-questionnaire-id\n: ID for questionnaire in VKT. In practice an integer string, e.g. \n\"348\"\n\n\nhttp://loinc.org\n: LOINC, for coding what type of measurement the question is asking about.\n\n\nhttp://hl7.org/fhir/sid/icd-10-fi\n: ICD10, for coding what type of diagnosis the question is asking about.\n\n\n\n\nIn the ODA project, some ODA specific code systems are used:\n\n\n\n\nhttp://oda.fi/Questionnaire\n: Identifies the subtype of SelfCareQuestionnaire. Values: \nsymptom\n, other values unknown.\n\n\nhttp://oda.fi/cds\n: Tags what CDSS should be used. For EBMeDS, the value is \noda1\n.\n\n\n\n\nActivityDefinition\n\n\n\n\nhttps://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions\n: The identifier for ActivityDefinitions containing reminder texts of different priorities, as above. Values:\n\n\nread-reminder\n (normal priority)\n\n\nread-prompt\n (medium priority)\n\n\nread-alert\n (high priority)\n\n\n\n\n\n\n\n\nObservation\n\n\n\n\nhttps://duodecim.fi/fhir/stu3/CodeSystem/custom-observations\n: Some observations are not mappable to international codes and must therefore be given \nsome\n code. This is the codesystem for that\n\n\nexpected-lifetime\n: The expected age in years a patient is expected to live to.\n\n\npotential-extra-years\n: The increase in lifespan if the patient starts living according to healthy lifestyle recommendations.", 
            "title": "Code Systems"
        }, 
        {
            "location": "/api/fhir/code-systems/#used-code-systems", 
            "text": "EBMeDS uses codes in a lot of different places. Below is a list of the code systems used in different parts of the system.", 
            "title": "Used Code Systems"
        }, 
        {
            "location": "/api/fhir/code-systems/#medical-code-systems", 
            "text": "The full list of code systems for medical or clinical matters is given here:   For  selfcare-*  endpoints EBMeDS may return a customized coding related to actions a patient can do himself, unsupervised. This coding does not yet have an official code system, but is instead an amalgam of an existing code system (Finnish THL service coding or Kuntaliitto service coding) and an urgency code, separated by \"-\", for example  ADA001-P2 . The urgency code means:   P0 : Immediately  P1 : Within 2 hours  P2 : Within 10 hours  P3 : Within 1 day  P4 : Within 3 days  L2 : Within 7 days  L3 : Within 30 days  L4 : Within more than 30 days   And the service codings used (at the moment) are, in Finnish:   THL service coding  http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=2023 versionKey=2283  a.k.a. OID  1.2.246.537.6.49  AA-P0 : H\u00e4t\u00e4keskuspalvelu - Hoidetaan v\u00e4litt\u00f6m\u00e4sti - yhteys h\u00e4t\u00e4keskukseen  ADA001-P1 : Terveysalan p\u00e4ivystyspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4  ADA001-P2 : Terveysalan p\u00e4ivystyspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4  ADA001-P2 : Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyspalvelut - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4  ADA001-P3 : Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyspalvelut - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (1 vrk)  ADA001-P4 : Yleisl\u00e4\u00e4k\u00e4rin p\u00e4ivystyksen palvelut - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (2-3 vrk)  BAB-L2 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - 4-7 p\u00e4iv\u00e4\u00e4  BAB-P2 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4  BAB-P3 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk)  BAB-P4 : Sairauden hoitoon liittyv\u00e4 neuvonta- ja ohjauspalvelu - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk)  EDA-P2 : Sairaanhoitajan peruspalvelut - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4  EDA-P3 : Sairaanhoitajan vastaanotto - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk)  EDA-P4 : Sairaanhoitajan vastaanotto - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk)  EEA-L2 : Yleisl\u00e4\u00e4k\u00e4rin peruspalvelu - 4 - 7 p\u00e4iv\u00e4\u00e4  EEA-P4 : Yleisl\u00e4\u00e4k\u00e4rin peruspalvelu - Voidaan siirt\u00e4\u00e4 virka-ajan l\u00e4\u00e4k\u00e4rille (2 - 3 vrk)  HBA-L2 : Fysioterapian palvelut - 4-7 p\u00e4iv\u00e4\u00e4  LAD-P4 : Ultra\u00e4\u00e4nitutkimus - Voidaan siirt\u00e4\u00e4 virka-aikaan (2 - 3 vrk)    Kuntaliitto service coding  http://91.202.112.142/codeserver/pages/classification-view-page.xhtml?classificationKey=88 versionKey=120  1155-P2 : Virtsan bakteeriviljely (http://www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab30391) - Hoidetaan p\u00e4ivystyksen\u00e4, muttei y\u00f6ll\u00e4  1881-P2 : Virtsan kemiallinen seulonta (http://www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab31886) - Hoidetaan p\u00e4ivystyksen\u00e4 mutta ei y\u00f6ll\u00e4  3635-P3 : Streptokokkipikatesti nielusta (www.terveysportti.fi/dtk/ltk/avaa?p_artikkeli=lab33681) - Voidaan siirt\u00e4\u00e4 virka-aikaan (1 vrk)  4594-P2 : P-CRP - Hoidetaan p\u00e4ivystyksen\u00e4, mutta ei y\u00f6ll\u00e4", 
            "title": "Medical code systems"
        }, 
        {
            "location": "/api/fhir/code-systems/#fhir-resource-specific-code-systems", 
            "text": "Some code systems are specific to certain resources. They are listed below. The CodeSystem resources can be found at  .", 
            "title": "FHIR resource-specific code systems"
        }, 
        {
            "location": "/api/fhir/code-systems/#questionnaire", 
            "text": "https://duodecim.fi/fhir/sid/vkt-questionnaire-id : ID for questionnaire in VKT. In practice an integer string, e.g.  \"348\"  http://loinc.org : LOINC, for coding what type of measurement the question is asking about.  http://hl7.org/fhir/sid/icd-10-fi : ICD10, for coding what type of diagnosis the question is asking about.   In the ODA project, some ODA specific code systems are used:   http://oda.fi/Questionnaire : Identifies the subtype of SelfCareQuestionnaire. Values:  symptom , other values unknown.  http://oda.fi/cds : Tags what CDSS should be used. For EBMeDS, the value is  oda1 .", 
            "title": "Questionnaire"
        }, 
        {
            "location": "/api/fhir/code-systems/#activitydefinition", 
            "text": "https://duodecim.fi/fhir/stu3/CodeSystem/activity-definition-custom-actions : The identifier for ActivityDefinitions containing reminder texts of different priorities, as above. Values:  read-reminder  (normal priority)  read-prompt  (medium priority)  read-alert  (high priority)", 
            "title": "ActivityDefinition"
        }, 
        {
            "location": "/api/fhir/code-systems/#observation", 
            "text": "https://duodecim.fi/fhir/stu3/CodeSystem/custom-observations : Some observations are not mappable to international codes and must therefore be given  some  code. This is the codesystem for that  expected-lifetime : The expected age in years a patient is expected to live to.  potential-extra-years : The increase in lifespan if the patient starts living according to healthy lifestyle recommendations.", 
            "title": "Observation"
        }, 
        {
            "location": "/api/fhir/extensions/", 
            "text": "Questionnaire extensions\n\n\nself-care-instructions\n\n\n\n\nURL: \nhttps://duodecim.fi/fhir/extensions/self-care-instructions\n\n\nLocation: Questionnaire root\n\n\n\n\nContains the sub-extension \ninstruction-text\n. Has a string value which is a markdown string containing a link to long-form self-care instructions.\n\n\nExample:\n\n\n{\n  \nurl\n:\nhttps://duodecim.fi/fhir/extensions/self-care-instructions\n,\n  \nextension\n:[\n    {\n      \nurl\n:\ninstruction-text\n,\n      \nvalueString\n:\n[Itsehoito-ohje](http://www.terveyskirjasto.fi/terveyskirjasto/tk.koti?p_artikkeli=dlk01167)\n\n    }\n  ]\n}\n\n\n\n\ndisplayCategory\n\n\n\n\nURL: \nhttp://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory\n\n\nLocation: Questionnaire.item (and sub-items)\n\n\n\n\nQuestion with \ntype: 'display'\n require a few more subcategories, which is the purpose of this HL7 extension. The allowed values are:\n\n\n\n\nsubtitle\n: As the name implies, a string designed to be a subtitle. The \ntext\n field in this question is also styled with a markdown-style subtitle tag (\n# Example subtitle\n).\n\n\nfeedback\n: Answering a set of questions in a certain way may provoke some immediate feedback in the questionnaire itself, without having to send the QuestionnaireResponse to EBMeDS. This display-type question contains this kind of feedback.\n\n\nterminus\n: This is similar to \nfeedback\n, except that if the user has answered questions that produce this type of feedback, the situation is so critical that he should be stopped from answering any more questions, and immediately seek help. The UI should hide the questions following this feedback type, if it is visible.\n\n\n\n\nExample:\n\n\n{\n  \nlinkId\n:\n14\n,\n  \ntext\n:\n# A subtitle\n,\n  \ntype\n:\ndisplay\n,\n  \nextension\n:[\n    {\n      \nurl\n:\nhttp://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory\n,\n      \nvalueString\n:\nsubtitle\n\n    }\n  ]\n}\n{\n  \nlinkId\n:\n15\n,\n  \ntext\n:\nThings are really bad.\n,\n  \ntype\n:\ndisplay\n,\n  \nextension\n:[\n    {\n      \nurl\n:\nhttp://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory\n,\n      \nvalueString\n:\nterminus\n\n    }\n  ]\n}\n\n\n\n\nminValue\n\n\n\n\nURL: \nhttp://hl7.org/fhir/StructureDefinition/minValue\n\n\nLocation: Questionnaire.item (and sub-items)\n\n\n\n\nExtension by HL7 to specify a minimum value for a numerical question. Is often seen together with maxValue.\n\n\nExample:\n\n\n{\n  \nlinkId\n:\n15\n,\n  \ntext\n:\nGive the length of your foot.\n,\n  \ntype\n:\ndecimal\n,\n  \nextension\n:[\n    {\n      \nurl\n: \nhttp://hl7.org/fhir/StructureDefinition/minValue\n,\n      \nvalueDecimal\n: 15.3\n    }\n  ]\n}\n\n\n\n\nmaxValue\n\n\n\n\nURL: \nhttp://hl7.org/fhir/StructureDefinition/minValue\n\n\nLocation: Questionnaire.item (and sub-items)\n\n\n\n\nExtension by HL7 to specify a maximum value for a numerical question. Is often seen together with minValue.\n\n\nExample:\n\n\n{\n  \nlinkId\n:\n15\n,\n  \ntext\n:\nGive your age.\n,\n  \ntype\n:\ndecimal\n,\n  \nextension\n:[\n    {\n      \nurl\n: \nhttp://hl7.org/fhir/StructureDefinition/maxValue\n,\n      \nvalueDecimal\n: 100.3\n    }\n  ]\n}\n\n\n\n\nThere is some special UI logic required to handle a multiple choice question with the choice \"none of the above\". For this we use an extension that marks one of the choices as exclusive:\n\n\noptionExclusive\n\n\n\n\nURL: \nhttp://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive\n\n\nLocation: Questionnaire.item.option (and in sub-items)\n\n\n\n\nHL7 extension to specify that a multiple choice answer is \nexclusive\n, i.e. in a 'checkbox' multiple choice question, if you check this answer, all other options are taken to be unchecked, and should be greyed out in the UI. Mainly used for 'none of the above' types of answer choices.\n\n\nExample:\n\n\n{\n  \nvalueCoding\n:{\n    \nid\n: \n-1\n,\n    \ndisplay\n: \nNone of the above\n\n    \nextension\n: [\n      {\n        \nurl\n: \nhttp://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive\n,\n        \nvalueBoolean\n: true\n      }\n    ]\n  }\n}\n\n\n\n\nmaxDecimalPlaces\n\n\n\n\nURL: \nhttp://hl7.org/fhir/StructureDefinition/maxDecimalPlaces\n\n\nLocation: Questionnaire.item (and sub-items)\n\n\n\n\nFor questions of type \ndecimal\n, specifies an integer value signifying the maximum number of decimal places that a user is allowed to fill in for his answer. If the extension is not present, the value is taken to be infinity. If the value is 0, the question type should be \ninteger\n instead.\n\n\n{\n  \nlinkId\n:\n15\n,\n  \ntext\n:\nGive your age with 2 decimal precision.\n,\n  \ntype\n:\ndecimal\n,\n  \nextension\n:[\n    {\n      \nurl\n: \nhttp://hl7.org/fhir/StructureDefinition/maxDecimalPlaces\n,\n      \nvalueInteger\n: 2\n    }\n  ]\n}\n\n\n\n\nenable-when-operator\n\n\n\n\nURL: \nhttps://duodecim.fi/fhir/extensions/enable-when-operator\n\n\nLocation: Questionnaire.item.enableWhen (and in sub-items)\n\n\n\n\nThe display logic conditions in \nQuestionnaire.item.enableWhen\n are given in an array. By default, the question should be visible when \nany\n of the listed conditions are true. This extension takes a string value \nAND\n, \nOR\n, \nNOT\n. They should be interpreted in the following manner:\n\n\n\n\nOR\n: If the condition extension contains this value, the logical operator between this condition and the previous condition in the array is the boolean OR. (This is the default when the extension is not present.)\n\n\nAND\n: As above, but the boolean operator is AND.\n\n\nNOT\n: This applies the NOT operator to the current condition.\n\n\n\n\nThe same extension may be present multiple times in a condition, to construct e.g. AND NOT.\n\n\nExample:\n\n\n{\n  \nlinkId\n: \n23\n,\n  \nrequired\n: true,\n  \ntype\n: \nboolean\n,\n  \nenableWhen\n: [\n    {\n      \nquestion\n: \n3\n,\n      \nanswerQuantity\n: {\n        \nvalue\n: 15,\n        \ncomparator\n: \n\n      }\n    },\n    {\n      \nquestion\n: \n3\n,\n      \nextension\n: [\n        {\n          \nurl\n: \nhttps://duodecim.fi/fhir/extensions/enable-when-operator\n,\n          \nvalueString\n: \nAND\n\n        }\n      ],\n      \nanswerQuantity\n: {\n        \nvalue\n: 99,\n        \ncomparator\n: \n\n      }\n    }\n  ]\n}", 
            "title": "Extensions"
        }, 
        {
            "location": "/api/fhir/extensions/#questionnaire-extensions", 
            "text": "", 
            "title": "Questionnaire extensions"
        }, 
        {
            "location": "/api/fhir/extensions/#self-care-instructions", 
            "text": "URL:  https://duodecim.fi/fhir/extensions/self-care-instructions  Location: Questionnaire root   Contains the sub-extension  instruction-text . Has a string value which is a markdown string containing a link to long-form self-care instructions.  Example:  {\n   url : https://duodecim.fi/fhir/extensions/self-care-instructions ,\n   extension :[\n    {\n       url : instruction-text ,\n       valueString : [Itsehoito-ohje](http://www.terveyskirjasto.fi/terveyskirjasto/tk.koti?p_artikkeli=dlk01167) \n    }\n  ]\n}", 
            "title": "self-care-instructions"
        }, 
        {
            "location": "/api/fhir/extensions/#displaycategory", 
            "text": "URL:  http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory  Location: Questionnaire.item (and sub-items)   Question with  type: 'display'  require a few more subcategories, which is the purpose of this HL7 extension. The allowed values are:   subtitle : As the name implies, a string designed to be a subtitle. The  text  field in this question is also styled with a markdown-style subtitle tag ( # Example subtitle ).  feedback : Answering a set of questions in a certain way may provoke some immediate feedback in the questionnaire itself, without having to send the QuestionnaireResponse to EBMeDS. This display-type question contains this kind of feedback.  terminus : This is similar to  feedback , except that if the user has answered questions that produce this type of feedback, the situation is so critical that he should be stopped from answering any more questions, and immediately seek help. The UI should hide the questions following this feedback type, if it is visible.   Example:  {\n   linkId : 14 ,\n   text : # A subtitle ,\n   type : display ,\n   extension :[\n    {\n       url : http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory ,\n       valueString : subtitle \n    }\n  ]\n}\n{\n   linkId : 15 ,\n   text : Things are really bad. ,\n   type : display ,\n   extension :[\n    {\n       url : http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory ,\n       valueString : terminus \n    }\n  ]\n}", 
            "title": "displayCategory"
        }, 
        {
            "location": "/api/fhir/extensions/#minvalue", 
            "text": "URL:  http://hl7.org/fhir/StructureDefinition/minValue  Location: Questionnaire.item (and sub-items)   Extension by HL7 to specify a minimum value for a numerical question. Is often seen together with maxValue.  Example:  {\n   linkId : 15 ,\n   text : Give the length of your foot. ,\n   type : decimal ,\n   extension :[\n    {\n       url :  http://hl7.org/fhir/StructureDefinition/minValue ,\n       valueDecimal : 15.3\n    }\n  ]\n}", 
            "title": "minValue"
        }, 
        {
            "location": "/api/fhir/extensions/#maxvalue", 
            "text": "URL:  http://hl7.org/fhir/StructureDefinition/minValue  Location: Questionnaire.item (and sub-items)   Extension by HL7 to specify a maximum value for a numerical question. Is often seen together with minValue.  Example:  {\n   linkId : 15 ,\n   text : Give your age. ,\n   type : decimal ,\n   extension :[\n    {\n       url :  http://hl7.org/fhir/StructureDefinition/maxValue ,\n       valueDecimal : 100.3\n    }\n  ]\n}  There is some special UI logic required to handle a multiple choice question with the choice \"none of the above\". For this we use an extension that marks one of the choices as exclusive:", 
            "title": "maxValue"
        }, 
        {
            "location": "/api/fhir/extensions/#optionexclusive", 
            "text": "URL:  http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive  Location: Questionnaire.item.option (and in sub-items)   HL7 extension to specify that a multiple choice answer is  exclusive , i.e. in a 'checkbox' multiple choice question, if you check this answer, all other options are taken to be unchecked, and should be greyed out in the UI. Mainly used for 'none of the above' types of answer choices.  Example:  {\n   valueCoding :{\n     id :  -1 ,\n     display :  None of the above \n     extension : [\n      {\n         url :  http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive ,\n         valueBoolean : true\n      }\n    ]\n  }\n}", 
            "title": "optionExclusive"
        }, 
        {
            "location": "/api/fhir/extensions/#maxdecimalplaces", 
            "text": "URL:  http://hl7.org/fhir/StructureDefinition/maxDecimalPlaces  Location: Questionnaire.item (and sub-items)   For questions of type  decimal , specifies an integer value signifying the maximum number of decimal places that a user is allowed to fill in for his answer. If the extension is not present, the value is taken to be infinity. If the value is 0, the question type should be  integer  instead.  {\n   linkId : 15 ,\n   text : Give your age with 2 decimal precision. ,\n   type : decimal ,\n   extension :[\n    {\n       url :  http://hl7.org/fhir/StructureDefinition/maxDecimalPlaces ,\n       valueInteger : 2\n    }\n  ]\n}", 
            "title": "maxDecimalPlaces"
        }, 
        {
            "location": "/api/fhir/extensions/#enable-when-operator", 
            "text": "URL:  https://duodecim.fi/fhir/extensions/enable-when-operator  Location: Questionnaire.item.enableWhen (and in sub-items)   The display logic conditions in  Questionnaire.item.enableWhen  are given in an array. By default, the question should be visible when  any  of the listed conditions are true. This extension takes a string value  AND ,  OR ,  NOT . They should be interpreted in the following manner:   OR : If the condition extension contains this value, the logical operator between this condition and the previous condition in the array is the boolean OR. (This is the default when the extension is not present.)  AND : As above, but the boolean operator is AND.  NOT : This applies the NOT operator to the current condition.   The same extension may be present multiple times in a condition, to construct e.g. AND NOT.  Example:  {\n   linkId :  23 ,\n   required : true,\n   type :  boolean ,\n   enableWhen : [\n    {\n       question :  3 ,\n       answerQuantity : {\n         value : 15,\n         comparator :  \n      }\n    },\n    {\n       question :  3 ,\n       extension : [\n        {\n           url :  https://duodecim.fi/fhir/extensions/enable-when-operator ,\n           valueString :  AND \n        }\n      ],\n       answerQuantity : {\n         value : 99,\n         comparator :  \n      }\n    }\n  ]\n}", 
            "title": "enable-when-operator"
        }, 
        {
            "location": "/api/fhir/oda/", 
            "text": "ODA project-specific customization\n\n\nSelfCareQuestionnaire FHIR resource\n\n\nIn the \nselfcare-*\n CDS hooks, the following metadata is included (by request from the ODA project) in the SelfCareQuestionnaire resource:\n\n\nmeta\n:{\n  \nprofile\n:[\n    \nhttp://phr.kanta.fi/StructureDefinition/fiphr-questionnaire-stu3\n\n  ],\n  \ntag\n:[\n    {\n      \nsystem\n:\nhttp://oda.fi/Questionnaire\n,\n      \ncode\n:\nsymptom\n\n    },\n    {\n      \nsystem\n:\nhttp://oda.fi/cds\n,\n      \ncode\n:\noda1\n\n    }\n  ]\n}\n\n\n\n\nSelfCareQuestionnaire push\n\n\nWhen new questionnaires (or versions of questionnaires) are available for use in the self-care context, they are pushed to a server specified by the ODA project.", 
            "title": "ODA-specific information"
        }, 
        {
            "location": "/api/fhir/oda/#oda-project-specific-customization", 
            "text": "", 
            "title": "ODA project-specific customization"
        }, 
        {
            "location": "/api/fhir/oda/#selfcarequestionnaire-fhir-resource", 
            "text": "In the  selfcare-*  CDS hooks, the following metadata is included (by request from the ODA project) in the SelfCareQuestionnaire resource:  meta :{\n   profile :[\n     http://phr.kanta.fi/StructureDefinition/fiphr-questionnaire-stu3 \n  ],\n   tag :[\n    {\n       system : http://oda.fi/Questionnaire ,\n       code : symptom \n    },\n    {\n       system : http://oda.fi/cds ,\n       code : oda1 \n    }\n  ]\n}", 
            "title": "SelfCareQuestionnaire FHIR resource"
        }, 
        {
            "location": "/api/fhir/oda/#selfcarequestionnaire-push", 
            "text": "When new questionnaires (or versions of questionnaires) are available for use in the self-care context, they are pushed to a server specified by the ODA project.", 
            "title": "SelfCareQuestionnaire push"
        }, 
        {
            "location": "/api/xml/getting-started/", 
            "text": "", 
            "title": "Getting started"
        }, 
        {
            "location": "/api/xml/xml-schema/", 
            "text": "", 
            "title": "XML schema"
        }, 
        {
            "location": "/security/", 
            "text": "Security\n\n\nNetwork security\n\n\nHTTP/HTTPS\n\n\nBy default, EBMeDS 2.0 serves its API over HTTP, with no encryption. It is, however, strongly recommended to enable HTTPS or use a reverse proxy like \nnginx\n to provide SSL termination. There are two potentially public service that is good to protect: \napi-gateway\n and \nkibana\n.\n\n\nEnabling native HTTPS for \napi-gateway\n\n\nHTTPS is enabled by setting the environment variable \nHTTP_MODE\n to \nhttps\n when launching the \napi-gateway\n container. In addition to this, the system administrator must obtain/generate a .key and .crt file and bind mount them onto the container so they may be read by the \napi-gateway\n service.\n\n\nInside the container, the path to the aforementioned key and certificate files are by default \nssl/server.key\n and \nssl/server.crt\n but may be configured with the environment variables \nHTTPS_KEY_PATH\n and \nHTTPS_CERT_PATH\n, respectively. The path can be absolute, or (like in the default case) relative to the execution directory.\n\n\nAs an example, when starting the \napi-gateway\n service, it can be done like this:\n\n\n# bind mount the .key and .crt files to match the default container-internal ssl/server.* path\ndocker run -d -it --name api-gateway -e HTTP_MODE=https -v path/to/generated.key:ssl/server.key:ro -v path/to/generated.crt:ssl/server.crt:ro api-gateway:latest\n\n\n\n\nNote that if \napi-gateway\n is clustered onto several nodes, the files must be present on each server, either copied or shared over a network file system.\n\n\nEnabling native HTTPS for \nkibana\n\n\nIt is not recommended to open up the log viewing UI \nkibana\n for public use due to data sensitivity concerns. In any case, however Kibana is run, it is usually a good idea to encrypt the traffic. Kibana is an open source project with flexible configuration options, SSL being one of them. SSL configuration (\n) is done similarly to \napi-gateway\n, i.e. SSL is turned on and .key and .crt files are provided to the service. In this case, it is not done by environment variables but the Kibana configuration file. In the \nebmeds-docker\n package, this is found in \nkibana/config/kibana.yml\n.\n\n\nAuthentication (partially implemented)\n\n\nEBMeDS 2.0 handles authentication by a HTTP bearer token. This token must be included in the header of all requests to the service. EBMeDS can be configured to:\n\n\n\n\nAccept all traffic, without a token.\n\n\nAuthenticate traffic using a single, global token.\n\n\n(\nTo be implemented\n) Authenticate traffic using a multitenancy approach, where each user has his own token. This also enables per-user configuration of the response.\n\n\n\n\nPatient data security and liability\n\n\nEBMeDS operates with patient data, so data security and anonymity is paramount. EBMeDS has no need for any personally identifying data like names or social security numbers. The only biographical information used is age and gender, which is sent in addition to the clinical data (diagnoses, medication etc.) itself. However, it is up to the users of the EBMeDS service to ensure that no explicitly identifying information is sent to EBMeDS. Duodecim accepts no liability should e.g. social security numbers be present in the request data.\n\n\nThe data security model is simple insofar as EBMeDS is completely stateless. In other words, there is no direct way of connecting the data in a request with any earlier requests. This also means that each request must contain all the data required for that particular CDS context.\n\n\nCluster security\n\n\nEBMeDS is a microservice architecture, meaning that the EBMeDS service in general consists of smaller services that communicate internally with each other. EBMeDS can be run on a single machine or clustered over multiple servers. The underlying platform is Docker Swarm, which has \nthe following network security model\n.\n\n\nIn short, if EBMeDS is clustered onto multiple machines, intra-service communication may send patient data \"over the wire\". This traffic is unencrypted by default. It is up to the system administrator to ensure that communication between cluster nodes is secure, especially if the cluster is located in multiple data centers. Alternatively encryption of the entire Swarm overlay network can be enabled in Docker, although this is bad for performance.\n\n\nLogging\n\n\nThe one place where patient data may be stored is the service's logs. EBMeDS internally runs the so-called \"ELK stack\" (Elasticsearch, Logstash, Kibana). In other words, all logs are stored in an Elasticsearch database. Logging is done in two ways: regular service event logs, and logging of request/response data, i.e. patient data. Again, once the data is logged, it is up to the system administrator to store it and its backups in a secure fashion.\n\n\nRequest/response logging\n\n\nEBMeDS may be configured to log the request data, i.e. patient data, together with the resulting response data structure. This is done partially for debugging purposes, partially for liability purposes (if some user requires a certain period of traceability for all decision support requests). The request/response data is also useful for statistical reasons, and some services utilizing this log data has already cropped up.\n\n\nThis type of logging can naturally be turned off completely.\n\n\nService event logging\n\n\nRegular \"system logs\" from the internal microservices, interesting mainly for system administrators and developers. All services use the \nBunyan logging library\n which in turn sends the logs to Logstash, and finally they end up in Elasticsearch. Bunyan, like so many other logging libraries, has the concept of \nlog levels\n, i.e. the quantified importance of a particular log message. In normal operation, logging is only done on the \ninfo\n log level, meaning that the levels \ninfo\n, \nwarn\n, \nerror\n, \nfatal\n actually end up in the log database.\n\n\nNOTE\n: If the log level is set lower than \ninfo\n, i.e. if it is set to \ndebug\n or \ntrace\n, there may be some logging of patient data, in the form of internal data structures that are displayed in the logs. Do not use these log levels in production, at least not if you want to avoid storing patient data.\n\n\nError handling\n\n\nEBMeDS 2.0 uses standard HTTP error codes in its API. In addition to this, a JSON body is returned with some additional information, if available.\n\n\nExample:\n\n\n{\n  \nstatusCode\n: 400,\n  \nmessage\n: \nValidation error: QuestionnaireResponse did not validate against Questionnaire: [more info]\n,\n  \ncode\n: 'validation',\n}\n\n\n\n\n\n\nstatusCode\n: The same numerical HTTP error code as in the HTTP headers.\n\n\nmessage\n: A human-readable error message.\n\n\ncode\n (\noptional\n): A short string describing special error types, for errors with a definite meaning to the caller. Is not necessarily present in all error messages. The available types are found below.\n\n\n\n\nError types\n\n\nIn addition to the HTTP status code, some errors may have a more specific type attached to it. The current list of types is:\n\n\n\n\nvalidation\n: The user sent a request that failed validation in some way.\n\n\nquestionnaire-deprecated\n: The entire questionnaire has been removed from production and should not be used.\n\n\nquestionnaire-version-deprecated\n: This specific version of the questionnaire has been removed from production, please use a newer version.\n\n\n\n\nRetrying requests\n\n\nAs a general rule of thumb, 4xx errors require some action on the calling side, while 5xx errors are server-side. For 5xx errors, especially HTTP error 503 (service busy/unavailable), it is prudent to retry the request after a short wait, in case the error is transient in nature.", 
            "title": "Security & Error handling"
        }, 
        {
            "location": "/security/#security", 
            "text": "", 
            "title": "Security"
        }, 
        {
            "location": "/security/#network-security", 
            "text": "", 
            "title": "Network security"
        }, 
        {
            "location": "/security/#httphttps", 
            "text": "By default, EBMeDS 2.0 serves its API over HTTP, with no encryption. It is, however, strongly recommended to enable HTTPS or use a reverse proxy like  nginx  to provide SSL termination. There are two potentially public service that is good to protect:  api-gateway  and  kibana .", 
            "title": "HTTP/HTTPS"
        }, 
        {
            "location": "/security/#enabling-native-https-for-api-gateway", 
            "text": "HTTPS is enabled by setting the environment variable  HTTP_MODE  to  https  when launching the  api-gateway  container. In addition to this, the system administrator must obtain/generate a .key and .crt file and bind mount them onto the container so they may be read by the  api-gateway  service.  Inside the container, the path to the aforementioned key and certificate files are by default  ssl/server.key  and  ssl/server.crt  but may be configured with the environment variables  HTTPS_KEY_PATH  and  HTTPS_CERT_PATH , respectively. The path can be absolute, or (like in the default case) relative to the execution directory.  As an example, when starting the  api-gateway  service, it can be done like this:  # bind mount the .key and .crt files to match the default container-internal ssl/server.* path\ndocker run -d -it --name api-gateway -e HTTP_MODE=https -v path/to/generated.key:ssl/server.key:ro -v path/to/generated.crt:ssl/server.crt:ro api-gateway:latest  Note that if  api-gateway  is clustered onto several nodes, the files must be present on each server, either copied or shared over a network file system.", 
            "title": "Enabling native HTTPS for api-gateway"
        }, 
        {
            "location": "/security/#enabling-native-https-for-kibana", 
            "text": "It is not recommended to open up the log viewing UI  kibana  for public use due to data sensitivity concerns. In any case, however Kibana is run, it is usually a good idea to encrypt the traffic. Kibana is an open source project with flexible configuration options, SSL being one of them. SSL configuration ( ) is done similarly to  api-gateway , i.e. SSL is turned on and .key and .crt files are provided to the service. In this case, it is not done by environment variables but the Kibana configuration file. In the  ebmeds-docker  package, this is found in  kibana/config/kibana.yml .", 
            "title": "Enabling native HTTPS for kibana"
        }, 
        {
            "location": "/security/#authentication-partially-implemented", 
            "text": "EBMeDS 2.0 handles authentication by a HTTP bearer token. This token must be included in the header of all requests to the service. EBMeDS can be configured to:   Accept all traffic, without a token.  Authenticate traffic using a single, global token.  ( To be implemented ) Authenticate traffic using a multitenancy approach, where each user has his own token. This also enables per-user configuration of the response.", 
            "title": "Authentication (partially implemented)"
        }, 
        {
            "location": "/security/#patient-data-security-and-liability", 
            "text": "EBMeDS operates with patient data, so data security and anonymity is paramount. EBMeDS has no need for any personally identifying data like names or social security numbers. The only biographical information used is age and gender, which is sent in addition to the clinical data (diagnoses, medication etc.) itself. However, it is up to the users of the EBMeDS service to ensure that no explicitly identifying information is sent to EBMeDS. Duodecim accepts no liability should e.g. social security numbers be present in the request data.  The data security model is simple insofar as EBMeDS is completely stateless. In other words, there is no direct way of connecting the data in a request with any earlier requests. This also means that each request must contain all the data required for that particular CDS context.", 
            "title": "Patient data security and liability"
        }, 
        {
            "location": "/security/#cluster-security", 
            "text": "EBMeDS is a microservice architecture, meaning that the EBMeDS service in general consists of smaller services that communicate internally with each other. EBMeDS can be run on a single machine or clustered over multiple servers. The underlying platform is Docker Swarm, which has  the following network security model .  In short, if EBMeDS is clustered onto multiple machines, intra-service communication may send patient data \"over the wire\". This traffic is unencrypted by default. It is up to the system administrator to ensure that communication between cluster nodes is secure, especially if the cluster is located in multiple data centers. Alternatively encryption of the entire Swarm overlay network can be enabled in Docker, although this is bad for performance.", 
            "title": "Cluster security"
        }, 
        {
            "location": "/security/#logging", 
            "text": "The one place where patient data may be stored is the service's logs. EBMeDS internally runs the so-called \"ELK stack\" (Elasticsearch, Logstash, Kibana). In other words, all logs are stored in an Elasticsearch database. Logging is done in two ways: regular service event logs, and logging of request/response data, i.e. patient data. Again, once the data is logged, it is up to the system administrator to store it and its backups in a secure fashion.", 
            "title": "Logging"
        }, 
        {
            "location": "/security/#requestresponse-logging", 
            "text": "EBMeDS may be configured to log the request data, i.e. patient data, together with the resulting response data structure. This is done partially for debugging purposes, partially for liability purposes (if some user requires a certain period of traceability for all decision support requests). The request/response data is also useful for statistical reasons, and some services utilizing this log data has already cropped up.  This type of logging can naturally be turned off completely.", 
            "title": "Request/response logging"
        }, 
        {
            "location": "/security/#service-event-logging", 
            "text": "Regular \"system logs\" from the internal microservices, interesting mainly for system administrators and developers. All services use the  Bunyan logging library  which in turn sends the logs to Logstash, and finally they end up in Elasticsearch. Bunyan, like so many other logging libraries, has the concept of  log levels , i.e. the quantified importance of a particular log message. In normal operation, logging is only done on the  info  log level, meaning that the levels  info ,  warn ,  error ,  fatal  actually end up in the log database.  NOTE : If the log level is set lower than  info , i.e. if it is set to  debug  or  trace , there may be some logging of patient data, in the form of internal data structures that are displayed in the logs. Do not use these log levels in production, at least not if you want to avoid storing patient data.", 
            "title": "Service event logging"
        }, 
        {
            "location": "/security/#error-handling", 
            "text": "EBMeDS 2.0 uses standard HTTP error codes in its API. In addition to this, a JSON body is returned with some additional information, if available.  Example:  {\n   statusCode : 400,\n   message :  Validation error: QuestionnaireResponse did not validate against Questionnaire: [more info] ,\n   code : 'validation',\n}   statusCode : The same numerical HTTP error code as in the HTTP headers.  message : A human-readable error message.  code  ( optional ): A short string describing special error types, for errors with a definite meaning to the caller. Is not necessarily present in all error messages. The available types are found below.", 
            "title": "Error handling"
        }, 
        {
            "location": "/security/#error-types", 
            "text": "In addition to the HTTP status code, some errors may have a more specific type attached to it. The current list of types is:   validation : The user sent a request that failed validation in some way.  questionnaire-deprecated : The entire questionnaire has been removed from production and should not be used.  questionnaire-version-deprecated : This specific version of the questionnaire has been removed from production, please use a newer version.", 
            "title": "Error types"
        }, 
        {
            "location": "/security/#retrying-requests", 
            "text": "As a general rule of thumb, 4xx errors require some action on the calling side, while 5xx errors are server-side. For 5xx errors, especially HTTP error 503 (service busy/unavailable), it is prudent to retry the request after a short wait, in case the error is transient in nature.", 
            "title": "Retrying requests"
        }
    ]
}